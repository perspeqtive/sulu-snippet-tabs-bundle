<?php

namespace ContainerQk9OUPX;

use Symfony\Component\DependencyInjection\Argument\RewindableGenerator;
use Symfony\Component\DependencyInjection\ContainerInterface;
use Symfony\Component\DependencyInjection\Exception\RuntimeException;

/**
 * @internal This class has been auto-generated by the Symfony Dependency Injection Component.
 */
class getSuluCategory_CategoryManagerService extends PERSPEQTIVE_SuluSnippetTabsBundle_Tests_Application_KernelDevDebugContainer
{
    /**
     * Gets the public 'sulu_category.category_manager' shared service.
     *
     * @return \Sulu\Bundle\CategoryBundle\Category\CategoryManager
     */
    public static function do($container, $lazyLoad = true)
    {
        $a = ($container->services['sulu_category.keyword_manager'] ?? $container->load('getSuluCategory_KeywordManagerService'));

        if (isset($container->services['sulu_category.category_manager'])) {
            return $container->services['sulu_category.category_manager'];
        }
        $b = ($container->services['doctrine.orm.default_entity_manager'] ?? self::getDoctrine_Orm_DefaultEntityManagerService($container));

        if (isset($container->services['sulu_category.category_manager'])) {
            return $container->services['sulu_category.category_manager'];
        }
        $c = ($container->services['event_dispatcher'] ?? self::getEventDispatcherService($container));

        if (isset($container->services['sulu_category.category_manager'])) {
            return $container->services['sulu_category.category_manager'];
        }

        return $container->services['sulu_category.category_manager'] = new \Sulu\Bundle\CategoryBundle\Category\CategoryManager(($container->services['sulu.repository.category'] ?? self::getSulu_Repository_CategoryService($container)), ($container->services['sulu.repository.category_meta'] ?? $container->load('getSulu_Repository_CategoryMetaService')), ($container->services['sulu.repository.category_translation'] ?? $container->load('getSulu_Repository_CategoryTranslationService')), ($container->services['sulu.repository.user'] ?? self::getSulu_Repository_UserService($container)), $a, $b, $c, ($container->privates['sulu_activity.domain_event_collector'] ?? self::getSuluActivity_DomainEventCollectorService($container)), ($container->privates['sulu_trash.trash_manager'] ?? self::getSuluTrash_TrashManagerService($container)));
    }
}
