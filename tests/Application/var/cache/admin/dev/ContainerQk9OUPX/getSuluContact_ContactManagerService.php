<?php

namespace ContainerQk9OUPX;

use Symfony\Component\DependencyInjection\Argument\RewindableGenerator;
use Symfony\Component\DependencyInjection\ContainerInterface;
use Symfony\Component\DependencyInjection\Exception\RuntimeException;

/**
 * @internal This class has been auto-generated by the Symfony Dependency Injection Component.
 */
class getSuluContact_ContactManagerService extends PERSPEQTIVE_SuluSnippetTabsBundle_Tests_Application_KernelDevDebugContainer
{
    /**
     * Gets the public 'sulu_contact.contact_manager' shared service.
     *
     * @return \Sulu\Bundle\ContactBundle\Contact\ContactManager
     */
    public static function do($container, $lazyLoad = true)
    {
        $a = ($container->services['doctrine.orm.default_entity_manager'] ?? self::getDoctrine_Orm_DefaultEntityManagerService($container));

        if (isset($container->services['sulu_contact.contact_manager'])) {
            return $container->services['sulu_contact.contact_manager'];
        }
        $b = ($container->services['sulu_tag.tag_manager'] ?? self::getSuluTag_TagManagerService($container));

        if (isset($container->services['sulu_contact.contact_manager'])) {
            return $container->services['sulu_contact.contact_manager'];
        }
        $c = ($container->services['sulu_media.media_manager'] ?? self::getSuluMedia_MediaManagerService($container));

        if (isset($container->services['sulu_contact.contact_manager'])) {
            return $container->services['sulu_contact.contact_manager'];
        }

        return $container->services['sulu_contact.contact_manager'] = new \Sulu\Bundle\ContactBundle\Contact\ContactManager($a, $b, $c, ($container->services['sulu.repository.account'] ?? $container->load('getSulu_Repository_AccountService')), ($container->privates['sulu_contact.contact_title_repository'] ?? $container->load('getSuluContact_ContactTitleRepositoryService')), ($container->services['sulu.repository.contact'] ?? $container->load('getSulu_Repository_ContactService')), ($container->services['sulu.repository.media'] ?? self::getSulu_Repository_MediaService($container)), ($container->privates['sulu_activity.domain_event_collector'] ?? self::getSuluActivity_DomainEventCollectorService($container)), ($container->services['sulu.repository.user'] ?? self::getSulu_Repository_UserService($container)), ($container->privates['sulu_trash.trash_manager'] ?? self::getSuluTrash_TrashManagerService($container)));
    }
}
