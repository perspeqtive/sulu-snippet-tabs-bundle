<?php

namespace ContainerQk9OUPX;

use Symfony\Component\DependencyInjection\Argument\RewindableGenerator;
use Symfony\Component\DependencyInjection\ContainerInterface;
use Symfony\Component\DependencyInjection\Container;
use Symfony\Component\DependencyInjection\Exception\LogicException;
use Symfony\Component\DependencyInjection\Exception\ParameterNotFoundException;
use Symfony\Component\DependencyInjection\Exception\RuntimeException;
use Symfony\Component\DependencyInjection\ParameterBag\FrozenParameterBag;
use Symfony\Component\DependencyInjection\ParameterBag\ParameterBagInterface;

/**
 * @internal This class has been auto-generated by the Symfony Dependency Injection Component.
 */
class PERSPEQTIVE_SuluSnippetTabsBundle_Tests_Application_KernelDevDebugContainer extends Container
{
    private const NONEMPTY_PARAMETERS = [
        'kernel.secret' => 'A non-empty value for the parameter "kernel.secret" is required. Did you forget to configure the "framework.secret" option?',
    ];

    protected $targetDir;
    protected $parameters = [];
    protected \Closure $getService;

    public function __construct(private array $buildParameters = [], protected string $containerDir = __DIR__)
    {
        $this->targetDir = \dirname($containerDir);
        $this->parameters = $this->getDefaultParameters();

        $this->services = $this->privates = [];
        $this->syntheticIds = [
            'kernel' => true,
        ];
        $this->methodMap = [
            'cache.security_is_csrf_token_valid_attribute_expression_language' => 'getCache_SecurityIsCsrfTokenValidAttributeExpressionLanguageService',
            'cache.security_is_granted_attribute_expression_language' => 'getCache_SecurityIsGrantedAttributeExpressionLanguageService',
            'doctrine' => 'getDoctrineService',
            'doctrine.dbal.default_connection' => 'getDoctrine_Dbal_DefaultConnectionService',
            'doctrine.orm.default_entity_manager' => 'getDoctrine_Orm_DefaultEntityManagerService',
            'doctrine_phpcr.session' => 'getDoctrinePhpcr_SessionService',
            'event_dispatcher' => 'getEventDispatcherService',
            'fos_http_cache.event_listener.cache_control' => 'getFosHttpCache_EventListener_CacheControlService',
            'http_kernel' => 'getHttpKernelService',
            'jms_serializer.authorization_checker' => 'getJmsSerializer_AuthorizationCheckerService',
            'request_stack' => 'getRequestStackService',
            'router' => 'getRouterService',
            'sulu.content.localization_finder' => 'getSulu_Content_LocalizationFinderService',
            'sulu.content.path_cleaner' => 'getSulu_Content_PathCleanerService',
            'sulu.content.structure_manager' => 'getSulu_Content_StructureManagerService',
            'sulu.content.type_manager' => 'getSulu_Content_TypeManagerService',
            'sulu.phpcr.session' => 'getSulu_Phpcr_SessionService',
            'sulu.repository.access_control' => 'getSulu_Repository_AccessControlService',
            'sulu.repository.category' => 'getSulu_Repository_CategoryService',
            'sulu.repository.media' => 'getSulu_Repository_MediaService',
            'sulu.repository.role' => 'getSulu_Repository_RoleService',
            'sulu.repository.tag' => 'getSulu_Repository_TagService',
            'sulu.repository.target_group' => 'getSulu_Repository_TargetGroupService',
            'sulu.repository.user' => 'getSulu_Repository_UserService',
            'sulu.util.node_helper' => 'getSulu_Util_NodeHelperService',
            'sulu_core.webspace.request_analyzer' => 'getSuluCore_Webspace_RequestAnalyzerService',
            'sulu_core.webspace.webspace_manager' => 'getSuluCore_Webspace_WebspaceManagerService',
            'sulu_document_manager.document_inspector' => 'getSuluDocumentManager_DocumentInspectorService',
            'sulu_document_manager.document_manager' => 'getSuluDocumentManager_DocumentManagerService',
            'sulu_document_manager.metadata_factory.base' => 'getSuluDocumentManager_MetadataFactory_BaseService',
            'sulu_document_manager.property_encoder' => 'getSuluDocumentManager_PropertyEncoderService',
            'sulu_markup.parser.html_extractor' => 'getSuluMarkup_Parser_HtmlExtractorService',
            'sulu_media.collection_repository' => 'getSuluMedia_CollectionRepositoryService',
            'sulu_media.format_cache' => 'getSuluMedia_FormatCacheService',
            'sulu_media.format_manager' => 'getSuluMedia_FormatManagerService',
            'sulu_media.image.transformation.blur' => 'getSuluMedia_Image_Transformation_BlurService',
            'sulu_media.image.transformation.crop' => 'getSuluMedia_Image_Transformation_CropService',
            'sulu_media.image.transformation.gamma' => 'getSuluMedia_Image_Transformation_GammaService',
            'sulu_media.image.transformation.grayscale' => 'getSuluMedia_Image_Transformation_GrayscaleService',
            'sulu_media.image.transformation.negative' => 'getSuluMedia_Image_Transformation_NegativeService',
            'sulu_media.image.transformation.paste' => 'getSuluMedia_Image_Transformation_PasteService',
            'sulu_media.image.transformation.sharpen' => 'getSuluMedia_Image_Transformation_SharpenService',
            'sulu_media.media_manager' => 'getSuluMedia_MediaManagerService',
            'sulu_media.storage' => 'getSuluMedia_StorageService',
            'sulu_page.compat.structure.legacy_property_factory' => 'getSuluPage_Compat_Structure_LegacyPropertyFactoryService',
            'sulu_page.content_repository' => 'getSuluPage_ContentRepositoryService',
            'sulu_page.structure.factory' => 'getSuluPage_Structure_FactoryService',
            'sulu_security.mask_converter' => 'getSuluSecurity_MaskConverterService',
            'sulu_security.security_checker' => 'getSuluSecurity_SecurityCheckerService',
            'sulu_tag.tag_manager' => 'getSuluTag_TagManagerService',
            'translator' => 'getTranslatorService',
        ];
        $this->fileMap = [
            'Symfony\\Bundle\\FrameworkBundle\\Controller\\RedirectController' => 'getRedirectControllerService',
            'Symfony\\Bundle\\FrameworkBundle\\Controller\\TemplateController' => 'getTemplateControllerService',
            'cache.app' => 'getCache_AppService',
            'cache.app_clearer' => 'getCache_AppClearerService',
            'cache.global_clearer' => 'getCache_GlobalClearerService',
            'cache.system' => 'getCache_SystemService',
            'cache.system_clearer' => 'getCache_SystemClearerService',
            'cache.validator_expression_language' => 'getCache_ValidatorExpressionLanguageService',
            'cache_warmer' => 'getCacheWarmerService',
            'console.command.public_alias.Doctrine\\Bundle\\PHPCRBundle\\Command\\MigratorMigrateCommand' => 'getMigratorMigrateCommandService',
            'console.command.public_alias.Doctrine\\Bundle\\PHPCRBundle\\Command\\NodeDumpCommand' => 'getNodeDumpCommandService',
            'console.command.public_alias.Doctrine\\Bundle\\PHPCRBundle\\Command\\NodeMoveCommand' => 'getNodeMoveCommandService',
            'console.command.public_alias.Doctrine\\Bundle\\PHPCRBundle\\Command\\NodeRemoveCommand' => 'getNodeRemoveCommandService',
            'console.command.public_alias.Doctrine\\Bundle\\PHPCRBundle\\Command\\NodeTouchCommand' => 'getNodeTouchCommandService',
            'console.command.public_alias.Doctrine\\Bundle\\PHPCRBundle\\Command\\NodeTypeListCommand' => 'getNodeTypeListCommandService',
            'console.command.public_alias.Doctrine\\Bundle\\PHPCRBundle\\Command\\NodeTypeRegisterCommand' => 'getNodeTypeRegisterCommandService',
            'console.command.public_alias.Doctrine\\Bundle\\PHPCRBundle\\Command\\NodesUpdateCommand' => 'getNodesUpdateCommandService',
            'console.command.public_alias.Doctrine\\Bundle\\PHPCRBundle\\Command\\PhpcrShellCommand' => 'getPhpcrShellCommandService',
            'console.command.public_alias.Doctrine\\Bundle\\PHPCRBundle\\Command\\RepositoryInitCommand' => 'getRepositoryInitCommandService',
            'console.command.public_alias.Doctrine\\Bundle\\PHPCRBundle\\Command\\WorkspaceCreateCommand' => 'getWorkspaceCreateCommandService',
            'console.command.public_alias.Doctrine\\Bundle\\PHPCRBundle\\Command\\WorkspaceDeleteCommand' => 'getWorkspaceDeleteCommandService',
            'console.command.public_alias.Doctrine\\Bundle\\PHPCRBundle\\Command\\WorkspaceExportCommand' => 'getWorkspaceExportCommandService',
            'console.command.public_alias.Doctrine\\Bundle\\PHPCRBundle\\Command\\WorkspaceImportCommand' => 'getWorkspaceImportCommandService',
            'console.command.public_alias.Doctrine\\Bundle\\PHPCRBundle\\Command\\WorkspaceListCommand' => 'getWorkspaceListCommandService',
            'console.command.public_alias.Doctrine\\Bundle\\PHPCRBundle\\Command\\WorkspacePurgeCommand' => 'getWorkspacePurgeCommandService',
            'console.command.public_alias.Doctrine\\Bundle\\PHPCRBundle\\Command\\WorkspaceQueryCommand' => 'getWorkspaceQueryCommandService',
            'console.command.public_alias.Doctrine\\Bundle\\PHPCRBundle\\OptionalCommand\\InitDoctrineDbalCommand' => 'getInitDoctrineDbalCommandService',
            'console.command.public_alias.handcraftedinthealps_rest_routing.command' => 'getConsole_Command_PublicAlias_HandcraftedinthealpsRestRouting_CommandService',
            'console.command.public_alias.massive_search.command.index_rebuild_deprecated' => 'getConsole_Command_PublicAlias_MassiveSearch_Command_IndexRebuildDeprecatedService',
            'console.command.public_alias.massive_search.command.init' => 'getConsole_Command_PublicAlias_MassiveSearch_Command_InitService',
            'console.command.public_alias.massive_search.command.optimize' => 'getConsole_Command_PublicAlias_MassiveSearch_Command_OptimizeService',
            'console.command.public_alias.massive_search.command.purge' => 'getConsole_Command_PublicAlias_MassiveSearch_Command_PurgeService',
            'console.command.public_alias.massive_search.command.query' => 'getConsole_Command_PublicAlias_MassiveSearch_Command_QueryService',
            'console.command.public_alias.massive_search.command.reindex' => 'getConsole_Command_PublicAlias_MassiveSearch_Command_ReindexService',
            'console.command.public_alias.massive_search.command.status' => 'getConsole_Command_PublicAlias_MassiveSearch_Command_StatusService',
            'console.command.public_alias.sulu_page.command.workspace_import' => 'getConsole_Command_PublicAlias_SuluPage_Command_WorkspaceImportService',
            'console.command_loader' => 'getConsole_CommandLoaderService',
            'container.env_var_processors_locator' => 'getContainer_EnvVarProcessorsLocatorService',
            'container.get_routing_condition_service' => 'getContainer_GetRoutingConditionServiceService',
            'debug.error_handler_configurator' => 'getDebug_ErrorHandlerConfiguratorService',
            'doctrine_phpcr' => 'getDoctrinePhpcrService',
            'doctrine_phpcr.admin.default_session' => 'getDoctrinePhpcr_Admin_DefaultSessionService',
            'doctrine_phpcr.admin.live_session' => 'getDoctrinePhpcr_Admin_LiveSessionService',
            'doctrine_phpcr.initializer_manager' => 'getDoctrinePhpcr_InitializerManagerService',
            'error_controller' => 'getErrorControllerService',
            'fos_js_routing.controller' => 'getFosJsRouting_ControllerService',
            'fos_js_routing.extractor' => 'getFosJsRouting_ExtractorService',
            'fos_js_routing.routes_response' => 'getFosJsRouting_RoutesResponseService',
            'fos_js_routing.serializer' => 'getFosJsRouting_SerializerService',
            'fos_rest.view_handler' => 'getFosRest_ViewHandlerService',
            'jms_serializer' => 'getJmsSerializerService',
            'jms_serializer.deserialization_context_factory' => 'getJmsSerializer_DeserializationContextFactoryService',
            'jms_serializer.serialization_context_factory' => 'getJmsSerializer_SerializationContextFactoryService',
            'massive_search.adapter.test' => 'getMassiveSearch_Adapter_TestService',
            'massive_search.adapter.zend_lucene' => 'getMassiveSearch_Adapter_ZendLuceneService',
            'massive_search.search_manager' => 'getMassiveSearch_SearchManagerService',
            'phpcr_migrations.command.initialize' => 'getPhpcrMigrations_Command_InitializeService',
            'phpcr_migrations.command.migrate' => 'getPhpcrMigrations_Command_MigrateService',
            'phpcr_migrations.command.status' => 'getPhpcrMigrations_Command_StatusService',
            'routing.loader' => 'getRouting_LoaderService',
            'services_resetter' => 'getServicesResetterService',
            'sulu.content.mapper' => 'getSulu_Content_MapperService',
            'sulu.content.path_cleaner.replacer_loader' => 'getSulu_Content_PathCleaner_ReplacerLoaderService',
            'sulu.content.path_cleaner.replacer_loader.file_locator' => 'getSulu_Content_PathCleaner_ReplacerLoader_FileLocatorService',
            'sulu.content.type.block' => 'getSulu_Content_Type_BlockService',
            'sulu.content.type.checkbox' => 'getSulu_Content_Type_CheckboxService',
            'sulu.content.type.color' => 'getSulu_Content_Type_ColorService',
            'sulu.content.type.date' => 'getSulu_Content_Type_DateService',
            'sulu.content.type.datetime' => 'getSulu_Content_Type_DatetimeService',
            'sulu.content.type.email' => 'getSulu_Content_Type_EmailService',
            'sulu.content.type.link' => 'getSulu_Content_Type_LinkService',
            'sulu.content.type.number' => 'getSulu_Content_Type_NumberService',
            'sulu.content.type.page_selection' => 'getSulu_Content_Type_PageSelectionService',
            'sulu.content.type.password' => 'getSulu_Content_Type_PasswordService',
            'sulu.content.type.phone' => 'getSulu_Content_Type_PhoneService',
            'sulu.content.type.resource_locator' => 'getSulu_Content_Type_ResourceLocatorService',
            'sulu.content.type.segment_select' => 'getSulu_Content_Type_SegmentSelectService',
            'sulu.content.type.select' => 'getSulu_Content_Type_SelectService',
            'sulu.content.type.single_icon_selection' => 'getSulu_Content_Type_SingleIconSelectionService',
            'sulu.content.type.single_page_selection' => 'getSulu_Content_Type_SinglePageSelectionService',
            'sulu.content.type.single_select' => 'getSulu_Content_Type_SingleSelectService',
            'sulu.content.type.text_area' => 'getSulu_Content_Type_TextAreaService',
            'sulu.content.type.text_editor' => 'getSulu_Content_Type_TextEditorService',
            'sulu.content.type.text_line' => 'getSulu_Content_Type_TextLineService',
            'sulu.content.type.time' => 'getSulu_Content_Type_TimeService',
            'sulu.content.type.url' => 'getSulu_Content_Type_UrlService',
            'sulu.content.webspace_structure_provider' => 'getSulu_Content_WebspaceStructureProviderService',
            'sulu.core.localization_manager' => 'getSulu_Core_LocalizationManagerService',
            'sulu.repository.account' => 'getSulu_Repository_AccountService',
            'sulu.repository.activity' => 'getSulu_Repository_ActivityService',
            'sulu.repository.analytics' => 'getSulu_Repository_AnalyticsService',
            'sulu.repository.category_meta' => 'getSulu_Repository_CategoryMetaService',
            'sulu.repository.category_translation' => 'getSulu_Repository_CategoryTranslationService',
            'sulu.repository.contact' => 'getSulu_Repository_ContactService',
            'sulu.repository.keyword' => 'getSulu_Repository_KeywordService',
            'sulu.repository.preview_link' => 'getSulu_Repository_PreviewLinkService',
            'sulu.repository.reference' => 'getSulu_Repository_ReferenceService',
            'sulu.repository.role_setting' => 'getSulu_Repository_RoleSettingService',
            'sulu.repository.route' => 'getSulu_Repository_RouteService',
            'sulu.repository.target_group_condition' => 'getSulu_Repository_TargetGroupConditionService',
            'sulu.repository.target_group_rule' => 'getSulu_Repository_TargetGroupRuleService',
            'sulu.repository.target_group_webspace' => 'getSulu_Repository_TargetGroupWebspaceService',
            'sulu.repository.trash_item' => 'getSulu_Repository_TrashItemService',
            'sulu_activity.activity_controller' => 'getSuluActivity_ActivityControllerService',
            'sulu_admin.admin_controller' => 'getSuluAdmin_AdminControllerService',
            'sulu_admin.admin_pool' => 'getSuluAdmin_AdminPoolService',
            'sulu_admin.collaboration_controller' => 'getSuluAdmin_CollaborationControllerService',
            'sulu_admin.icon_controller' => 'getSuluAdmin_IconControllerService',
            'sulu_audience_targeting.content.type.target_group_selection' => 'getSuluAudienceTargeting_Content_Type_TargetGroupSelectionService',
            'sulu_audience_targeting.target_group_controller' => 'getSuluAudienceTargeting_TargetGroupControllerService',
            'sulu_audience_targeting.target_group_evaluation_controller' => 'getSuluAudienceTargeting_TargetGroupEvaluationControllerService',
            'sulu_audience_targeting.target_group_store' => 'getSuluAudienceTargeting_TargetGroupStoreService',
            'sulu_audience_targeting.webspace_select_helper' => 'getSuluAudienceTargeting_WebspaceSelectHelperService',
            'sulu_category.category_controller' => 'getSuluCategory_CategoryControllerService',
            'sulu_category.category_manager' => 'getSuluCategory_CategoryManagerService',
            'sulu_category.content.type.category_selection' => 'getSuluCategory_Content_Type_CategorySelectionService',
            'sulu_category.content.type.single_category_selection' => 'getSuluCategory_Content_Type_SingleCategorySelectionService',
            'sulu_category.keyword_controller' => 'getSuluCategory_KeywordControllerService',
            'sulu_category.keyword_manager' => 'getSuluCategory_KeywordManagerService',
            'sulu_contact.account_controller' => 'getSuluContact_AccountControllerService',
            'sulu_contact.account_factory' => 'getSuluContact_AccountFactoryService',
            'sulu_contact.account_manager' => 'getSuluContact_AccountManagerService',
            'sulu_contact.account_media_controller' => 'getSuluContact_AccountMediaControllerService',
            'sulu_contact.contact_controller' => 'getSuluContact_ContactControllerService',
            'sulu_contact.contact_manager' => 'getSuluContact_ContactManagerService',
            'sulu_contact.contact_media_controller' => 'getSuluContact_ContactMediaControllerService',
            'sulu_contact.contact_title_controller' => 'getSuluContact_ContactTitleControllerService',
            'sulu_contact.content.account_selection' => 'getSuluContact_Content_AccountSelectionService',
            'sulu_contact.content.contact_account_selection' => 'getSuluContact_Content_ContactAccountSelectionService',
            'sulu_contact.content.contact_selection' => 'getSuluContact_Content_ContactSelectionService',
            'sulu_contact.content.single_account_selection' => 'getSuluContact_Content_SingleAccountSelectionService',
            'sulu_contact.content.single_contact_selection' => 'getSuluContact_Content_SingleContactSelectionService',
            'sulu_contact.form_of_address_provider' => 'getSuluContact_FormOfAddressProviderService',
            'sulu_contact.position_controller' => 'getSuluContact_PositionControllerService',
            'sulu_contact.util.index_comparator' => 'getSuluContact_Util_IndexComparatorService',
            'sulu_core.array_serializer' => 'getSuluCore_ArraySerializerService',
            'sulu_core.doctrine_list_builder_factory' => 'getSuluCore_DoctrineListBuilderFactoryService',
            'sulu_core.doctrine_rest_helper' => 'getSuluCore_DoctrineRestHelperService',
            'sulu_core.list_builder.field_descriptor_factory' => 'getSuluCore_ListBuilder_FieldDescriptorFactoryService',
            'sulu_core.list_rest_helper' => 'getSuluCore_ListRestHelperService',
            'sulu_core.localization_controller' => 'getSuluCore_LocalizationControllerService',
            'sulu_core.webspace.document_manager.webspace_initializer' => 'getSuluCore_Webspace_DocumentManager_WebspaceInitializerService',
            'sulu_custom_urls.custom_url_controller' => 'getSuluCustomUrls_CustomUrlControllerService',
            'sulu_custom_urls.custom_url_route_controller' => 'getSuluCustomUrls_CustomUrlRouteControllerService',
            'sulu_custom_urls.initializer' => 'getSuluCustomUrls_InitializerService',
            'sulu_custom_urls.manager' => 'getSuluCustomUrls_ManagerService',
            'sulu_document_manager.initializer' => 'getSuluDocumentManager_InitializerService',
            'sulu_document_manager.initializer.root_path_purge_initializer' => 'getSuluDocumentManager_Initializer_RootPathPurgeInitializerService',
            'sulu_document_manager.initializer.workspace' => 'getSuluDocumentManager_Initializer_WorkspaceService',
            'sulu_document_manager.live_session' => 'getSuluDocumentManager_LiveSessionService',
            'sulu_document_manager.serializer.subscriber.proxy' => 'getSuluDocumentManager_Serializer_Subscriber_ProxyService',
            'sulu_hash.request_hash_checker' => 'getSuluHash_RequestHashCheckerService',
            'sulu_http_cache.cache_lifetime.enhancer' => 'getSuluHttpCache_CacheLifetime_EnhancerService',
            'sulu_location.content.type.location' => 'getSuluLocation_Content_Type_LocationService',
            'sulu_location.controller.geolocator' => 'getSuluLocation_Controller_GeolocatorService',
            'sulu_media.collection_controller' => 'getSuluMedia_CollectionControllerService',
            'sulu_media.collection_manager' => 'getSuluMedia_CollectionManagerService',
            'sulu_media.disposition_type.resolver' => 'getSuluMedia_DispositionType_ResolverService',
            'sulu_media.format_controller' => 'getSuluMedia_FormatControllerService',
            'sulu_media.format_options_manager' => 'getSuluMedia_FormatOptionsManagerService',
            'sulu_media.media_controller' => 'getSuluMedia_MediaControllerService',
            'sulu_media.media_format_controller' => 'getSuluMedia_MediaFormatControllerService',
            'sulu_media.media_preview_controller' => 'getSuluMedia_MediaPreviewControllerService',
            'sulu_media.media_redirect_controller' => 'getSuluMedia_MediaRedirectControllerService',
            'sulu_media.media_stream_controller' => 'getSuluMedia_MediaStreamControllerService',
            'sulu_media.system_collections.manager' => 'getSuluMedia_SystemCollections_ManagerService',
            'sulu_media.type.collection_selection' => 'getSuluMedia_Type_CollectionSelectionService',
            'sulu_media.type.image_map' => 'getSuluMedia_Type_ImageMapService',
            'sulu_media.type.media_selection' => 'getSuluMedia_Type_MediaSelectionService',
            'sulu_media.type.single_collection_selection' => 'getSuluMedia_Type_SingleCollectionSelectionService',
            'sulu_media.type.single_media_selection' => 'getSuluMedia_Type_SingleMediaSelectionService',
            'sulu_page.document_manager.content_initializer' => 'getSuluPage_DocumentManager_ContentInitializerService',
            'sulu_page.export.webspace' => 'getSuluPage_Export_WebspaceService',
            'sulu_page.extension.manager' => 'getSuluPage_Extension_ManagerService',
            'sulu_page.import.webspace' => 'getSuluPage_Import_WebspaceService',
            'sulu_page.node_repository' => 'getSuluPage_NodeRepositoryService',
            'sulu_page.page_controller' => 'getSuluPage_PageControllerService',
            'sulu_page.page_resource_locator_controller' => 'getSuluPage_PageResourceLocatorControllerService',
            'sulu_page.resource_locator_controller' => 'getSuluPage_ResourceLocatorControllerService',
            'sulu_page.rl_repository' => 'getSuluPage_RlRepositoryService',
            'sulu_page.smart_content.content_type' => 'getSuluPage_SmartContent_ContentTypeService',
            'sulu_page.smart_content.data_provider_pool' => 'getSuluPage_SmartContent_DataProviderPoolService',
            'sulu_page.smart_content_item_controller' => 'getSuluPage_SmartContentItemControllerService',
            'sulu_page.teaser.content_type' => 'getSuluPage_Teaser_ContentTypeService',
            'sulu_page.teaser_controller' => 'getSuluPage_TeaserControllerService',
            'sulu_page.webspace_controller' => 'getSuluPage_WebspaceControllerService',
            'sulu_page.webspace_localization_controller' => 'getSuluPage_WebspaceLocalizationControllerService',
            'sulu_preview.preview_controller' => 'getSuluPreview_PreviewControllerService',
            'sulu_preview.preview_link_controller' => 'getSuluPreview_PreviewLinkControllerService',
            'sulu_preview.public_preview_controller' => 'getSuluPreview_PublicPreviewControllerService',
            'sulu_reference.reference_controller' => 'getSuluReference_ReferenceControllerService',
            'sulu_route.content_type' => 'getSuluRoute_ContentTypeService',
            'sulu_route.content_type.page_tree_route' => 'getSuluRoute_ContentType_PageTreeRouteService',
            'sulu_route.route_controller' => 'getSuluRoute_RouteControllerService',
            'sulu_search.controller.search' => 'getSuluSearch_Controller_SearchService',
            'sulu_security.contexts_controller' => 'getSuluSecurity_ContextsControllerService',
            'sulu_security.encoder_factory' => 'getSuluSecurity_EncoderFactoryService',
            'sulu_security.group_controller' => 'getSuluSecurity_GroupControllerService',
            'sulu_security.permission_controller' => 'getSuluSecurity_PermissionControllerService',
            'sulu_security.profile_controller' => 'getSuluSecurity_ProfileControllerService',
            'sulu_security.resetting_controller' => 'getSuluSecurity_ResettingControllerService',
            'sulu_security.role_controller' => 'getSuluSecurity_RoleControllerService',
            'sulu_security.role_setting_controller' => 'getSuluSecurity_RoleSettingControllerService',
            'sulu_security.salt_generator' => 'getSuluSecurity_SaltGeneratorService',
            'sulu_security.security_systems_select_helper' => 'getSuluSecurity_SecuritySystemsSelectHelperService',
            'sulu_security.system_language_select_helper' => 'getSuluSecurity_SystemLanguageSelectHelperService',
            'sulu_security.token_generator' => 'getSuluSecurity_TokenGeneratorService',
            'sulu_security.user_controller' => 'getSuluSecurity_UserControllerService',
            'sulu_security.user_manager' => 'getSuluSecurity_UserManagerService',
            'sulu_security.user_repository' => 'getSuluSecurity_UserRepositoryService',
            'sulu_security.user_setting_repository' => 'getSuluSecurity_UserSettingRepositoryService',
            'sulu_snippet.content.single_snippet_selection' => 'getSuluSnippet_Content_SingleSnippetSelectionService',
            'sulu_snippet.content.snippet' => 'getSuluSnippet_Content_SnippetService',
            'sulu_snippet.controller.snippet' => 'getSuluSnippet_Controller_SnippetService',
            'sulu_snippet.default_snippet.manager' => 'getSuluSnippet_DefaultSnippet_ManagerService',
            'sulu_snippet.document.snippet_initializer' => 'getSuluSnippet_Document_SnippetInitializerService',
            'sulu_snippet.export.snippet' => 'getSuluSnippet_Export_SnippetService',
            'sulu_snippet.import.snippet' => 'getSuluSnippet_Import_SnippetService',
            'sulu_snippet.language_controller' => 'getSuluSnippet_LanguageControllerService',
            'sulu_snippet.reference_store.snippet' => 'getSuluSnippet_ReferenceStore_SnippetService',
            'sulu_snippet.reference_store.snippet_area' => 'getSuluSnippet_ReferenceStore_SnippetAreaService',
            'sulu_snippet.repository' => 'getSuluSnippet_RepositoryService',
            'sulu_snippet.resolver' => 'getSuluSnippet_ResolverService',
            'sulu_snippet.snippet_area_controller' => 'getSuluSnippet_SnippetAreaControllerService',
            'sulu_tag.content.type.tag_selection' => 'getSuluTag_Content_Type_TagSelectionService',
            'sulu_tag.tag_controller' => 'getSuluTag_TagControllerService',
            'sulu_trash.trash_item_controller' => 'getSuluTrash_TrashItemControllerService',
            'sulu_website.analytics.manager' => 'getSuluWebsite_Analytics_ManagerService',
            'sulu_website.analytics_controller' => 'getSuluWebsite_AnalyticsControllerService',
            'sulu_website.cache_controller' => 'getSuluWebsite_CacheControllerService',
            'sulu_website.http_cache.clearer' => 'getSuluWebsite_HttpCache_ClearerService',
            'sulu_website.redirect_controller' => 'getSuluWebsite_RedirectControllerService',
            'sulu_website.resolver.parameter' => 'getSuluWebsite_Resolver_ParameterService',
            'sulu_website.resolver.structure' => 'getSuluWebsite_Resolver_StructureService',
            'sulu_website.resolver.template_attribute' => 'getSuluWebsite_Resolver_TemplateAttributeService',
            'sulu_website.url_select_helper' => 'getSuluWebsite_UrlSelectHelperService',
            'test.private_services_locator' => 'getTest_PrivateServicesLocatorService',
            'test.service_container' => 'getTest_ServiceContainerService',
            'test_user_provider' => 'getTestUserProviderService',
        ];
        $this->aliases = [
            'Doctrine\\Bundle\\PHPCRBundle\\ManagerRegistryInterface' => 'doctrine_phpcr',
            'FOS\\HttpCacheBundle\\EventListener\\CacheControlListener' => 'fos_http_cache.event_listener.cache_control',
            'PHPCR\\SessionInterface' => 'doctrine_phpcr.session',
            'Sulu\\Bundle\\MediaBundle\\Media\\Storage\\StorageInterface' => 'sulu_media.storage',
            'database_connection' => 'doctrine.dbal.default_connection',
            'doctrine.orm.entity_manager' => 'doctrine.orm.default_entity_manager',
            'doctrine_phpcr.admin.jackalope_doctrine_dbal.default_connection' => 'doctrine.dbal.default_connection',
            'doctrine_phpcr.admin.jackalope_doctrine_dbal.live_connection' => 'doctrine.dbal.default_connection',
            'doctrine_phpcr.default_session' => 'doctrine_phpcr.session',
            'doctrine_phpcr.jackalope_doctrine_dbal.default_connection' => 'doctrine.dbal.default_connection',
            'doctrine_phpcr.jackalope_doctrine_dbal.live_connection' => 'doctrine.dbal.default_connection',
            'doctrine_phpcr.live_session' => 'sulu_document_manager.live_session',
            'jms_serializer.instances.default' => 'jms_serializer',
            'sulu_document_manager.default_session' => 'doctrine_phpcr.session',
        ];
    }

    public function compile(): void
    {
        throw new LogicException('You cannot compile a dumped container that was already compiled.');
    }

    public function isCompiled(): bool
    {
        return true;
    }

    public function getRemovedIds(): array
    {
        return require $this->containerDir.\DIRECTORY_SEPARATOR.'removed-ids.php';
    }

    protected function load($file, $lazyLoad = true): mixed
    {
        if (class_exists($class = __NAMESPACE__.'\\'.$file, false)) {
            return $class::do($this, $lazyLoad);
        }

        if ('.' === $file[-4]) {
            $class = substr($class, 0, -4);
        } else {
            $file .= '.php';
        }

        $service = require $this->containerDir.\DIRECTORY_SEPARATOR.$file;

        return class_exists($class, false) ? $class::do($this, $lazyLoad) : $service;
    }

    protected function createProxy($class, \Closure $factory)
    {
        class_exists($class, false) || require __DIR__.'/'.$class.'.php';

        return $factory();
    }

    /**
     * Gets the public 'cache.security_is_csrf_token_valid_attribute_expression_language' shared service.
     *
     * @return \Symfony\Component\Cache\Adapter\AdapterInterface
     */
    protected static function getCache_SecurityIsCsrfTokenValidAttributeExpressionLanguageService($container)
    {
        return $container->services['cache.security_is_csrf_token_valid_attribute_expression_language'] = \Symfony\Component\Cache\Adapter\AbstractAdapter::createSystemCache('E1480v5RhP', 0, $container->getParameter('container.build_id'), ($container->targetDir.''.'/pools/system'), ($container->privates['logger'] ?? self::getLoggerService($container)));
    }

    /**
     * Gets the public 'cache.security_is_granted_attribute_expression_language' shared service.
     *
     * @return \Symfony\Component\Cache\Adapter\AdapterInterface
     */
    protected static function getCache_SecurityIsGrantedAttributeExpressionLanguageService($container)
    {
        return $container->services['cache.security_is_granted_attribute_expression_language'] = \Symfony\Component\Cache\Adapter\AbstractAdapter::createSystemCache('GruOLbm2dX', 0, $container->getParameter('container.build_id'), ($container->targetDir.''.'/pools/system'), ($container->privates['logger'] ?? self::getLoggerService($container)));
    }

    /**
     * Gets the public 'doctrine' shared service.
     *
     * @return \Doctrine\Bundle\DoctrineBundle\Registry
     */
    protected static function getDoctrineService($container)
    {
        return $container->services['doctrine'] = new \Doctrine\Bundle\DoctrineBundle\Registry($container, $container->parameters['doctrine.connections'], $container->parameters['doctrine.entity_managers'], 'default', 'default');
    }

    /**
     * Gets the public 'doctrine.dbal.default_connection' shared service.
     *
     * @return \Doctrine\DBAL\Connection
     */
    protected static function getDoctrine_Dbal_DefaultConnectionService($container)
    {
        $a = ($container->privates['doctrine.dbal.default_connection.event_manager'] ?? self::getDoctrine_Dbal_DefaultConnection_EventManagerService($container));

        if (isset($container->services['doctrine.dbal.default_connection'])) {
            return $container->services['doctrine.dbal.default_connection'];
        }

        return $container->services['doctrine.dbal.default_connection'] = ($container->privates['doctrine.dbal.connection_factory'] ?? self::getDoctrine_Dbal_ConnectionFactoryService($container))->createConnection(['url' => $container->getEnv('DATABASE_URL'), 'charset' => $container->getEnv('DATABASE_CHARSET'), 'driver' => 'pdo_mysql', 'idle_connection_ttl' => 600, 'host' => 'localhost', 'port' => NULL, 'user' => 'root', 'password' => NULL, 'driverOptions' => [], 'defaultTableOptions' => ['charset' => $container->getEnv('DATABASE_CHARSET'), 'collate' => $container->getEnv('DATABASE_COLLATE')]], ($container->privates['doctrine.dbal.default_connection.configuration'] ?? self::getDoctrine_Dbal_DefaultConnection_ConfigurationService($container)), $a, []);
    }

    /**
     * Gets the public 'doctrine.orm.default_entity_manager' shared service.
     *
     * @return \Doctrine\ORM\EntityManager
     */
    protected static function getDoctrine_Orm_DefaultEntityManagerService($container, $lazyLoad = true)
    {
        if (true === $lazyLoad) {
            return $container->services['doctrine.orm.default_entity_manager'] = $container->createProxy('EntityManagerGhostA57e6d7', static fn () => \EntityManagerGhostA57e6d7::createLazyGhost(static fn ($proxy) => self::getDoctrine_Orm_DefaultEntityManagerService($container, $proxy)));
        }

        $instance = ($lazyLoad->__construct(($container->services['doctrine.dbal.default_connection'] ?? self::getDoctrine_Dbal_DefaultConnectionService($container)), ($container->privates['doctrine.orm.default_configuration'] ?? self::getDoctrine_Orm_DefaultConfigurationService($container)), ($container->privates['doctrine.dbal.default_connection.event_manager'] ?? self::getDoctrine_Dbal_DefaultConnection_EventManagerService($container))) && false ?: $lazyLoad);

        ($container->privates['doctrine.orm.default_manager_configurator'] ??= new \Doctrine\Bundle\DoctrineBundle\ManagerConfigurator([], []))->configure($instance);

        return $instance;
    }

    /**
     * Gets the public 'doctrine_phpcr.session' shared service.
     *
     * @return \Sulu\Bundle\DocumentManagerBundle\Session\Session
     */
    protected static function getDoctrinePhpcr_SessionService($container, $lazyLoad = true)
    {
        if (true === $lazyLoad) {
            return $container->services['doctrine_phpcr.session'] = $container->createProxy('SessionGhost3c70013', static fn () => \SessionGhost3c70013::createLazyGhost(static fn ($proxy) => self::getDoctrinePhpcr_SessionService($container, $proxy)));
        }

        return ($lazyLoad->__construct(($container->privates['sulu_document_manager.decorated_default_session.inner'] ?? self::getSuluDocumentManager_DecoratedDefaultSession_InnerService($container))) && false ?: $lazyLoad);
    }

    /**
     * Gets the public 'event_dispatcher' shared service.
     *
     * @return \Symfony\Component\EventDispatcher\EventDispatcher
     */
    protected static function getEventDispatcherService($container)
    {
        $container->services['event_dispatcher'] = $instance = new \Symfony\Component\EventDispatcher\EventDispatcher();

        $instance->addListener('kernel.request', [#[\Closure(name: 'fos_rest.body_listener', class: 'FOS\\RestBundle\\EventListener\\BodyListener')] fn () => ($container->privates['fos_rest.body_listener'] ?? self::getFosRest_BodyListenerService($container)), 'onKernelRequest'], 10);
        $instance->addListener('massive_search.index', [#[\Closure(name: 'massive_search.events.index_listener', class: 'Massive\\Bundle\\SearchBundle\\Search\\EventListener\\IndexListener')] fn () => ($container->privates['massive_search.events.index_listener'] ?? $container->load('getMassiveSearch_Events_IndexListenerService')), 'onIndex'], 0);
        $instance->addListener('massive_search.deindex', [#[\Closure(name: 'massive_search.events.deindex_listener', class: 'Massive\\Bundle\\SearchBundle\\Search\\EventListener\\DeindexListener')] fn () => ($container->privates['massive_search.events.deindex_listener'] ?? $container->load('getMassiveSearch_Events_DeindexListenerService')), 'onDeindex'], 0);
        $instance->addListener('massive_search.index_rebuild', [#[\Closure(name: 'massive_search.events.zend_rebuild', class: 'Massive\\Bundle\\SearchBundle\\Search\\EventListener\\ZendRebuildSubscriber')] fn () => ($container->privates['massive_search.events.zend_rebuild'] ?? $container->load('getMassiveSearch_Events_ZendRebuildService')), 'onIndexRebuild'], -999);
        $instance->addListener('Symfony\\Component\\Security\\Http\\Event\\CheckPassportEvent', [#[\Closure(name: 'security.listener.user_provider', class: 'Symfony\\Component\\Security\\Http\\EventListener\\UserProviderListener')] fn () => ($container->privates['security.listener.user_provider'] ?? $container->load('getSecurity_Listener_UserProviderService')), 'checkPassport'], 1024);
        $instance->addListener('kernel.response', [#[\Closure(name: 'security.context_listener.0', class: 'Symfony\\Component\\Security\\Http\\Firewall\\ContextListener')] fn () => ($container->privates['security.context_listener.0'] ?? self::getSecurity_ContextListener_0Service($container)), 'onKernelResponse'], 0);
        $instance->addListener('kernel.controller_arguments', [#[\Closure(name: 'argument_resolver.request_payload', class: 'Symfony\\Component\\HttpKernel\\Controller\\ArgumentResolver\\RequestPayloadValueResolver')] fn () => ($container->privates['argument_resolver.request_payload'] ?? self::getArgumentResolver_RequestPayloadService($container)), 'onKernelControllerArguments'], 0);
        $instance->addListener('kernel.response', [#[\Closure(name: 'response_listener', class: 'Symfony\\Component\\HttpKernel\\EventListener\\ResponseListener')] fn () => ($container->privates['response_listener'] ??= new \Symfony\Component\HttpKernel\EventListener\ResponseListener('UTF-8', false)), 'onKernelResponse'], 0);
        $instance->addListener('kernel.request', [#[\Closure(name: 'locale_listener', class: 'Symfony\\Component\\HttpKernel\\EventListener\\LocaleListener')] fn () => ($container->privates['locale_listener'] ?? self::getLocaleListenerService($container)), 'setDefaultLocale'], 100);
        $instance->addListener('kernel.request', [#[\Closure(name: 'locale_listener', class: 'Symfony\\Component\\HttpKernel\\EventListener\\LocaleListener')] fn () => ($container->privates['locale_listener'] ?? self::getLocaleListenerService($container)), 'onKernelRequest'], 16);
        $instance->addListener('kernel.finish_request', [#[\Closure(name: 'locale_listener', class: 'Symfony\\Component\\HttpKernel\\EventListener\\LocaleListener')] fn () => ($container->privates['locale_listener'] ?? self::getLocaleListenerService($container)), 'onKernelFinishRequest'], 0);
        $instance->addListener('kernel.request', [#[\Closure(name: 'validate_request_listener', class: 'Symfony\\Component\\HttpKernel\\EventListener\\ValidateRequestListener')] fn () => ($container->privates['validate_request_listener'] ??= new \Symfony\Component\HttpKernel\EventListener\ValidateRequestListener()), 'onKernelRequest'], 256);
        $instance->addListener('kernel.response', [#[\Closure(name: 'disallow_search_engine_index_response_listener', class: 'Symfony\\Component\\HttpKernel\\EventListener\\DisallowRobotsIndexingListener')] fn () => ($container->privates['disallow_search_engine_index_response_listener'] ??= new \Symfony\Component\HttpKernel\EventListener\DisallowRobotsIndexingListener()), 'onResponse'], -255);
        $instance->addListener('kernel.controller_arguments', [#[\Closure(name: 'exception_listener', class: 'Symfony\\Component\\HttpKernel\\EventListener\\ErrorListener')] fn () => ($container->privates['exception_listener'] ?? self::getExceptionListenerService($container)), 'onControllerArguments'], 0);
        $instance->addListener('kernel.exception', [#[\Closure(name: 'exception_listener', class: 'Symfony\\Component\\HttpKernel\\EventListener\\ErrorListener')] fn () => ($container->privates['exception_listener'] ?? self::getExceptionListenerService($container)), 'logKernelException'], 0);
        $instance->addListener('kernel.exception', [#[\Closure(name: 'exception_listener', class: 'Symfony\\Component\\HttpKernel\\EventListener\\ErrorListener')] fn () => ($container->privates['exception_listener'] ?? self::getExceptionListenerService($container)), 'onKernelException'], -128);
        $instance->addListener('kernel.response', [#[\Closure(name: 'exception_listener', class: 'Symfony\\Component\\HttpKernel\\EventListener\\ErrorListener')] fn () => ($container->privates['exception_listener'] ?? self::getExceptionListenerService($container)), 'removeCspHeader'], -128);
        $instance->addListener('kernel.controller_arguments', [#[\Closure(name: 'controller.cache_attribute_listener', class: 'Symfony\\Component\\HttpKernel\\EventListener\\CacheAttributeListener')] fn () => ($container->privates['controller.cache_attribute_listener'] ??= new \Symfony\Component\HttpKernel\EventListener\CacheAttributeListener()), 'onKernelControllerArguments'], 10);
        $instance->addListener('kernel.response', [#[\Closure(name: 'controller.cache_attribute_listener', class: 'Symfony\\Component\\HttpKernel\\EventListener\\CacheAttributeListener')] fn () => ($container->privates['controller.cache_attribute_listener'] ??= new \Symfony\Component\HttpKernel\EventListener\CacheAttributeListener()), 'onKernelResponse'], -10);
        $instance->addListener('kernel.request', [#[\Closure(name: 'locale_aware_listener', class: 'Symfony\\Component\\HttpKernel\\EventListener\\LocaleAwareListener')] fn () => ($container->privates['locale_aware_listener'] ?? self::getLocaleAwareListenerService($container)), 'onKernelRequest'], 15);
        $instance->addListener('kernel.finish_request', [#[\Closure(name: 'locale_aware_listener', class: 'Symfony\\Component\\HttpKernel\\EventListener\\LocaleAwareListener')] fn () => ($container->privates['locale_aware_listener'] ?? self::getLocaleAwareListenerService($container)), 'onKernelFinishRequest'], -15);
        $instance->addListener('console.error', [#[\Closure(name: 'console.error_listener', class: 'Symfony\\Component\\Console\\EventListener\\ErrorListener')] fn () => ($container->privates['console.error_listener'] ?? $container->load('getConsole_ErrorListenerService')), 'onConsoleError'], -128);
        $instance->addListener('console.terminate', [#[\Closure(name: 'console.error_listener', class: 'Symfony\\Component\\Console\\EventListener\\ErrorListener')] fn () => ($container->privates['console.error_listener'] ?? $container->load('getConsole_ErrorListenerService')), 'onConsoleTerminate'], -128);
        $instance->addListener('console.error', [#[\Closure(name: 'console.suggest_missing_package_subscriber', class: 'Symfony\\Bundle\\FrameworkBundle\\EventListener\\SuggestMissingPackageSubscriber')] fn () => ($container->privates['console.suggest_missing_package_subscriber'] ??= new \Symfony\Bundle\FrameworkBundle\EventListener\SuggestMissingPackageSubscriber()), 'onConsoleError'], 0);
        $instance->addListener('kernel.request', [#[\Closure(name: 'test.session.listener', class: 'Symfony\\Component\\HttpKernel\\EventListener\\SessionListener')] fn () => ($container->privates['test.session.listener'] ?? self::getTest_Session_ListenerService($container)), 'onKernelRequest'], 128);
        $instance->addListener('kernel.response', [#[\Closure(name: 'test.session.listener', class: 'Symfony\\Component\\HttpKernel\\EventListener\\SessionListener')] fn () => ($container->privates['test.session.listener'] ?? self::getTest_Session_ListenerService($container)), 'onKernelResponse'], -1000);
        $instance->addListener('Symfony\\Component\\Mailer\\Event\\MessageEvent', [#[\Closure(name: 'mailer.envelope_listener', class: 'Symfony\\Component\\Mailer\\EventListener\\EnvelopeListener')] fn () => ($container->privates['mailer.envelope_listener'] ??= new \Symfony\Component\Mailer\EventListener\EnvelopeListener(NULL, NULL, [])), 'onMessage'], -255);
        $instance->addListener('Symfony\\Component\\Mailer\\Event\\MessageEvent', [#[\Closure(name: 'mailer.message_logger_listener', class: 'Symfony\\Component\\Mailer\\EventListener\\MessageLoggerListener')] fn () => ($container->privates['mailer.message_logger_listener'] ??= new \Symfony\Component\Mailer\EventListener\MessageLoggerListener()), 'onMessage'], -255);
        $instance->addListener('Symfony\\Component\\Mailer\\Event\\MessageEvent', [#[\Closure(name: 'mailer.messenger_transport_listener', class: 'Symfony\\Component\\Mailer\\EventListener\\MessengerTransportListener')] fn () => ($container->privates['mailer.messenger_transport_listener'] ??= new \Symfony\Component\Mailer\EventListener\MessengerTransportListener()), 'onMessage'], 0);
        $instance->addListener('kernel.request', [#[\Closure(name: 'fragment.listener', class: 'Symfony\\Component\\HttpKernel\\EventListener\\FragmentListener')] fn () => ($container->privates['fragment.listener'] ?? self::getFragment_ListenerService($container)), 'onKernelRequest'], 48);
        $instance->addListener('kernel.request', [#[\Closure(name: 'debug.debug_handlers_listener', class: 'Symfony\\Component\\HttpKernel\\EventListener\\DebugHandlersListener')] fn () => ($container->privates['debug.debug_handlers_listener'] ??= new \Symfony\Component\HttpKernel\EventListener\DebugHandlersListener(NULL, $container->getEnv('bool:default::key:web:default:kernel.runtime_mode:'))), 'configure'], 2048);
        $instance->addListener('console.command', [#[\Closure(name: 'debug.debug_handlers_listener', class: 'Symfony\\Component\\HttpKernel\\EventListener\\DebugHandlersListener')] fn () => ($container->privates['debug.debug_handlers_listener'] ??= new \Symfony\Component\HttpKernel\EventListener\DebugHandlersListener(NULL, $container->getEnv('bool:default::key:web:default:kernel.runtime_mode:'))), 'configure'], 2048);
        $instance->addListener('kernel.view', [#[\Closure(name: 'controller.template_attribute_listener', class: 'Symfony\\Bridge\\Twig\\EventListener\\TemplateAttributeListener')] fn () => ($container->privates['controller.template_attribute_listener'] ?? $container->load('getController_TemplateAttributeListenerService')), 'onKernelView'], -128);
        $instance->addListener('Symfony\\Component\\Mailer\\Event\\MessageEvent', [#[\Closure(name: 'twig.mailer.message_listener', class: 'Symfony\\Component\\Mailer\\EventListener\\MessageListener')] fn () => ($container->privates['twig.mailer.message_listener'] ?? $container->load('getTwig_Mailer_MessageListenerService')), 'onMessage'], 0);
        $instance->addListener('kernel.request', [#[\Closure(name: 'doctrine.dbal.idle_connection_listener', class: 'Symfony\\Bridge\\Doctrine\\Middleware\\IdleConnection\\Listener')] fn () => ($container->privates['doctrine.dbal.idle_connection_listener'] ?? self::getDoctrine_Dbal_IdleConnectionListenerService($container)), 'onKernelRequest'], 192);
        $instance->addListener('kernel.exception', [#[\Closure(name: 'fos_rest.exception.response_status_code_listener', class: 'FOS\\RestBundle\\EventListener\\ResponseStatusCodeListener')] fn () => ($container->privates['fos_rest.exception.response_status_code_listener'] ?? self::getFosRest_Exception_ResponseStatusCodeListenerService($container)), 'getResponseStatusCodeFromThrowable'], 0);
        $instance->addListener('kernel.response', [#[\Closure(name: 'fos_rest.exception.response_status_code_listener', class: 'FOS\\RestBundle\\EventListener\\ResponseStatusCodeListener')] fn () => ($container->privates['fos_rest.exception.response_status_code_listener'] ?? self::getFosRest_Exception_ResponseStatusCodeListenerService($container)), 'setResponseStatusCode'], 0);
        $instance->addListener('massive_search.index_rebuild', [#[\Closure(name: 'massive_search.search.event_subscriber.purge_subscriber', class: 'Massive\\Bundle\\SearchBundle\\Search\\EventSubscriber\\PurgeSubscriber')] fn () => ($container->privates['massive_search.search.event_subscriber.purge_subscriber'] ?? $container->load('getMassiveSearch_Search_EventSubscriber_PurgeSubscriberService')), 'purgeIndexes'], 500);
        $instance->addListener('massive_search.pre_index', [#[\Closure(name: 'sulu_page.search.event_subscriber.blame_timestamp', class: 'Sulu\\Bundle\\PageBundle\\Search\\EventSubscriber\\BlameTimestampSubscriber')] fn () => ($container->privates['sulu_page.search.event_subscriber.blame_timestamp'] ?? $container->load('getSuluPage_Search_EventSubscriber_BlameTimestampService')), 'handleBlameTimestamp'], 0);
        $instance->addListener('massive_search.hit', [#[\Closure(name: 'sulu_page.search.event_subscriber.blame_timestamp', class: 'Sulu\\Bundle\\PageBundle\\Search\\EventSubscriber\\BlameTimestampSubscriber')] fn () => ($container->privates['sulu_page.search.event_subscriber.blame_timestamp'] ?? $container->load('getSuluPage_Search_EventSubscriber_BlameTimestampService')), 'handleBlameTimestampHitMapping'], 0);
        $instance->addListener('sulu_security.permission_update', [#[\Closure(name: 'sulu_page.permission_listener', class: 'Sulu\\Bundle\\PageBundle\\Search\\EventListener\\PermissionListener')] fn () => ($container->privates['sulu_page.permission_listener'] ?? $container->load('getSuluPage_PermissionListenerService')), 'onPermissionUpdate'], 0);
        $instance->addListener('kernel.request', [#[\Closure(name: 'sulu_security.user_locale_listener', class: 'Sulu\\Bundle\\SecurityBundle\\EventListener\\UserLocaleListener')] fn () => ($container->privates['sulu_security.user_locale_listener'] ?? self::getSuluSecurity_UserLocaleListenerService($container)), 'copyUserLocaleToRequest'], 0);
        $instance->addListener('kernel.request', [#[\Closure(name: 'sulu_security.system_listener', class: 'Sulu\\Bundle\\SecurityBundle\\EventListener\\SystemListener')] fn () => ($container->privates['sulu_security.system_listener'] ?? self::getSuluSecurity_SystemListenerService($container)), 'onKernelRequest'], 24);
        $instance->addListener('Symfony\\Component\\Security\\Core\\Event\\AuthenticationFailureEvent', [#[\Closure(name: 'sulu_security.login_failure_listener', class: 'Sulu\\Bundle\\SecurityBundle\\EventListener\\AuhenticationFailureListener')] fn () => ($container->privates['sulu_security.login_failure_listener'] ?? $container->load('getSuluSecurity_LoginFailureListenerService')), 'onLoginFailure'], 0);
        $instance->addListener('Symfony\\Component\\Security\\Http\\Event\\LogoutEvent', [#[\Closure(name: 'sulu_security.logout_event_subscriber', class: 'Sulu\\Bundle\\SecurityBundle\\EventListener\\LogoutEventSubscriber')] fn () => ($container->privates['sulu_security.logout_event_subscriber'] ?? $container->load('getSuluSecurity_LogoutEventSubscriberService')), 'onLogout'], 64);
        $instance->addListener('sulu_security.permission_update', [#[\Closure(name: 'sulu_security.phpcr_security_subscriber', class: 'Sulu\\Bundle\\SecurityBundle\\EventListener\\PhpcrSecuritySubscriber')] fn () => ($container->privates['sulu_security.phpcr_security_subscriber'] ?? $container->load('getSuluSecurity_PhpcrSecuritySubscriberService')), 'handlePermissionUpdate'], 0);
        $instance->addListener('kernel.controller', [#[\Closure(name: 'sulu_security.event_listener.security', class: 'Sulu\\Bundle\\SecurityBundle\\EventListener\\SuluSecurityListener')] fn () => ($container->privates['sulu_security.event_listener.security'] ?? self::getSuluSecurity_EventListener_SecurityService($container)), 'onKernelController'], 0);
        $instance->addListener('security.interactive_login', [#[\Closure(name: 'sulu_security.last_login_listener', class: 'Sulu\\Bundle\\SecurityBundle\\EventListener\\LastLoginListener')] fn () => ($container->privates['sulu_security.last_login_listener'] ?? $container->load('getSuluSecurity_LastLoginListenerService')), 'onSecurityInteractiveLogin'], 0);
        $instance->addListener('kernel.request', [#[\Closure(name: 'sulu_website.routing.request_listener', class: 'Sulu\\Bundle\\WebsiteBundle\\Routing\\RequestListener')] fn () => ($container->privates['sulu_website.routing.request_listener'] ?? self::getSuluWebsite_Routing_RequestListenerService($container)), 'onRequest'], 31);
        $instance->addListener('kernel.request', [#[\Closure(name: 'sulu_website.router_listener', class: 'Sulu\\Bundle\\WebsiteBundle\\EventListener\\RouterListener')] fn () => ($container->privates['sulu_website.router_listener'] ?? self::getSuluWebsite_RouterListenerService($container)), 'onKernelRequest'], 32);
        $instance->addListener('kernel.finish_request', [#[\Closure(name: 'sulu_website.router_listener', class: 'Sulu\\Bundle\\WebsiteBundle\\EventListener\\RouterListener')] fn () => ($container->privates['sulu_website.router_listener'] ?? self::getSuluWebsite_RouterListenerService($container)), 'onKernelFinishRequest'], 0);
        $instance->addListener('sulu_website.cache_clear', [#[\Closure(name: 'sulu_website.event_subscriber.cache_clear', class: 'Sulu\\Bundle\\WebsiteBundle\\EventSubscriber\\DomainEventEventSubscriber')] fn () => ($container->privates['sulu_website.event_subscriber.cache_clear'] ?? $container->load('getSuluWebsite_EventSubscriber_CacheClearService')), 'onCacheClear'], 0);
        $instance->addListener('kernel.request', [#[\Closure(name: 'sulu_website.event_listener.translator', class: 'Sulu\\Bundle\\WebsiteBundle\\EventListener\\TranslatorListener')] fn () => ($container->privates['sulu_website.event_listener.translator'] ?? self::getSuluWebsite_EventListener_TranslatorService($container)), 'onKernelRequest'], 14);
        $instance->addListener('kernel.request', [#[\Closure(name: 'sulu_website.event_listener.security_listener', class: 'Sulu\\Bundle\\WebsiteBundle\\EventListener\\SecurityListener')] fn () => ($container->privates['sulu_website.event_listener.security_listener'] ?? self::getSuluWebsite_EventListener_SecurityListenerService($container)), 'onKernelRequest'], 7);
        $instance->addListener('sulu_security.permission_update', [#[\Closure(name: 'sulu_media.permission_listener', class: 'Sulu\\Bundle\\MediaBundle\\Search\\EventListener\\PermissionListener')] fn () => ($container->privates['sulu_media.permission_listener'] ?? $container->load('getSuluMedia_PermissionListenerService')), 'onPermissionUpdate'], 0);
        $instance->addListener('kernel.request', [#[\Closure(name: 'sulu_media.file_inspector.subscriber', class: 'Sulu\\Bundle\\MediaBundle\\FileInspector\\UploadFileSubscriber')] fn () => ($container->privates['sulu_media.file_inspector.subscriber'] ?? self::getSuluMedia_FileInspector_SubscriberService($container)), 'onKernelRequest'], 0);
        $instance->addListener('massive_search.pre_index', [#[\Closure(name: 'sulu_media.search.subscriber.structure_media', class: 'Sulu\\Bundle\\MediaBundle\\Search\\Subscriber\\StructureMediaSearchSubscriber')] fn () => ($container->privates['sulu_media.search.subscriber.structure_media'] ?? $container->load('getSuluMedia_Search_Subscriber_StructureMediaService')), 'handlePreIndex'], 0);
        $instance->addListener('massive_search.pre_index', [#[\Closure(name: 'sulu_media.search.subscriber.media', class: 'Sulu\\Bundle\\MediaBundle\\Search\\Subscriber\\MediaSearchSubscriber')] fn () => ($container->privates['sulu_media.search.subscriber.media'] ?? $container->load('getSuluMedia_Search_Subscriber_MediaService')), 'handlePreIndex'], 0);
        $instance->addListener('Sulu\\Bundle\\SnippetBundle\\Domain\\Event\\WebspaceDefaultSnippetModifiedEvent', [#[\Closure(name: 'sulu_snippet.cache_invalidation_subscriber', class: 'Sulu\\Bundle\\SnippetBundle\\EventListener\\CacheInvalidationSubscriber')] fn () => ($container->privates['sulu_snippet.cache_invalidation_subscriber'] ?? $container->load('getSuluSnippet_CacheInvalidationSubscriberService')), 'invalidateSnippetAreaOnAreaModified'], 0);
        $instance->addListener('Sulu\\Bundle\\SnippetBundle\\Domain\\Event\\WebspaceDefaultSnippetRemovedEvent', [#[\Closure(name: 'sulu_snippet.cache_invalidation_subscriber', class: 'Sulu\\Bundle\\SnippetBundle\\EventListener\\CacheInvalidationSubscriber')] fn () => ($container->privates['sulu_snippet.cache_invalidation_subscriber'] ?? $container->load('getSuluSnippet_CacheInvalidationSubscriberService')), 'invalidateSnippetAreaOnAreaRemoved'], 0);
        $instance->addListener('Sulu\\Bundle\\SnippetBundle\\Domain\\Event\\SnippetModifiedEvent', [#[\Closure(name: 'sulu_snippet.cache_invalidation_subscriber', class: 'Sulu\\Bundle\\SnippetBundle\\EventListener\\CacheInvalidationSubscriber')] fn () => ($container->privates['sulu_snippet.cache_invalidation_subscriber'] ?? $container->load('getSuluSnippet_CacheInvalidationSubscriberService')), 'invalidateSnippetAreaOnModified'], 0);
        $instance->addListener('Sulu\\Bundle\\SnippetBundle\\Domain\\Event\\SnippetRemovedEvent', [#[\Closure(name: 'sulu_snippet.cache_invalidation_subscriber', class: 'Sulu\\Bundle\\SnippetBundle\\EventListener\\CacheInvalidationSubscriber')] fn () => ($container->privates['sulu_snippet.cache_invalidation_subscriber'] ?? $container->load('getSuluSnippet_CacheInvalidationSubscriberService')), 'invalidateSnippetAreaOnRemoved'], 0);
        $instance->addListener('Sulu\\Bundle\\ActivityBundle\\Domain\\Event\\DomainEvent', [#[\Closure(name: 'sulu_activity.store_activity_subscriber', class: 'Sulu\\Bundle\\ActivityBundle\\Application\\Subscriber\\StoreActivitySubscriber')] fn () => ($container->privates['sulu_activity.store_activity_subscriber'] ?? $container->load('getSuluActivity_StoreActivitySubscriberService')), 'storeActivity'], -256);
        $instance->addListener('Sulu\\Bundle\\ActivityBundle\\Domain\\Event\\DomainEvent', [#[\Closure(name: 'sulu_activity.set_domain_event_user_subscriber', class: 'Sulu\\Bundle\\ActivityBundle\\Application\\Subscriber\\SetDomainEventUserSubscriber')] fn () => ($container->privates['sulu_activity.set_domain_event_user_subscriber'] ?? $container->load('getSuluActivity_SetDomainEventUserSubscriberService')), 'setDomainEventUser'], 256);
        $instance->addListener('Sulu\\Bundle\\ActivityBundle\\Domain\\Event\\DomainEvent', [#[\Closure(name: 'sulu_activity.dispatch_specific_domain_event_subscriber', class: 'Sulu\\Bundle\\ActivityBundle\\Application\\Subscriber\\DispatchSpecificDomainEventSubscriber')] fn () => ($container->privates['sulu_activity.dispatch_specific_domain_event_subscriber'] ?? $container->load('getSuluActivity_DispatchSpecificDomainEventSubscriberService')), 'dispatchDomainEventWithSpecificEventName'], 0);
        $instance->addListener('kernel.response', [#[\Closure(name: 'sulu_markup.response_listener', class: 'Sulu\\Bundle\\MarkupBundle\\Listener\\MarkupListener')] fn () => ($container->privates['sulu_markup.response_listener'] ?? self::getSuluMarkup_ResponseListenerService($container)), 'replaceMarkup'], -10);
        $instance->addListener('Symfony\\Component\\Mailer\\Event\\MessageEvent', [#[\Closure(name: 'sulu_markup.mailer_listener', class: 'Sulu\\Bundle\\MarkupBundle\\Listener\\MailerListener')] fn () => ($container->privates['sulu_markup.mailer_listener'] ?? $container->load('getSuluMarkup_MailerListenerService')), 'onMessage'], 0);
        $instance->addListener('console.command', [#[\Closure(name: 'sulu_preview.cache_command_subscriber', class: 'Sulu\\Bundle\\PreviewBundle\\Infrastructure\\Symfony\\EventSubscriber\\CacheCommandSubscriber')] fn () => ($container->privates['sulu_preview.cache_command_subscriber'] ?? $container->load('getSuluPreview_CacheCommandSubscriberService')), 'onCommand'], 0);
        $instance->addListener('kernel.response', [#[\Closure(name: 'fos_http_cache.event_listener.cache_control', class: 'FOS\\HttpCacheBundle\\EventListener\\CacheControlListener')] fn () => ($container->services['fos_http_cache.event_listener.cache_control'] ??= new \FOS\HttpCacheBundle\EventListener\CacheControlListener('X-Cache-Debug', 'X-Reverse-Proxy-TTL')), 'onKernelResponse'], 10);
        $instance->addListener('kernel.request', [#[\Closure(name: 'fos_http_cache.event_listener.attributes', class: 'FOS\\HttpCacheBundle\\EventListener\\AttributesListener')] fn () => ($container->privates['fos_http_cache.event_listener.attributes'] ?? self::getFosHttpCache_EventListener_AttributesService($container)), 'onKernelRequest'], 0);
        $instance->addListener('kernel.controller_arguments', [#[\Closure(name: 'controller.is_granted_attribute_listener', class: 'Symfony\\Component\\Security\\Http\\EventListener\\IsGrantedAttributeListener')] fn () => ($container->privates['controller.is_granted_attribute_listener'] ?? self::getController_IsGrantedAttributeListenerService($container)), 'onKernelControllerArguments'], 20);
        $instance->addListener('Symfony\\Component\\Security\\Http\\Event\\CheckPassportEvent', [#[\Closure(name: 'security.listener.check_authenticator_credentials', class: 'Symfony\\Component\\Security\\Http\\EventListener\\CheckCredentialsListener')] fn () => ($container->privates['security.listener.check_authenticator_credentials'] ?? $container->load('getSecurity_Listener_CheckAuthenticatorCredentialsService')), 'checkPassport'], 0);
        $instance->addListener('Symfony\\Component\\Security\\Http\\Event\\LoginSuccessEvent', [#[\Closure(name: 'security.listener.password_migrating', class: 'Symfony\\Component\\Security\\Http\\EventListener\\PasswordMigratingListener')] fn () => ($container->privates['security.listener.password_migrating'] ?? $container->load('getSecurity_Listener_PasswordMigratingService')), 'onLoginSuccess'], 0);
        $instance->addListener('debug.security.authorization.vote', [#[\Closure(name: 'debug.security.voter.vote_listener', class: 'Symfony\\Bundle\\SecurityBundle\\EventListener\\VoteListener')] fn () => ($container->privates['debug.security.voter.vote_listener'] ?? $container->load('getDebug_Security_Voter_VoteListenerService')), 'onVoterVote'], 0);
        $instance->addListener('kernel.request', [#[\Closure(name: 'debug.security.firewall', class: 'Symfony\\Bundle\\SecurityBundle\\Debug\\TraceableFirewallListener')] fn () => ($container->privates['debug.security.firewall'] ?? self::getDebug_Security_FirewallService($container)), 'configureLogoutUrlGenerator'], 8);
        $instance->addListener('kernel.request', [#[\Closure(name: 'debug.security.firewall', class: 'Symfony\\Bundle\\SecurityBundle\\Debug\\TraceableFirewallListener')] fn () => ($container->privates['debug.security.firewall'] ?? self::getDebug_Security_FirewallService($container)), 'onKernelRequest'], 8);
        $instance->addListener('kernel.finish_request', [#[\Closure(name: 'debug.security.firewall', class: 'Symfony\\Bundle\\SecurityBundle\\Debug\\TraceableFirewallListener')] fn () => ($container->privates['debug.security.firewall'] ?? self::getDebug_Security_FirewallService($container)), 'onKernelFinishRequest'], 0);
        $instance->addListener('Symfony\\Component\\Security\\Http\\Event\\CheckPassportEvent', [#[\Closure(name: 'security.listener.csrf_protection', class: 'Symfony\\Component\\Security\\Http\\EventListener\\CsrfProtectionListener')] fn () => ($container->privates['security.listener.csrf_protection'] ?? $container->load('getSecurity_Listener_CsrfProtectionService')), 'checkPassport'], 512);
        $instance->addListener('kernel.controller_arguments', [#[\Closure(name: 'controller.is_csrf_token_valid_attribute_listener', class: 'Symfony\\Component\\Security\\Http\\EventListener\\IsCsrfTokenValidAttributeListener')] fn () => ($container->privates['controller.is_csrf_token_valid_attribute_listener'] ?? self::getController_IsCsrfTokenValidAttributeListenerService($container)), 'onKernelControllerArguments'], 25);
        $instance->addListener('Symfony\\Component\\Security\\Http\\Event\\LogoutEvent', [#[\Closure(name: 'security.logout.listener.csrf_token_clearing', class: 'Symfony\\Component\\Security\\Http\\EventListener\\CsrfTokenClearingLogoutListener')] fn () => ($container->privates['security.logout.listener.csrf_token_clearing'] ?? $container->load('getSecurity_Logout_Listener_CsrfTokenClearingService')), 'onLogout'], 0);

        return $instance;
    }

    /**
     * Gets the public 'fos_http_cache.event_listener.cache_control' shared service.
     *
     * @return \FOS\HttpCacheBundle\EventListener\CacheControlListener
     */
    protected static function getFosHttpCache_EventListener_CacheControlService($container)
    {
        return $container->services['fos_http_cache.event_listener.cache_control'] = new \FOS\HttpCacheBundle\EventListener\CacheControlListener('X-Cache-Debug', 'X-Reverse-Proxy-TTL');
    }

    /**
     * Gets the public 'http_kernel' shared service.
     *
     * @return \Symfony\Component\HttpKernel\HttpKernel
     */
    protected static function getHttpKernelService($container)
    {
        $a = ($container->services['event_dispatcher'] ?? self::getEventDispatcherService($container));

        if (isset($container->services['http_kernel'])) {
            return $container->services['http_kernel'];
        }
        $b = ($container->privates['argument_resolver'] ?? self::getArgumentResolverService($container));

        if (isset($container->services['http_kernel'])) {
            return $container->services['http_kernel'];
        }

        return $container->services['http_kernel'] = new \Symfony\Component\HttpKernel\HttpKernel($a, ($container->privates['controller_resolver'] ?? self::getControllerResolverService($container)), ($container->services['request_stack'] ??= new \Symfony\Component\HttpFoundation\RequestStack()), $b, true);
    }

    /**
     * Gets the public 'jms_serializer.authorization_checker' shared service.
     *
     * @return \Symfony\Component\Security\Core\Authorization\AuthorizationChecker
     */
    protected static function getJmsSerializer_AuthorizationCheckerService($container)
    {
        $a = ($container->privates['debug.security.access.decision_manager'] ?? self::getDebug_Security_Access_DecisionManagerService($container));

        if (isset($container->services['jms_serializer.authorization_checker'])) {
            return $container->services['jms_serializer.authorization_checker'];
        }

        return $container->services['jms_serializer.authorization_checker'] = new \Symfony\Component\Security\Core\Authorization\AuthorizationChecker(($container->privates['security.token_storage'] ?? self::getSecurity_TokenStorageService($container)), $a);
    }

    /**
     * Gets the public 'request_stack' shared service.
     *
     * @return \Symfony\Component\HttpFoundation\RequestStack
     */
    protected static function getRequestStackService($container)
    {
        return $container->services['request_stack'] = new \Symfony\Component\HttpFoundation\RequestStack();
    }

    /**
     * Gets the public 'router' shared service.
     *
     * @return \Symfony\Bundle\FrameworkBundle\Routing\Router
     */
    protected static function getRouterService($container)
    {
        $container->services['router'] = $instance = new \Symfony\Bundle\FrameworkBundle\Routing\Router((new \Symfony\Component\DependencyInjection\Argument\ServiceLocator($container->getService ??= $container->getService(...), [
            'routing.loader' => ['services', 'routing.loader', 'getRouting_LoaderService', true],
        ], [
            'routing.loader' => 'Symfony\\Component\\Config\\Loader\\LoaderInterface',
        ]))->withContext('router.default', $container), (\dirname(__DIR__, 5).'/config/routing.yml'), ['cache_dir' => $container->targetDir.'', 'debug' => true, 'generator_class' => 'Symfony\\Component\\Routing\\Generator\\CompiledUrlGenerator', 'generator_dumper_class' => 'Symfony\\Component\\Routing\\Generator\\Dumper\\CompiledUrlGeneratorDumper', 'matcher_class' => 'Symfony\\Bundle\\FrameworkBundle\\Routing\\RedirectableCompiledUrlMatcher', 'matcher_dumper_class' => 'Symfony\\Component\\Routing\\Matcher\\Dumper\\CompiledUrlMatcherDumper', 'strict_requirements' => true], ($container->privates['router.request_context'] ?? self::getRouter_RequestContextService($container)), ($container->privates['parameter_bag'] ??= new \Symfony\Component\DependencyInjection\ParameterBag\ContainerBag($container)), ($container->privates['logger'] ?? self::getLoggerService($container)), 'en');

        $instance->setConfigCacheFactory(($container->privates['config_cache_factory'] ?? self::getConfigCacheFactoryService($container)));
        $instance->addExpressionLanguageProvider(($container->privates['router.expression_language_provider'] ?? self::getRouter_ExpressionLanguageProviderService($container)));

        return $instance;
    }

    /**
     * Gets the public 'sulu.content.localization_finder' shared service.
     *
     * @return \Sulu\Component\Content\Compat\LocalizationFinder
     */
    protected static function getSulu_Content_LocalizationFinderService($container)
    {
        return $container->services['sulu.content.localization_finder'] = new \Sulu\Component\Content\Compat\LocalizationFinder(($container->services['sulu_core.webspace.webspace_manager'] ?? self::getSuluCore_Webspace_WebspaceManagerService($container)));
    }

    /**
     * Gets the public 'sulu.content.path_cleaner' shared service.
     *
     * @return \Sulu\Component\PHPCR\PathCleanup
     */
    protected static function getSulu_Content_PathCleanerService($container)
    {
        return $container->services['sulu.content.path_cleaner'] = new \Sulu\Component\PHPCR\PathCleanup(['default' => [' ' => '-', '+' => '-', '.' => '-', '^' => '-', '~' => '-', '[' => '-', ']' => '-', '(' => '-', ')' => '-', '{' => '-', '}' => '-', 'Á' => 'A', 'á' => 'a', 'Ć' => 'C', 'ć' => 'c', 'É' => 'E', 'é' => 'e', 'Í' => 'I', 'í' => 'i', 'Ĺ' => 'L', 'ĺ' => 'l', 'Ń' => 'N', 'ń' => 'n', 'Ó' => 'O', 'ó' => 'o', 'Ő' => 'O', 'ő' => 'o', 'Ŕ' => 'R', 'ŕ' => 'r', 'Ś' => 'S', 'ś' => 's', 'Ú' => 'U', 'ú' => 'u', 'Ű' => 'U', 'ű' => 'u', 'Ý' => 'Y', 'ý' => 'y', 'Ź' => 'Z', 'ź' => 'z', 'Ă' => 'A', 'ă' => 'a', 'Ĕ' => 'E', 'ĕ' => 'e', 'Ğ' => 'G', 'ğ' => 'g', 'Ĭ' => 'I', 'ĭ' => 'i', 'Ŏ' => 'o', 'ŏ' => 'o', 'Ŭ' => 'U', 'ŭ' => 'u', 'Č' => 'C', 'č' => 'c', 'Ď' => 'D', 'Ě' => 'E', 'ě' => 'e', 'Ň' => 'N', 'ň' => 'n', 'Ř' => 'R', 'ř' => 'r', 'Š' => 'S', 'š' => 's', 'Ť' => 'T', 'Ž' => 'Z', 'ž' => 'z', 'Ç' => 'C', 'ç' => 'c', 'Ģ' => 'G', 'ģ' => 'g', 'Ķ' => 'K', 'ķ' => 'k', 'Ļ' => 'L', 'ļ' => 'l', 'Ņ' => 'N', 'ņ' => 'n', 'Ŗ' => 'R', 'ŗ' => 'r', 'Ş' => 'S', 'ş' => 's', 'Ţ' => 'T', 'ţ' => 't', 'Ä' => 'Ae', 'ä' => 'ae', 'Ë' => 'E', 'ë' => 'e', 'Ï' => 'I', 'ï' => 'i', 'Ö' => 'Oe', 'ö' => 'oe', 'Ü' => 'Ue', 'ü' => 'ue', 'Ÿ' => 'Y', 'ÿ' => 'y', 'À' => 'A', 'à' => 'a', 'È' => 'E', 'è' => 'e', 'Ì' => 'I', 'ì' => 'i', 'Ò' => 'O', 'ò' => 'o', 'Ù' => 'U', 'ù' => 'u', 'Ā' => 'A', 'ā' => 'a', 'Ē' => 'E', 'ē' => 'e', 'Ī' => 'I', 'ī' => 'i', 'Ō' => 'O', 'ō' => 'o', 'Ū' => 'U', 'ū' => 'u', 'Ą' => 'A', 'ą' => 'a', 'Ę' => 'E', 'ę' => 'e', 'Į' => 'I', 'į' => 'i', 'Ų' => 'U', 'ų' => 'u', 'Ḃ' => 'B', 'ḃ' => 'b', 'Ċ' => 'C', 'ċ' => 'c', 'Ḋ' => 'D', 'ḋ' => 'd', 'Ė' => 'E', 'ė' => 'e', 'Ḟ' => 'F', 'Ġ' => 'G', 'ġ' => 'g', 'Ḣ' => 'H', 'ḣ' => 'h', 'İ' => 'I', 'Ṁ' => 'M', 'ṁ' => 'm', 'Ṅ' => 'N', 'ṅ' => 'n', 'Ṗ' => 'P', 'ṗ' => 'p', 'Ṙ' => 'R', 'ṙ' => 'r', 'Ṡ' => 'S', 'ṡ' => 's', 'Ṫ' => 'T', 'ṫ' => 't', 'Ż' => 'Z', 'ż' => 'z', 'Ḍ' => 'D', 'ḍ' => 'd', 'Ḥ' => 'H', 'ḥ' => 'h', 'Ḳ' => 'K', 'ḳ' => 'k', 'Ḷ' => 'L', 'ḷ' => 'l', 'Ṃ' => 'M', 'ṃ' => 'm', 'Ṛ' => 'R', 'ṛ' => 'r', 'Ṣ' => 'S', 'ṣ' => 's', 'Ṭ' => 'T', 'ṭ' => 't', 'Ṿ' => 'V', 'ṿ' => 'v', 'Đ' => 'D', 'đ' => 'd', 'Ħ' => 'H', 'ħ' => 'h', 'Ŧ' => 'T', 'ŧ' => 't', 'Å' => 'A', 'å' => 'a', 'Ů' => 'U', 'ů' => 'u', 'Ł' => 'L', 'ł' => 'l', 'Ø' => 'O', 'ø' => 'o', 'Ã' => 'A', 'ã' => 'a', 'Ĩ' => 'I', 'ĩ' => 'i', 'Ñ' => 'N', 'ñ' => 'n', 'Õ' => 'O', 'õ' => 'o', 'Ũ' => 'U', 'ũ' => 'u', 'Â' => 'A', 'â' => 'a', 'Ĉ' => 'C', 'ĉ' => 'c', 'Ê' => 'E', 'ê' => 'e', 'Ĝ' => 'G', 'ĝ' => 'g', 'Ĥ' => 'H', 'ĥ' => 'h', 'Î' => 'I', 'î' => 'i', 'Ĵ' => 'J', 'ĵ' => 'j', 'Ô' => 'O', 'ô' => 'o', 'Ŝ' => 'S', 'ŝ' => 's', 'Û' => 'U', 'û' => 'u', 'Ŵ' => 'W', 'ŵ' => 'w', 'Ŷ' => 'Y', 'ŷ' => 'y', 'Æ' => 'AE', 'æ' => 'ae', 'ß' => 'ss', 'Œ' => 'OE', 'œ' => 'oe', 'Ĳ' => 'IJ', 'ª' => 'a', 'º' => 'o'], 'de' => ['&' => 'und'], 'en' => ['&' => 'and'], 'fr' => ['&' => 'et'], 'it' => ['&' => 'e'], 'nl' => ['&' => 'en'], 'es' => ['&' => 'y'], 'bg' => ['&' => 'и']], ($container->privates['sulu.content.slugger'] ??= new \Symfony\Component\String\Slugger\AsciiSlugger()));
    }

    /**
     * Gets the public 'sulu.content.structure_manager' shared service.
     *
     * @return \Sulu\Component\Content\Compat\StructureManager
     */
    protected static function getSulu_Content_StructureManagerService($container)
    {
        $a = ($container->services['sulu_document_manager.document_inspector'] ?? self::getSuluDocumentManager_DocumentInspectorService($container));

        if (isset($container->services['sulu.content.structure_manager'])) {
            return $container->services['sulu.content.structure_manager'];
        }

        return $container->services['sulu.content.structure_manager'] = new \Sulu\Component\Content\Compat\StructureManager(($container->services['sulu_page.structure.factory'] ?? self::getSuluPage_Structure_FactoryService($container)), $a, ($container->services['sulu_page.compat.structure.legacy_property_factory'] ?? self::getSuluPage_Compat_Structure_LegacyPropertyFactoryService($container)), $container->parameters['sulu.content.structure.type_map']);
    }

    /**
     * Gets the public 'sulu.content.type_manager' shared service.
     *
     * @return \Sulu\Component\Content\ContentTypeManager
     */
    protected static function getSulu_Content_TypeManagerService($container)
    {
        $container->services['sulu.content.type_manager'] = $instance = new \Sulu\Component\Content\ContentTypeManager($container);

        $instance->mapAliasToServiceId('number', 'sulu.content.type.number');
        $instance->mapAliasToServiceId('text_line', 'sulu.content.type.text_line');
        $instance->mapAliasToServiceId('text_area', 'sulu.content.type.text_area');
        $instance->mapAliasToServiceId('text_editor', 'sulu.content.type.text_editor');
        $instance->mapAliasToServiceId('resource_locator', 'sulu.content.type.resource_locator');
        $instance->mapAliasToServiceId('link', 'sulu.content.type.link');
        $instance->mapAliasToServiceId('single_icon_selection', 'sulu.content.type.single_icon_selection');
        $instance->mapAliasToServiceId('block', 'sulu.content.type.block');
        $instance->mapAliasToServiceId('smart_content', 'sulu_page.smart_content.content_type');
        $instance->mapAliasToServiceId('teaser_selection', 'sulu_page.teaser.content_type');
        $instance->mapAliasToServiceId('page_selection', 'sulu.content.type.page_selection');
        $instance->mapAliasToServiceId('single_page_selection', 'sulu.content.type.single_page_selection');
        $instance->mapAliasToServiceId('phone', 'sulu.content.type.phone');
        $instance->mapAliasToServiceId('segment_select', 'sulu.content.type.segment_select');
        $instance->mapAliasToServiceId('password', 'sulu.content.type.password');
        $instance->mapAliasToServiceId('url', 'sulu.content.type.url');
        $instance->mapAliasToServiceId('email', 'sulu.content.type.email');
        $instance->mapAliasToServiceId('date', 'sulu.content.type.date');
        $instance->mapAliasToServiceId('datetime', 'sulu.content.type.datetime');
        $instance->mapAliasToServiceId('time', 'sulu.content.type.time');
        $instance->mapAliasToServiceId('color', 'sulu.content.type.color');
        $instance->mapAliasToServiceId('checkbox', 'sulu.content.type.checkbox');
        $instance->mapAliasToServiceId('select', 'sulu.content.type.select');
        $instance->mapAliasToServiceId('single_select', 'sulu.content.type.single_select');
        $instance->mapAliasToServiceId('contact_account_selection', 'sulu_contact.content.contact_account_selection');
        $instance->mapAliasToServiceId('single_contact_selection', 'sulu_contact.content.single_contact_selection');
        $instance->mapAliasToServiceId('contact_selection', 'sulu_contact.content.contact_selection');
        $instance->mapAliasToServiceId('single_account_selection', 'sulu_contact.content.single_account_selection');
        $instance->mapAliasToServiceId('account_selection', 'sulu_contact.content.account_selection');
        $instance->mapAliasToServiceId('tag_selection', 'sulu_tag.content.type.tag_selection');
        $instance->mapAliasToServiceId('collection_selection', 'sulu_media.type.collection_selection');
        $instance->mapAliasToServiceId('single_collection_selection', 'sulu_media.type.single_collection_selection');
        $instance->mapAliasToServiceId('media_selection', 'sulu_media.type.media_selection');
        $instance->mapAliasToServiceId('single_media_selection', 'sulu_media.type.single_media_selection');
        $instance->mapAliasToServiceId('image_map', 'sulu_media.type.image_map');
        $instance->mapAliasToServiceId('category_selection', 'sulu_category.content.type.category_selection');
        $instance->mapAliasToServiceId('single_category_selection', 'sulu_category.content.type.single_category_selection');
        $instance->mapAliasToServiceId('single_snippet_selection', 'sulu_snippet.content.single_snippet_selection');
        $instance->mapAliasToServiceId('snippet_selection', 'sulu_snippet.content.snippet');
        $instance->mapAliasToServiceId('location', 'sulu_location.content.type.location');
        $instance->mapAliasToServiceId('route', 'sulu_route.content_type');
        $instance->mapAliasToServiceId('page_tree_route', 'sulu_route.content_type.page_tree_route');
        $instance->mapAliasToServiceId('target_group_selection', 'sulu_audience_targeting.content.type.target_group_selection');

        return $instance;
    }

    /**
     * Gets the public 'sulu.phpcr.session' shared service.
     *
     * @return \Sulu\Component\PHPCR\SessionManager\SessionManager
     */
    protected static function getSulu_Phpcr_SessionService($container)
    {
        $a = ($container->services['doctrine_phpcr.session'] ?? self::getDoctrinePhpcr_SessionService($container));

        if (isset($container->services['sulu.phpcr.session'])) {
            return $container->services['sulu.phpcr.session'];
        }

        return $container->services['sulu.phpcr.session'] = new \Sulu\Component\PHPCR\SessionManager\SessionManager($a, ['base' => 'cmf', 'content' => 'contents', 'route' => 'routes', 'snippet' => 'snippets']);
    }

    /**
     * Gets the public 'sulu.repository.access_control' shared service.
     *
     * @return \Sulu\Bundle\SecurityBundle\Entity\AccessControlRepository
     */
    protected static function getSulu_Repository_AccessControlService($container, $lazyLoad = true)
    {
        if (true === $lazyLoad) {
            return $container->services['sulu.repository.access_control'] = $container->createProxy('AccessControlRepositoryGhost9a9ed6d', static fn () => \AccessControlRepositoryGhost9a9ed6d::createLazyGhost(static fn ($proxy) => self::getSulu_Repository_AccessControlService($container, $proxy)));
        }

        $a = ($container->services['doctrine.orm.default_entity_manager'] ?? self::getDoctrine_Orm_DefaultEntityManagerService($container));

        return ($lazyLoad->__construct($a, $a->getClassMetadata('Sulu\\Bundle\\SecurityBundle\\Entity\\AccessControl')) && false ?: $lazyLoad);
    }

    /**
     * Gets the public 'sulu.repository.category' shared service.
     *
     * @return \Sulu\Bundle\CategoryBundle\Entity\CategoryRepository
     */
    protected static function getSulu_Repository_CategoryService($container, $lazyLoad = true)
    {
        if (true === $lazyLoad) {
            return $container->services['sulu.repository.category'] = $container->createProxy('CategoryRepositoryGhostC679b09', static fn () => \CategoryRepositoryGhostC679b09::createLazyGhost(static fn ($proxy) => self::getSulu_Repository_CategoryService($container, $proxy)));
        }

        $a = ($container->services['doctrine.orm.default_entity_manager'] ?? self::getDoctrine_Orm_DefaultEntityManagerService($container));

        return ($lazyLoad->__construct($a, $a->getClassMetadata('Sulu\\Bundle\\CategoryBundle\\Entity\\Category')) && false ?: $lazyLoad);
    }

    /**
     * Gets the public 'sulu.repository.media' shared service.
     *
     * @return \Sulu\Bundle\MediaBundle\Entity\MediaRepository
     */
    protected static function getSulu_Repository_MediaService($container, $lazyLoad = true)
    {
        if (true === $lazyLoad) {
            return $container->services['sulu.repository.media'] = $container->createProxy('MediaRepositoryGhostD715d67', static fn () => \MediaRepositoryGhostD715d67::createLazyGhost(static fn ($proxy) => self::getSulu_Repository_MediaService($container, $proxy)));
        }

        $a = ($container->services['doctrine.orm.default_entity_manager'] ?? self::getDoctrine_Orm_DefaultEntityManagerService($container));

        $instance = ($lazyLoad->__construct($a, $a->getClassMetadata('Sulu\\Bundle\\MediaBundle\\Entity\\Media')) && false ?: $lazyLoad);

        $instance->setAccessControlQueryEnhancer(($container->privates['sulu_security.access_control_query_enhancer'] ?? self::getSuluSecurity_AccessControlQueryEnhancerService($container)));

        return $instance;
    }

    /**
     * Gets the public 'sulu.repository.role' shared service.
     *
     * @return \Sulu\Bundle\SecurityBundle\Entity\RoleRepository
     */
    protected static function getSulu_Repository_RoleService($container, $lazyLoad = true)
    {
        if (true === $lazyLoad) {
            return $container->services['sulu.repository.role'] = $container->createProxy('RoleRepositoryGhostF75b644', static fn () => \RoleRepositoryGhostF75b644::createLazyGhost(static fn ($proxy) => self::getSulu_Repository_RoleService($container, $proxy)));
        }

        $a = ($container->services['doctrine.orm.default_entity_manager'] ?? self::getDoctrine_Orm_DefaultEntityManagerService($container));

        return ($lazyLoad->__construct($a, $a->getClassMetadata('Sulu\\Bundle\\SecurityBundle\\Entity\\Role')) && false ?: $lazyLoad);
    }

    /**
     * Gets the public 'sulu.repository.tag' shared service.
     *
     * @return \Sulu\Bundle\TagBundle\Entity\TagRepository
     */
    protected static function getSulu_Repository_TagService($container, $lazyLoad = true)
    {
        if (true === $lazyLoad) {
            return $container->services['sulu.repository.tag'] = $container->createProxy('TagRepositoryGhostC679207', static fn () => \TagRepositoryGhostC679207::createLazyGhost(static fn ($proxy) => self::getSulu_Repository_TagService($container, $proxy)));
        }

        $a = ($container->services['doctrine.orm.default_entity_manager'] ?? self::getDoctrine_Orm_DefaultEntityManagerService($container));

        return ($lazyLoad->__construct($a, $a->getClassMetadata('Sulu\\Bundle\\TagBundle\\Entity\\Tag')) && false ?: $lazyLoad);
    }

    /**
     * Gets the public 'sulu.repository.target_group' shared service.
     *
     * @return \Sulu\Bundle\AudienceTargetingBundle\Entity\TargetGroupRepository
     */
    protected static function getSulu_Repository_TargetGroupService($container, $lazyLoad = true)
    {
        if (true === $lazyLoad) {
            return $container->services['sulu.repository.target_group'] = $container->createProxy('TargetGroupRepositoryGhostB7f43c5', static fn () => \TargetGroupRepositoryGhostB7f43c5::createLazyGhost(static fn ($proxy) => self::getSulu_Repository_TargetGroupService($container, $proxy)));
        }

        $a = ($container->services['doctrine.orm.default_entity_manager'] ?? self::getDoctrine_Orm_DefaultEntityManagerService($container));

        return ($lazyLoad->__construct($a, $a->getClassMetadata('Sulu\\Bundle\\AudienceTargetingBundle\\Entity\\TargetGroup')) && false ?: $lazyLoad);
    }

    /**
     * Gets the public 'sulu.repository.user' shared service.
     *
     * @return \Sulu\Bundle\SecurityBundle\Entity\UserRepository
     */
    protected static function getSulu_Repository_UserService($container, $lazyLoad = true)
    {
        if (true === $lazyLoad) {
            return $container->services['sulu.repository.user'] = $container->createProxy('UserRepositoryGhost0dd9aae', static fn () => \UserRepositoryGhost0dd9aae::createLazyGhost(static fn ($proxy) => self::getSulu_Repository_UserService($container, $proxy)));
        }

        $a = ($container->services['doctrine.orm.default_entity_manager'] ?? self::getDoctrine_Orm_DefaultEntityManagerService($container));

        return ($lazyLoad->__construct($a, $a->getClassMetadata('Sulu\\Bundle\\SecurityBundle\\Entity\\User')) && false ?: $lazyLoad);
    }

    /**
     * Gets the public 'sulu.util.node_helper' shared service.
     *
     * @return \Sulu\Component\Util\SuluNodeHelper
     */
    protected static function getSulu_Util_NodeHelperService($container)
    {
        $a = ($container->services['doctrine_phpcr.session'] ?? self::getDoctrinePhpcr_SessionService($container));

        if (isset($container->services['sulu.util.node_helper'])) {
            return $container->services['sulu.util.node_helper'];
        }

        return $container->services['sulu.util.node_helper'] = new \Sulu\Component\Util\SuluNodeHelper($a, 'i18n', ['base' => 'cmf', 'content' => 'contents', 'route' => 'routes', 'snippet' => 'snippets'], ($container->services['sulu_page.structure.factory'] ?? self::getSuluPage_Structure_FactoryService($container)));
    }

    /**
     * Gets the public 'sulu_core.webspace.request_analyzer' shared service.
     *
     * @return \Sulu\Component\Webspace\Analyzer\RequestAnalyzer
     */
    protected static function getSuluCore_Webspace_RequestAnalyzerService($container)
    {
        return $container->services['sulu_core.webspace.request_analyzer'] = new \Sulu\Component\Webspace\Analyzer\RequestAnalyzer(($container->services['request_stack'] ??= new \Symfony\Component\HttpFoundation\RequestStack()), [($container->privates['sulu_core.request_processor.admin'] ?? self::getSuluCore_RequestProcessor_AdminService($container)), ($container->privates['sulu_core.request_processor.system'] ?? self::getSuluCore_RequestProcessor_SystemService($container))]);
    }

    /**
     * Gets the public 'sulu_core.webspace.webspace_manager' shared service.
     *
     * @return \Sulu\Component\Webspace\Manager\WebspaceManager
     */
    protected static function getSuluCore_Webspace_WebspaceManagerService($container)
    {
        return $container->services['sulu_core.webspace.webspace_manager'] = new \Sulu\Component\Webspace\Manager\WebspaceManager(($container->privates['sulu_core.webspace.loader.delegator'] ?? self::getSuluCore_Webspace_Loader_DelegatorService($container)), ($container->privates['sulu_core.webspace.webspace_manager.url_replacer'] ??= new \Sulu\Component\Webspace\Url\Replacer()), ($container->services['request_stack'] ??= new \Symfony\Component\HttpFoundation\RequestStack()), ['config_dir' => (\dirname(__DIR__, 5).'/config/webspaces'), 'cache_dir' => ($container->targetDir.''.'/sulu'), 'debug' => true, 'cache_class' => 'adminWebspaceCollectionCache', 'base_class' => 'WebspaceCollection'], 'dev', 'localhost', 'http', ($container->services['sulu_page.structure.factory'] ?? self::getSuluPage_Structure_FactoryService($container)));
    }

    /**
     * Gets the public 'sulu_document_manager.document_inspector' shared service.
     *
     * @return \Sulu\Bundle\DocumentManagerBundle\Bridge\DocumentInspector
     */
    protected static function getSuluDocumentManager_DocumentInspectorService($container)
    {
        $a = ($container->privates['sulu_document_manager.proxy_factory'] ?? self::getSuluDocumentManager_ProxyFactoryService($container));

        if (isset($container->services['sulu_document_manager.document_inspector'])) {
            return $container->services['sulu_document_manager.document_inspector'];
        }
        $b = ($container->privates['sulu_document_manager.metadata_factory'] ?? self::getSuluDocumentManager_MetadataFactoryService($container));

        if (isset($container->services['sulu_document_manager.document_inspector'])) {
            return $container->services['sulu_document_manager.document_inspector'];
        }

        return $container->services['sulu_document_manager.document_inspector'] = new \Sulu\Bundle\DocumentManagerBundle\Bridge\DocumentInspector(($container->privates['sulu_document_manager.document_registry'] ??= new \Sulu\Component\DocumentManager\DocumentRegistry('en')), ($container->privates['sulu_document_manager.path_segment_registry'] ?? self::getSuluDocumentManager_PathSegmentRegistryService($container)), ($container->privates['sulu_document_manager.namespace_registry'] ?? self::getSuluDocumentManager_NamespaceRegistryService($container)), $a, $b, ($container->services['sulu_page.structure.factory'] ?? self::getSuluPage_Structure_FactoryService($container)), ($container->services['sulu_document_manager.property_encoder'] ?? self::getSuluDocumentManager_PropertyEncoderService($container)), ($container->services['sulu_core.webspace.webspace_manager'] ?? self::getSuluCore_Webspace_WebspaceManagerService($container)));
    }

    /**
     * Gets the public 'sulu_document_manager.document_manager' shared service.
     *
     * @return \Sulu\Component\DocumentManager\DocumentManager
     */
    protected static function getSuluDocumentManager_DocumentManagerService($container)
    {
        $a = ($container->privates['sulu_document_manager.event_dispatcher.standard'] ?? self::getSuluDocumentManager_EventDispatcher_StandardService($container));

        if (isset($container->services['sulu_document_manager.document_manager'])) {
            return $container->services['sulu_document_manager.document_manager'];
        }
        $b = ($container->privates['sulu_document_manager.node_manager'] ?? self::getSuluDocumentManager_NodeManagerService($container));

        if (isset($container->services['sulu_document_manager.document_manager'])) {
            return $container->services['sulu_document_manager.document_manager'];
        }

        return $container->services['sulu_document_manager.document_manager'] = new \Sulu\Component\DocumentManager\DocumentManager($a, $b);
    }

    /**
     * Gets the public 'sulu_document_manager.metadata_factory.base' shared service.
     *
     * @return \Sulu\Component\DocumentManager\Metadata\BaseMetadataFactory
     */
    protected static function getSuluDocumentManager_MetadataFactory_BaseService($container)
    {
        $a = ($container->privates['sulu_document_manager.event_dispatcher.standard'] ?? self::getSuluDocumentManager_EventDispatcher_StandardService($container));

        if (isset($container->services['sulu_document_manager.metadata_factory.base'])) {
            return $container->services['sulu_document_manager.metadata_factory.base'];
        }

        return $container->services['sulu_document_manager.metadata_factory.base'] = new \Sulu\Component\DocumentManager\Metadata\BaseMetadataFactory($a, $container->parameters['sulu_document_manager.mapping']);
    }

    /**
     * Gets the public 'sulu_document_manager.property_encoder' shared service.
     *
     * @return \Sulu\Bundle\DocumentManagerBundle\Bridge\PropertyEncoder
     */
    protected static function getSuluDocumentManager_PropertyEncoderService($container)
    {
        return $container->services['sulu_document_manager.property_encoder'] = new \Sulu\Bundle\DocumentManagerBundle\Bridge\PropertyEncoder(($container->privates['sulu_document_manager.namespace_registry'] ?? self::getSuluDocumentManager_NamespaceRegistryService($container)));
    }

    /**
     * Gets the public 'sulu_markup.parser.html_extractor' shared service.
     *
     * @return \Sulu\Bundle\MarkupBundle\Markup\HtmlTagExtractor
     */
    protected static function getSuluMarkup_Parser_HtmlExtractorService($container)
    {
        return $container->services['sulu_markup.parser.html_extractor'] = new \Sulu\Bundle\MarkupBundle\Markup\HtmlTagExtractor('sulu');
    }

    /**
     * Gets the public 'sulu_media.collection_repository' shared service.
     *
     * @return \Sulu\Bundle\MediaBundle\Entity\CollectionRepository
     */
    protected static function getSuluMedia_CollectionRepositoryService($container)
    {
        $a = ($container->services['doctrine.orm.default_entity_manager'] ?? self::getDoctrine_Orm_DefaultEntityManagerService($container));

        if (isset($container->services['sulu_media.collection_repository'])) {
            return $container->services['sulu_media.collection_repository'];
        }

        $container->services['sulu_media.collection_repository'] = $instance = $a->getRepository('Sulu\\Bundle\\MediaBundle\\Entity\\Collection');

        $instance->setAccessControlQueryEnhancer(($container->privates['sulu_security.access_control_query_enhancer'] ?? self::getSuluSecurity_AccessControlQueryEnhancerService($container)));

        return $instance;
    }

    /**
     * Gets the public 'sulu_media.format_cache' shared service.
     *
     * @return \Sulu\Bundle\MediaBundle\Media\FormatCache\LocalFormatCache
     */
    protected static function getSuluMedia_FormatCacheService($container)
    {
        return $container->services['sulu_media.format_cache'] = new \Sulu\Bundle\MediaBundle\Media\FormatCache\LocalFormatCache(($container->privates['filesystem'] ??= new \Symfony\Component\Filesystem\Filesystem()), (\dirname(__DIR__, 5).'/public/uploads/media'), '/uploads/media/{slug}', 10);
    }

    /**
     * Gets the public 'sulu_media.format_manager' shared service.
     *
     * @return \Sulu\Bundle\MediaBundle\Media\FormatManager\FormatManager
     */
    protected static function getSuluMedia_FormatManagerService($container)
    {
        return $container->services['sulu_media.format_manager'] = new \Sulu\Bundle\MediaBundle\Media\FormatManager\FormatManager(($container->services['sulu.repository.media'] ?? self::getSulu_Repository_MediaService($container)), ($container->services['sulu_media.format_cache'] ?? self::getSuluMedia_FormatCacheService($container)), ($container->privates['sulu_media.image.converter'] ?? self::getSuluMedia_Image_ConverterService($container)), true, $container->parameters['sulu_media.format_manager.response_headers'], $container->parameters['sulu_media.image.formats'], ($container->privates['logger'] ?? self::getLoggerService($container)));
    }

    /**
     * Gets the public 'sulu_media.image.transformation.blur' shared service.
     *
     * @return \Sulu\Bundle\MediaBundle\Media\ImageConverter\Transformation\BlurTransformation
     */
    protected static function getSuluMedia_Image_Transformation_BlurService($container)
    {
        return $container->services['sulu_media.image.transformation.blur'] = new \Sulu\Bundle\MediaBundle\Media\ImageConverter\Transformation\BlurTransformation();
    }

    /**
     * Gets the public 'sulu_media.image.transformation.crop' shared service.
     *
     * @return \Sulu\Bundle\MediaBundle\Media\ImageConverter\Transformation\CropTransformation
     */
    protected static function getSuluMedia_Image_Transformation_CropService($container)
    {
        return $container->services['sulu_media.image.transformation.crop'] = new \Sulu\Bundle\MediaBundle\Media\ImageConverter\Transformation\CropTransformation();
    }

    /**
     * Gets the public 'sulu_media.image.transformation.gamma' shared service.
     *
     * @return \Sulu\Bundle\MediaBundle\Media\ImageConverter\Transformation\GammaTransformation
     */
    protected static function getSuluMedia_Image_Transformation_GammaService($container)
    {
        return $container->services['sulu_media.image.transformation.gamma'] = new \Sulu\Bundle\MediaBundle\Media\ImageConverter\Transformation\GammaTransformation();
    }

    /**
     * Gets the public 'sulu_media.image.transformation.grayscale' shared service.
     *
     * @return \Sulu\Bundle\MediaBundle\Media\ImageConverter\Transformation\GrayscaleTransformation
     */
    protected static function getSuluMedia_Image_Transformation_GrayscaleService($container)
    {
        return $container->services['sulu_media.image.transformation.grayscale'] = new \Sulu\Bundle\MediaBundle\Media\ImageConverter\Transformation\GrayscaleTransformation();
    }

    /**
     * Gets the public 'sulu_media.image.transformation.negative' shared service.
     *
     * @return \Sulu\Bundle\MediaBundle\Media\ImageConverter\Transformation\NegativeTransformation
     */
    protected static function getSuluMedia_Image_Transformation_NegativeService($container)
    {
        return $container->services['sulu_media.image.transformation.negative'] = new \Sulu\Bundle\MediaBundle\Media\ImageConverter\Transformation\NegativeTransformation();
    }

    /**
     * Gets the public 'sulu_media.image.transformation.paste' shared service.
     *
     * @return \Sulu\Bundle\MediaBundle\Media\ImageConverter\Transformation\PasteTransformation
     */
    protected static function getSuluMedia_Image_Transformation_PasteService($container)
    {
        return $container->services['sulu_media.image.transformation.paste'] = new \Sulu\Bundle\MediaBundle\Media\ImageConverter\Transformation\PasteTransformation(($container->privates['sulu_media.adapter.imagick'] ??= new \Imagine\Imagick\Imagine()), ($container->privates['file_locator'] ??= new \Symfony\Component\HttpKernel\Config\FileLocator(($container->services['kernel'] ?? $container->get('kernel', 1)))));
    }

    /**
     * Gets the public 'sulu_media.image.transformation.sharpen' shared service.
     *
     * @return \Sulu\Bundle\MediaBundle\Media\ImageConverter\Transformation\SharpenTransformation
     */
    protected static function getSuluMedia_Image_Transformation_SharpenService($container)
    {
        return $container->services['sulu_media.image.transformation.sharpen'] = new \Sulu\Bundle\MediaBundle\Media\ImageConverter\Transformation\SharpenTransformation();
    }

    /**
     * Gets the public 'sulu_media.media_manager' shared service.
     *
     * @return \Sulu\Bundle\MediaBundle\Media\Manager\MediaManager
     */
    protected static function getSuluMedia_MediaManagerService($container)
    {
        $a = ($container->services['doctrine.orm.default_entity_manager'] ?? self::getDoctrine_Orm_DefaultEntityManagerService($container));

        if (isset($container->services['sulu_media.media_manager'])) {
            return $container->services['sulu_media.media_manager'];
        }
        $b = ($container->services['sulu_tag.tag_manager'] ?? self::getSuluTag_TagManagerService($container));

        if (isset($container->services['sulu_media.media_manager'])) {
            return $container->services['sulu_media.media_manager'];
        }
        $c = ($container->privates['sulu_media.type_manager'] ?? self::getSuluMedia_TypeManagerService($container));

        if (isset($container->services['sulu_media.media_manager'])) {
            return $container->services['sulu_media.media_manager'];
        }
        $d = ($container->services['sulu.repository.target_group'] ?? self::getSulu_Repository_TargetGroupService($container));

        if (isset($container->services['sulu_media.media_manager'])) {
            return $container->services['sulu_media.media_manager'];
        }

        return $container->services['sulu_media.media_manager'] = new \Sulu\Bundle\MediaBundle\Media\Manager\MediaManager(($container->services['sulu.repository.media'] ?? self::getSulu_Repository_MediaService($container)), ($container->services['sulu_media.collection_repository'] ?? self::getSuluMedia_CollectionRepositoryService($container)), ($container->services['sulu.repository.user'] ?? self::getSulu_Repository_UserService($container)), ($container->services['sulu.repository.category'] ?? self::getSulu_Repository_CategoryService($container)), $a, ($container->services['sulu_media.storage'] ?? self::getSuluMedia_StorageService($container)), ($container->privates['sulu_media.file_validator'] ?? self::getSuluMedia_FileValidatorService($container)), ($container->services['sulu_media.format_manager'] ?? self::getSuluMedia_FormatManagerService($container)), $b, $c, ($container->services['sulu.content.path_cleaner'] ?? self::getSulu_Content_PathCleanerService($container)), ($container->privates['sulu_activity.domain_event_collector'] ?? self::getSuluActivity_DomainEventCollectorService($container)), ($container->privates['security.token_storage'] ?? self::getSecurity_TokenStorageService($container)), ($container->services['sulu_security.security_checker'] ?? self::getSuluSecurity_SecurityCheckerService($container)), new RewindableGenerator(function () use ($container) {
            yield 0 => ($container->privates['sulu_media.image_properties_provider'] ?? $container->load('getSuluMedia_ImagePropertiesProviderService'));
        }, 1), '/media/{id}/download/{slug}', $d, '/admin/media/{id}/download/{slug}', ($container->privates['sulu_trash.trash_manager'] ?? self::getSuluTrash_TrashManagerService($container)));
    }

    /**
     * Gets the public 'sulu_media.storage' shared service.
     *
     * @return \Sulu\Bundle\MediaBundle\Media\Storage\LocalStorage
     */
    protected static function getSuluMedia_StorageService($container)
    {
        return $container->services['sulu_media.storage'] = new \Sulu\Bundle\MediaBundle\Media\Storage\LocalStorage((\dirname(__DIR__, 4).'/uploads/media'), 10, ($container->privates['sulu_media.storage.local.file_system'] ??= new \Symfony\Component\Filesystem\Filesystem()), ($container->privates['logger'] ?? self::getLoggerService($container)));
    }

    /**
     * Gets the public 'sulu_page.compat.structure.legacy_property_factory' shared service.
     *
     * @return \Sulu\Component\Content\Compat\Structure\LegacyPropertyFactory
     */
    protected static function getSuluPage_Compat_Structure_LegacyPropertyFactoryService($container)
    {
        return $container->services['sulu_page.compat.structure.legacy_property_factory'] = new \Sulu\Component\Content\Compat\Structure\LegacyPropertyFactory(($container->privates['sulu_document_manager.namespace_registry'] ?? self::getSuluDocumentManager_NamespaceRegistryService($container)), ($container->services['sulu_page.structure.factory'] ?? self::getSuluPage_Structure_FactoryService($container)));
    }

    /**
     * Gets the public 'sulu_page.content_repository' shared service.
     *
     * @return \Sulu\Component\Content\Repository\ContentRepository
     */
    protected static function getSuluPage_ContentRepositoryService($container)
    {
        $a = ($container->services['sulu.phpcr.session'] ?? self::getSulu_Phpcr_SessionService($container));

        if (isset($container->services['sulu_page.content_repository'])) {
            return $container->services['sulu_page.content_repository'];
        }

        return $container->services['sulu_page.content_repository'] = new \Sulu\Component\Content\Repository\ContentRepository($a, ($container->services['sulu_document_manager.property_encoder'] ?? self::getSuluDocumentManager_PropertyEncoderService($container)), ($container->services['sulu_core.webspace.webspace_manager'] ?? self::getSuluCore_Webspace_WebspaceManagerService($container)), ($container->services['sulu.content.localization_finder'] ?? self::getSulu_Content_LocalizationFinderService($container)), ($container->services['sulu.content.structure_manager'] ?? self::getSulu_Content_StructureManagerService($container)), ($container->services['sulu.util.node_helper'] ?? self::getSulu_Util_NodeHelperService($container)), ($container->privates['sulu_security.system_store'] ?? self::getSuluSecurity_SystemStoreService($container)), $container->parameters['sulu_security.permissions']);
    }

    /**
     * Gets the public 'sulu_page.structure.factory' shared service.
     *
     * @return \Sulu\Component\Content\Metadata\Factory\StructureMetadataFactory
     */
    protected static function getSuluPage_Structure_FactoryService($container)
    {
        return $container->services['sulu_page.structure.factory'] = new \Sulu\Component\Content\Metadata\Factory\StructureMetadataFactory(($container->privates['sulu_page.structure.loader.xml'] ?? self::getSuluPage_Structure_Loader_XmlService($container)), $container->parameters['sulu.content.structure.paths'], $container->parameters['sulu.content.structure.default_types'], ($container->targetDir.''.'/sulu/structures'), true);
    }

    /**
     * Gets the public 'sulu_security.mask_converter' shared service.
     *
     * @return \Sulu\Component\Security\Authorization\MaskConverter
     */
    protected static function getSuluSecurity_MaskConverterService($container)
    {
        return $container->services['sulu_security.mask_converter'] = new \Sulu\Component\Security\Authorization\MaskConverter($container->parameters['permissions']);
    }

    /**
     * Gets the public 'sulu_security.security_checker' shared service.
     *
     * @return \Sulu\Component\Security\Authorization\SecurityChecker
     */
    protected static function getSuluSecurity_SecurityCheckerService($container)
    {
        $a = ($container->services['jms_serializer.authorization_checker'] ?? self::getJmsSerializer_AuthorizationCheckerService($container));

        if (isset($container->services['sulu_security.security_checker'])) {
            return $container->services['sulu_security.security_checker'];
        }

        return $container->services['sulu_security.security_checker'] = new \Sulu\Component\Security\Authorization\SecurityChecker(($container->privates['security.token_storage'] ?? self::getSecurity_TokenStorageService($container)), $a);
    }

    /**
     * Gets the public 'sulu_tag.tag_manager' shared service.
     *
     * @return \Sulu\Bundle\TagBundle\Tag\TagManager
     */
    protected static function getSuluTag_TagManagerService($container)
    {
        $a = ($container->services['sulu.repository.tag'] ?? self::getSulu_Repository_TagService($container));

        if (isset($container->services['sulu_tag.tag_manager'])) {
            return $container->services['sulu_tag.tag_manager'];
        }
        $b = ($container->services['doctrine.orm.default_entity_manager'] ?? self::getDoctrine_Orm_DefaultEntityManagerService($container));

        if (isset($container->services['sulu_tag.tag_manager'])) {
            return $container->services['sulu_tag.tag_manager'];
        }
        $c = ($container->services['event_dispatcher'] ?? self::getEventDispatcherService($container));

        if (isset($container->services['sulu_tag.tag_manager'])) {
            return $container->services['sulu_tag.tag_manager'];
        }
        $d = ($container->privates['sulu_activity.domain_event_collector'] ?? self::getSuluActivity_DomainEventCollectorService($container));

        if (isset($container->services['sulu_tag.tag_manager'])) {
            return $container->services['sulu_tag.tag_manager'];
        }
        $e = ($container->privates['sulu_trash.trash_manager'] ?? self::getSuluTrash_TrashManagerService($container));

        if (isset($container->services['sulu_tag.tag_manager'])) {
            return $container->services['sulu_tag.tag_manager'];
        }

        return $container->services['sulu_tag.tag_manager'] = new \Sulu\Bundle\TagBundle\Tag\TagManager($a, $b, $c, $d, $e);
    }

    /**
     * Gets the public 'translator' shared service.
     *
     * @return \Symfony\Bundle\FrameworkBundle\Translation\Translator
     */
    protected static function getTranslatorService($container)
    {
        $container->services['translator'] = $instance = new \Symfony\Bundle\FrameworkBundle\Translation\Translator(new \Symfony\Component\DependencyInjection\Argument\ServiceLocator($container->getService ??= $container->getService(...), [
            'translation.loader.php' => ['privates', 'translation.loader.php', 'getTranslation_Loader_PhpService', true],
            'translation.loader.yml' => ['privates', 'translation.loader.yml', 'getTranslation_Loader_YmlService', true],
            'translation.loader.xliff' => ['privates', 'translation.loader.xliff', 'getTranslation_Loader_XliffService', true],
            'translation.loader.po' => ['privates', 'translation.loader.po', 'getTranslation_Loader_PoService', true],
            'translation.loader.mo' => ['privates', 'translation.loader.mo', 'getTranslation_Loader_MoService', true],
            'translation.loader.qt' => ['privates', 'translation.loader.qt', 'getTranslation_Loader_QtService', true],
            'translation.loader.csv' => ['privates', 'translation.loader.csv', 'getTranslation_Loader_CsvService', true],
            'translation.loader.res' => ['privates', 'translation.loader.res', 'getTranslation_Loader_ResService', true],
            'translation.loader.dat' => ['privates', 'translation.loader.dat', 'getTranslation_Loader_DatService', true],
            'translation.loader.ini' => ['privates', 'translation.loader.ini', 'getTranslation_Loader_IniService', true],
            'translation.loader.json' => ['privates', 'translation.loader.json', 'getTranslation_Loader_JsonService', true],
        ], [
            'translation.loader.php' => '?',
            'translation.loader.yml' => '?',
            'translation.loader.xliff' => '?',
            'translation.loader.po' => '?',
            'translation.loader.mo' => '?',
            'translation.loader.qt' => '?',
            'translation.loader.csv' => '?',
            'translation.loader.res' => '?',
            'translation.loader.dat' => '?',
            'translation.loader.ini' => '?',
            'translation.loader.json' => '?',
        ]), ($container->privates['translator.formatter.default'] ?? self::getTranslator_Formatter_DefaultService($container)), 'en', ['translation.loader.php' => ['php'], 'translation.loader.yml' => ['yaml', 'yml'], 'translation.loader.xliff' => ['xlf', 'xliff'], 'translation.loader.po' => ['po'], 'translation.loader.mo' => ['mo'], 'translation.loader.qt' => ['ts'], 'translation.loader.csv' => ['csv'], 'translation.loader.res' => ['res'], 'translation.loader.dat' => ['dat'], 'translation.loader.ini' => ['ini'], 'translation.loader.json' => ['json']], ['cache_dir' => ($container->targetDir.''.'/translations'), 'debug' => true, 'resource_files' => ['af' => ['/var/www/html/vendor/symfony/validator/Resources/translations/validators.af.xlf', '/var/www/html/vendor/symfony/form/Resources/translations/validators.af.xlf', '/var/www/html/vendor/symfony/security-core/Resources/translations/security.af.xlf'], 'ar' => ['/var/www/html/vendor/symfony/validator/Resources/translations/validators.ar.xlf', '/var/www/html/vendor/symfony/form/Resources/translations/validators.ar.xlf', '/var/www/html/vendor/symfony/security-core/Resources/translations/security.ar.xlf'], 'az' => ['/var/www/html/vendor/symfony/validator/Resources/translations/validators.az.xlf', '/var/www/html/vendor/symfony/form/Resources/translations/validators.az.xlf', '/var/www/html/vendor/symfony/security-core/Resources/translations/security.az.xlf'], 'be' => ['/var/www/html/vendor/symfony/validator/Resources/translations/validators.be.xlf', '/var/www/html/vendor/symfony/form/Resources/translations/validators.be.xlf', '/var/www/html/vendor/symfony/security-core/Resources/translations/security.be.xlf'], 'bg' => ['/var/www/html/vendor/symfony/validator/Resources/translations/validators.bg.xlf', '/var/www/html/vendor/symfony/form/Resources/translations/validators.bg.xlf', '/var/www/html/vendor/symfony/security-core/Resources/translations/security.bg.xlf'], 'bs' => ['/var/www/html/vendor/symfony/validator/Resources/translations/validators.bs.xlf', '/var/www/html/vendor/symfony/form/Resources/translations/validators.bs.xlf', '/var/www/html/vendor/symfony/security-core/Resources/translations/security.bs.xlf'], 'ca' => ['/var/www/html/vendor/symfony/validator/Resources/translations/validators.ca.xlf', '/var/www/html/vendor/symfony/form/Resources/translations/validators.ca.xlf', '/var/www/html/vendor/symfony/security-core/Resources/translations/security.ca.xlf'], 'cs' => ['/var/www/html/vendor/symfony/validator/Resources/translations/validators.cs.xlf', '/var/www/html/vendor/symfony/form/Resources/translations/validators.cs.xlf', '/var/www/html/vendor/symfony/security-core/Resources/translations/security.cs.xlf'], 'cy' => ['/var/www/html/vendor/symfony/validator/Resources/translations/validators.cy.xlf', '/var/www/html/vendor/symfony/form/Resources/translations/validators.cy.xlf', '/var/www/html/vendor/symfony/security-core/Resources/translations/security.cy.xlf'], 'da' => ['/var/www/html/vendor/symfony/validator/Resources/translations/validators.da.xlf', '/var/www/html/vendor/symfony/form/Resources/translations/validators.da.xlf', '/var/www/html/vendor/symfony/security-core/Resources/translations/security.da.xlf'], 'de' => ['/var/www/html/vendor/symfony/validator/Resources/translations/validators.de.xlf', '/var/www/html/vendor/symfony/form/Resources/translations/validators.de.xlf', '/var/www/html/vendor/symfony/security-core/Resources/translations/security.de.xlf', '/var/www/html/vendor/sulu/sulu/src/Sulu/Bundle/AdminBundle/Resources/translations/admin.de.json', '/var/www/html/vendor/sulu/sulu/src/Sulu/Bundle/SearchBundle/Resources/translations/admin.de.json', '/var/www/html/vendor/sulu/sulu/src/Sulu/Bundle/PageBundle/Resources/translations/admin.de.json', '/var/www/html/vendor/sulu/sulu/src/Sulu/Bundle/ContactBundle/Resources/translations/admin.de.json', '/var/www/html/vendor/sulu/sulu/src/Sulu/Bundle/SecurityBundle/Resources/translations/admin.de.json', '/var/www/html/vendor/sulu/sulu/src/Sulu/Bundle/WebsiteBundle/Resources/translations/admin.de.json', '/var/www/html/vendor/sulu/sulu/src/Sulu/Bundle/TagBundle/Resources/translations/admin.de.json', '/var/www/html/vendor/sulu/sulu/src/Sulu/Bundle/MediaBundle/Resources/translations/admin.de.json', '/var/www/html/vendor/sulu/sulu/src/Sulu/Bundle/CategoryBundle/Resources/translations/admin.de.json', '/var/www/html/vendor/sulu/sulu/src/Sulu/Bundle/SnippetBundle/Resources/translations/admin.de.json', '/var/www/html/vendor/sulu/sulu/src/Sulu/Bundle/LocationBundle/Resources/translations/admin.de.json', '/var/www/html/vendor/sulu/sulu/src/Sulu/Bundle/ActivityBundle/Resources/translations/admin.de.json', '/var/www/html/vendor/sulu/sulu/src/Sulu/Bundle/CustomUrlBundle/Resources/translations/admin.de.json', '/var/www/html/vendor/sulu/sulu/src/Sulu/Bundle/RouteBundle/Resources/translations/admin.de.json', '/var/www/html/vendor/sulu/sulu/src/Sulu/Bundle/PreviewBundle/Resources/translations/admin.de.json', '/var/www/html/vendor/sulu/sulu/src/Sulu/Bundle/AudienceTargetingBundle/Resources/translations/admin.de.json', '/var/www/html/vendor/sulu/sulu/src/Sulu/Bundle/TrashBundle/Resources/translations/admin.de.json', '/var/www/html/vendor/sulu/sulu/src/Sulu/Bundle/ReferenceBundle/Resources/translations/admin.de.json'], 'el' => ['/var/www/html/vendor/symfony/validator/Resources/translations/validators.el.xlf', '/var/www/html/vendor/symfony/form/Resources/translations/validators.el.xlf', '/var/www/html/vendor/symfony/security-core/Resources/translations/security.el.xlf'], 'en' => ['/var/www/html/vendor/symfony/validator/Resources/translations/validators.en.xlf', '/var/www/html/vendor/symfony/form/Resources/translations/validators.en.xlf', '/var/www/html/vendor/symfony/security-core/Resources/translations/security.en.xlf', '/var/www/html/vendor/sulu/sulu/src/Sulu/Bundle/AdminBundle/Resources/translations/admin.en.json', '/var/www/html/vendor/sulu/sulu/src/Sulu/Bundle/SearchBundle/Resources/translations/admin.en.json', '/var/www/html/vendor/sulu/sulu/src/Sulu/Bundle/PageBundle/Resources/translations/admin.en.json', '/var/www/html/vendor/sulu/sulu/src/Sulu/Bundle/ContactBundle/Resources/translations/admin.en.json', '/var/www/html/vendor/sulu/sulu/src/Sulu/Bundle/SecurityBundle/Resources/translations/admin.en.json', '/var/www/html/vendor/sulu/sulu/src/Sulu/Bundle/WebsiteBundle/Resources/translations/admin.en.json', '/var/www/html/vendor/sulu/sulu/src/Sulu/Bundle/TagBundle/Resources/translations/admin.en.json', '/var/www/html/vendor/sulu/sulu/src/Sulu/Bundle/MediaBundle/Resources/translations/admin.en.json', '/var/www/html/vendor/sulu/sulu/src/Sulu/Bundle/CategoryBundle/Resources/translations/admin.en.json', '/var/www/html/vendor/sulu/sulu/src/Sulu/Bundle/SnippetBundle/Resources/translations/admin.en.json', '/var/www/html/vendor/sulu/sulu/src/Sulu/Bundle/LocationBundle/Resources/translations/admin.en.json', '/var/www/html/vendor/sulu/sulu/src/Sulu/Bundle/ActivityBundle/Resources/translations/admin.en.json', '/var/www/html/vendor/sulu/sulu/src/Sulu/Bundle/CustomUrlBundle/Resources/translations/admin.en.json', '/var/www/html/vendor/sulu/sulu/src/Sulu/Bundle/RouteBundle/Resources/translations/admin.en.json', '/var/www/html/vendor/sulu/sulu/src/Sulu/Bundle/PreviewBundle/Resources/translations/admin.en.json', '/var/www/html/vendor/sulu/sulu/src/Sulu/Bundle/AudienceTargetingBundle/Resources/translations/admin.en.json', '/var/www/html/vendor/sulu/sulu/src/Sulu/Bundle/TrashBundle/Resources/translations/admin.en.json', '/var/www/html/vendor/sulu/sulu/src/Sulu/Bundle/ReferenceBundle/Resources/translations/admin.en.json'], 'es' => ['/var/www/html/vendor/symfony/validator/Resources/translations/validators.es.xlf', '/var/www/html/vendor/symfony/form/Resources/translations/validators.es.xlf', '/var/www/html/vendor/symfony/security-core/Resources/translations/security.es.xlf'], 'et' => ['/var/www/html/vendor/symfony/validator/Resources/translations/validators.et.xlf', '/var/www/html/vendor/symfony/form/Resources/translations/validators.et.xlf', '/var/www/html/vendor/symfony/security-core/Resources/translations/security.et.xlf'], 'eu' => ['/var/www/html/vendor/symfony/validator/Resources/translations/validators.eu.xlf', '/var/www/html/vendor/symfony/form/Resources/translations/validators.eu.xlf', '/var/www/html/vendor/symfony/security-core/Resources/translations/security.eu.xlf'], 'fa' => ['/var/www/html/vendor/symfony/validator/Resources/translations/validators.fa.xlf', '/var/www/html/vendor/symfony/form/Resources/translations/validators.fa.xlf', '/var/www/html/vendor/symfony/security-core/Resources/translations/security.fa.xlf'], 'fi' => ['/var/www/html/vendor/symfony/validator/Resources/translations/validators.fi.xlf', '/var/www/html/vendor/symfony/form/Resources/translations/validators.fi.xlf', '/var/www/html/vendor/symfony/security-core/Resources/translations/security.fi.xlf'], 'fr' => ['/var/www/html/vendor/symfony/validator/Resources/translations/validators.fr.xlf', '/var/www/html/vendor/symfony/form/Resources/translations/validators.fr.xlf', '/var/www/html/vendor/symfony/security-core/Resources/translations/security.fr.xlf'], 'gl' => ['/var/www/html/vendor/symfony/validator/Resources/translations/validators.gl.xlf', '/var/www/html/vendor/symfony/form/Resources/translations/validators.gl.xlf', '/var/www/html/vendor/symfony/security-core/Resources/translations/security.gl.xlf'], 'he' => ['/var/www/html/vendor/symfony/validator/Resources/translations/validators.he.xlf', '/var/www/html/vendor/symfony/form/Resources/translations/validators.he.xlf', '/var/www/html/vendor/symfony/security-core/Resources/translations/security.he.xlf'], 'hr' => ['/var/www/html/vendor/symfony/validator/Resources/translations/validators.hr.xlf', '/var/www/html/vendor/symfony/form/Resources/translations/validators.hr.xlf', '/var/www/html/vendor/symfony/security-core/Resources/translations/security.hr.xlf'], 'hu' => ['/var/www/html/vendor/symfony/validator/Resources/translations/validators.hu.xlf', '/var/www/html/vendor/symfony/form/Resources/translations/validators.hu.xlf', '/var/www/html/vendor/symfony/security-core/Resources/translations/security.hu.xlf'], 'hy' => ['/var/www/html/vendor/symfony/validator/Resources/translations/validators.hy.xlf', '/var/www/html/vendor/symfony/form/Resources/translations/validators.hy.xlf', '/var/www/html/vendor/symfony/security-core/Resources/translations/security.hy.xlf'], 'id' => ['/var/www/html/vendor/symfony/validator/Resources/translations/validators.id.xlf', '/var/www/html/vendor/symfony/form/Resources/translations/validators.id.xlf', '/var/www/html/vendor/symfony/security-core/Resources/translations/security.id.xlf'], 'it' => ['/var/www/html/vendor/symfony/validator/Resources/translations/validators.it.xlf', '/var/www/html/vendor/symfony/form/Resources/translations/validators.it.xlf', '/var/www/html/vendor/symfony/security-core/Resources/translations/security.it.xlf'], 'ja' => ['/var/www/html/vendor/symfony/validator/Resources/translations/validators.ja.xlf', '/var/www/html/vendor/symfony/form/Resources/translations/validators.ja.xlf', '/var/www/html/vendor/symfony/security-core/Resources/translations/security.ja.xlf'], 'lb' => ['/var/www/html/vendor/symfony/validator/Resources/translations/validators.lb.xlf', '/var/www/html/vendor/symfony/form/Resources/translations/validators.lb.xlf', '/var/www/html/vendor/symfony/security-core/Resources/translations/security.lb.xlf'], 'lt' => ['/var/www/html/vendor/symfony/validator/Resources/translations/validators.lt.xlf', '/var/www/html/vendor/symfony/form/Resources/translations/validators.lt.xlf', '/var/www/html/vendor/symfony/security-core/Resources/translations/security.lt.xlf'], 'lv' => ['/var/www/html/vendor/symfony/validator/Resources/translations/validators.lv.xlf', '/var/www/html/vendor/symfony/form/Resources/translations/validators.lv.xlf', '/var/www/html/vendor/symfony/security-core/Resources/translations/security.lv.xlf'], 'mk' => ['/var/www/html/vendor/symfony/validator/Resources/translations/validators.mk.xlf', '/var/www/html/vendor/symfony/form/Resources/translations/validators.mk.xlf', '/var/www/html/vendor/symfony/security-core/Resources/translations/security.mk.xlf'], 'mn' => ['/var/www/html/vendor/symfony/validator/Resources/translations/validators.mn.xlf', '/var/www/html/vendor/symfony/form/Resources/translations/validators.mn.xlf', '/var/www/html/vendor/symfony/security-core/Resources/translations/security.mn.xlf'], 'my' => ['/var/www/html/vendor/symfony/validator/Resources/translations/validators.my.xlf', '/var/www/html/vendor/symfony/form/Resources/translations/validators.my.xlf', '/var/www/html/vendor/symfony/security-core/Resources/translations/security.my.xlf'], 'nb' => ['/var/www/html/vendor/symfony/validator/Resources/translations/validators.nb.xlf', '/var/www/html/vendor/symfony/form/Resources/translations/validators.nb.xlf', '/var/www/html/vendor/symfony/security-core/Resources/translations/security.nb.xlf'], 'nl' => ['/var/www/html/vendor/symfony/validator/Resources/translations/validators.nl.xlf', '/var/www/html/vendor/symfony/form/Resources/translations/validators.nl.xlf', '/var/www/html/vendor/symfony/security-core/Resources/translations/security.nl.xlf'], 'nn' => ['/var/www/html/vendor/symfony/validator/Resources/translations/validators.nn.xlf', '/var/www/html/vendor/symfony/form/Resources/translations/validators.nn.xlf', '/var/www/html/vendor/symfony/security-core/Resources/translations/security.nn.xlf'], 'no' => ['/var/www/html/vendor/symfony/validator/Resources/translations/validators.no.xlf', '/var/www/html/vendor/symfony/form/Resources/translations/validators.no.xlf', '/var/www/html/vendor/symfony/security-core/Resources/translations/security.no.xlf'], 'pl' => ['/var/www/html/vendor/symfony/validator/Resources/translations/validators.pl.xlf', '/var/www/html/vendor/symfony/form/Resources/translations/validators.pl.xlf', '/var/www/html/vendor/symfony/security-core/Resources/translations/security.pl.xlf'], 'pt' => ['/var/www/html/vendor/symfony/validator/Resources/translations/validators.pt.xlf', '/var/www/html/vendor/symfony/form/Resources/translations/validators.pt.xlf', '/var/www/html/vendor/symfony/security-core/Resources/translations/security.pt.xlf'], 'pt_BR' => ['/var/www/html/vendor/symfony/validator/Resources/translations/validators.pt_BR.xlf', '/var/www/html/vendor/symfony/form/Resources/translations/validators.pt_BR.xlf', '/var/www/html/vendor/symfony/security-core/Resources/translations/security.pt_BR.xlf'], 'ro' => ['/var/www/html/vendor/symfony/validator/Resources/translations/validators.ro.xlf', '/var/www/html/vendor/symfony/form/Resources/translations/validators.ro.xlf', '/var/www/html/vendor/symfony/security-core/Resources/translations/security.ro.xlf'], 'ru' => ['/var/www/html/vendor/symfony/validator/Resources/translations/validators.ru.xlf', '/var/www/html/vendor/symfony/form/Resources/translations/validators.ru.xlf', '/var/www/html/vendor/symfony/security-core/Resources/translations/security.ru.xlf'], 'sk' => ['/var/www/html/vendor/symfony/validator/Resources/translations/validators.sk.xlf', '/var/www/html/vendor/symfony/form/Resources/translations/validators.sk.xlf', '/var/www/html/vendor/symfony/security-core/Resources/translations/security.sk.xlf'], 'sl' => ['/var/www/html/vendor/symfony/validator/Resources/translations/validators.sl.xlf', '/var/www/html/vendor/symfony/form/Resources/translations/validators.sl.xlf', '/var/www/html/vendor/symfony/security-core/Resources/translations/security.sl.xlf'], 'sq' => ['/var/www/html/vendor/symfony/validator/Resources/translations/validators.sq.xlf', '/var/www/html/vendor/symfony/form/Resources/translations/validators.sq.xlf', '/var/www/html/vendor/symfony/security-core/Resources/translations/security.sq.xlf'], 'sr_Cyrl' => ['/var/www/html/vendor/symfony/validator/Resources/translations/validators.sr_Cyrl.xlf', '/var/www/html/vendor/symfony/form/Resources/translations/validators.sr_Cyrl.xlf', '/var/www/html/vendor/symfony/security-core/Resources/translations/security.sr_Cyrl.xlf'], 'sr_Latn' => ['/var/www/html/vendor/symfony/validator/Resources/translations/validators.sr_Latn.xlf', '/var/www/html/vendor/symfony/form/Resources/translations/validators.sr_Latn.xlf', '/var/www/html/vendor/symfony/security-core/Resources/translations/security.sr_Latn.xlf'], 'sv' => ['/var/www/html/vendor/symfony/validator/Resources/translations/validators.sv.xlf', '/var/www/html/vendor/symfony/form/Resources/translations/validators.sv.xlf', '/var/www/html/vendor/symfony/security-core/Resources/translations/security.sv.xlf'], 'th' => ['/var/www/html/vendor/symfony/validator/Resources/translations/validators.th.xlf', '/var/www/html/vendor/symfony/form/Resources/translations/validators.th.xlf', '/var/www/html/vendor/symfony/security-core/Resources/translations/security.th.xlf'], 'tl' => ['/var/www/html/vendor/symfony/validator/Resources/translations/validators.tl.xlf', '/var/www/html/vendor/symfony/form/Resources/translations/validators.tl.xlf', '/var/www/html/vendor/symfony/security-core/Resources/translations/security.tl.xlf'], 'tr' => ['/var/www/html/vendor/symfony/validator/Resources/translations/validators.tr.xlf', '/var/www/html/vendor/symfony/form/Resources/translations/validators.tr.xlf', '/var/www/html/vendor/symfony/security-core/Resources/translations/security.tr.xlf'], 'uk' => ['/var/www/html/vendor/symfony/validator/Resources/translations/validators.uk.xlf', '/var/www/html/vendor/symfony/form/Resources/translations/validators.uk.xlf', '/var/www/html/vendor/symfony/security-core/Resources/translations/security.uk.xlf'], 'ur' => ['/var/www/html/vendor/symfony/validator/Resources/translations/validators.ur.xlf', '/var/www/html/vendor/symfony/form/Resources/translations/validators.ur.xlf', '/var/www/html/vendor/symfony/security-core/Resources/translations/security.ur.xlf'], 'uz' => ['/var/www/html/vendor/symfony/validator/Resources/translations/validators.uz.xlf', '/var/www/html/vendor/symfony/form/Resources/translations/validators.uz.xlf', '/var/www/html/vendor/symfony/security-core/Resources/translations/security.uz.xlf'], 'vi' => ['/var/www/html/vendor/symfony/validator/Resources/translations/validators.vi.xlf', '/var/www/html/vendor/symfony/form/Resources/translations/validators.vi.xlf', '/var/www/html/vendor/symfony/security-core/Resources/translations/security.vi.xlf'], 'zh_CN' => ['/var/www/html/vendor/symfony/validator/Resources/translations/validators.zh_CN.xlf', '/var/www/html/vendor/symfony/form/Resources/translations/validators.zh_CN.xlf', '/var/www/html/vendor/symfony/security-core/Resources/translations/security.zh_CN.xlf'], 'zh_TW' => ['/var/www/html/vendor/symfony/validator/Resources/translations/validators.zh_TW.xlf', '/var/www/html/vendor/symfony/form/Resources/translations/validators.zh_TW.xlf', '/var/www/html/vendor/symfony/security-core/Resources/translations/security.zh_TW.xlf']], 'scanned_directories' => ['/var/www/html/vendor/symfony/validator/Resources/translations', '/var/www/html/vendor/symfony/form/Resources/translations', '/var/www/html/vendor/symfony/security-core/Resources/translations', '/var/www/html/vendor/sulu/sulu/src/Sulu/Bundle/AdminBundle/Resources/translations', '/var/www/html/vendor/sulu/sulu/src/Sulu/Bundle/SearchBundle/Resources/translations', '/var/www/html/vendor/sulu/sulu/src/Sulu/Bundle/PageBundle/Resources/translations', '/var/www/html/vendor/sulu/sulu/src/Sulu/Bundle/ContactBundle/Resources/translations', '/var/www/html/vendor/sulu/sulu/src/Sulu/Bundle/SecurityBundle/Resources/translations', '/var/www/html/vendor/sulu/sulu/src/Sulu/Bundle/WebsiteBundle/Resources/translations', '/var/www/html/vendor/sulu/sulu/src/Sulu/Bundle/TagBundle/Resources/translations', '/var/www/html/vendor/sulu/sulu/src/Sulu/Bundle/MediaBundle/Resources/translations', '/var/www/html/vendor/sulu/sulu/src/Sulu/Bundle/CategoryBundle/Resources/translations', '/var/www/html/vendor/sulu/sulu/src/Sulu/Bundle/SnippetBundle/Resources/translations', '/var/www/html/vendor/sulu/sulu/src/Sulu/Bundle/LocationBundle/Resources/translations', '/var/www/html/vendor/sulu/sulu/src/Sulu/Bundle/ActivityBundle/Resources/translations', '/var/www/html/vendor/sulu/sulu/src/Sulu/Bundle/CustomUrlBundle/Resources/translations', '/var/www/html/vendor/sulu/sulu/src/Sulu/Bundle/RouteBundle/Resources/translations', '/var/www/html/vendor/sulu/sulu/src/Sulu/Bundle/PreviewBundle/Resources/translations', '/var/www/html/vendor/sulu/sulu/src/Sulu/Bundle/AudienceTargetingBundle/Resources/translations', '/var/www/html/vendor/sulu/sulu/src/Sulu/Bundle/TrashBundle/Resources/translations', '/var/www/html/vendor/sulu/sulu/src/Sulu/Bundle/ReferenceBundle/Resources/translations', '/var/www/html/vendor/symfony/framework-bundle/translations', '/var/www/html/vendor/symfony/twig-bundle/translations', '/var/www/html/vendor/sulu/sulu/src/Sulu/Bundle/CoreBundle/translations', '/var/www/html/vendor/doctrine/doctrine-bundle/translations', '/var/www/html/vendor/doctrine/phpcr-bundle/src/translations', '/var/www/html/vendor/stof/doctrine-extensions-bundle/src/translations', '/var/www/html/vendor/jms/serializer-bundle/translations', '/var/www/html/vendor/friendsofsymfony/rest-bundle/translations', '/var/www/html/vendor/handcraftedinthealps/rest-routing-bundle/translations', '/var/www/html/vendor/friendsofsymfony/jsrouting-bundle/translations', '/var/www/html/vendor/massive/search-bundle/translations', '/var/www/html/vendor/sulu/sulu/src/Sulu/Bundle/PersistenceBundle/translations', '/var/www/html/vendor/sulu/sulu/src/Sulu/Bundle/TestBundle/translations', '/var/www/html/vendor/sulu/sulu/src/Sulu/Bundle/HttpCacheBundle/translations', '/var/www/html/vendor/sulu/sulu/src/Sulu/Bundle/DocumentManagerBundle/translations', '/var/www/html/vendor/sulu/sulu/src/Sulu/Bundle/HashBundle/translations', '/var/www/html/vendor/sulu/sulu/src/Sulu/Bundle/MarkupBundle/translations', '/var/www/html/vendor/phpcr/phpcr-migrations-bundle/src/translations', '/var/www/html/vendor/doctrine/doctrine-fixtures-bundle/translations', '/var/www/html/vendor/massive/build-bundle/translations', '/var/www/html/vendor/friendsofsymfony/http-cache-bundle/src/translations', '/var/www/html/vendor/symfony/security-bundle/translations', '/var/www/html/src/translations', (\dirname(__DIR__, 5).'/translations')], 'cache_vary' => ['scanned_directories' => ['/var/www/html/vendor/symfony/validator/Resources/translations', '/var/www/html/vendor/symfony/form/Resources/translations', '/var/www/html/vendor/symfony/security-core/Resources/translations', '/var/www/html/vendor/sulu/sulu/src/Sulu/Bundle/AdminBundle/Resources/translations', '/var/www/html/vendor/sulu/sulu/src/Sulu/Bundle/SearchBundle/Resources/translations', '/var/www/html/vendor/sulu/sulu/src/Sulu/Bundle/PageBundle/Resources/translations', '/var/www/html/vendor/sulu/sulu/src/Sulu/Bundle/ContactBundle/Resources/translations', '/var/www/html/vendor/sulu/sulu/src/Sulu/Bundle/SecurityBundle/Resources/translations', '/var/www/html/vendor/sulu/sulu/src/Sulu/Bundle/WebsiteBundle/Resources/translations', '/var/www/html/vendor/sulu/sulu/src/Sulu/Bundle/TagBundle/Resources/translations', '/var/www/html/vendor/sulu/sulu/src/Sulu/Bundle/MediaBundle/Resources/translations', '/var/www/html/vendor/sulu/sulu/src/Sulu/Bundle/CategoryBundle/Resources/translations', '/var/www/html/vendor/sulu/sulu/src/Sulu/Bundle/SnippetBundle/Resources/translations', '/var/www/html/vendor/sulu/sulu/src/Sulu/Bundle/LocationBundle/Resources/translations', '/var/www/html/vendor/sulu/sulu/src/Sulu/Bundle/ActivityBundle/Resources/translations', '/var/www/html/vendor/sulu/sulu/src/Sulu/Bundle/CustomUrlBundle/Resources/translations', '/var/www/html/vendor/sulu/sulu/src/Sulu/Bundle/RouteBundle/Resources/translations', '/var/www/html/vendor/sulu/sulu/src/Sulu/Bundle/PreviewBundle/Resources/translations', '/var/www/html/vendor/sulu/sulu/src/Sulu/Bundle/AudienceTargetingBundle/Resources/translations', '/var/www/html/vendor/sulu/sulu/src/Sulu/Bundle/TrashBundle/Resources/translations', '/var/www/html/vendor/sulu/sulu/src/Sulu/Bundle/ReferenceBundle/Resources/translations', '/var/www/html/vendor/symfony/framework-bundle/translations', '/var/www/html/vendor/symfony/twig-bundle/translations', '/var/www/html/vendor/sulu/sulu/src/Sulu/Bundle/CoreBundle/translations', '/var/www/html/vendor/doctrine/doctrine-bundle/translations', '/var/www/html/vendor/doctrine/phpcr-bundle/src/translations', '/var/www/html/vendor/stof/doctrine-extensions-bundle/src/translations', '/var/www/html/vendor/jms/serializer-bundle/translations', '/var/www/html/vendor/friendsofsymfony/rest-bundle/translations', '/var/www/html/vendor/handcraftedinthealps/rest-routing-bundle/translations', '/var/www/html/vendor/friendsofsymfony/jsrouting-bundle/translations', '/var/www/html/vendor/massive/search-bundle/translations', '/var/www/html/vendor/sulu/sulu/src/Sulu/Bundle/PersistenceBundle/translations', '/var/www/html/vendor/sulu/sulu/src/Sulu/Bundle/TestBundle/translations', '/var/www/html/vendor/sulu/sulu/src/Sulu/Bundle/HttpCacheBundle/translations', '/var/www/html/vendor/sulu/sulu/src/Sulu/Bundle/DocumentManagerBundle/translations', '/var/www/html/vendor/sulu/sulu/src/Sulu/Bundle/HashBundle/translations', '/var/www/html/vendor/sulu/sulu/src/Sulu/Bundle/MarkupBundle/translations', '/var/www/html/vendor/phpcr/phpcr-migrations-bundle/src/translations', '/var/www/html/vendor/doctrine/doctrine-fixtures-bundle/translations', '/var/www/html/vendor/massive/build-bundle/translations', '/var/www/html/vendor/friendsofsymfony/http-cache-bundle/src/translations', '/var/www/html/vendor/symfony/security-bundle/translations', '/var/www/html/src/translations', 'translations']]], []);

        $instance->setConfigCacheFactory(($container->privates['config_cache_factory'] ?? self::getConfigCacheFactoryService($container)));
        $instance->setFallbackLocales(['en']);

        return $instance;
    }

    /**
     * Gets the private '.doctrine.orm.default_metadata_driver' shared service.
     *
     * @return \Doctrine\Bundle\DoctrineBundle\Mapping\MappingDriver
     */
    protected static function get_Doctrine_Orm_DefaultMetadataDriverService($container)
    {
        $a = new \Doctrine\Persistence\Mapping\Driver\MappingDriverChain();

        $b = ($container->privates['doctrine.orm.default_xml_metadata_driver'] ?? self::getDoctrine_Orm_DefaultXmlMetadataDriverService($container));
        $c = ($container->privates['doctrine.orm.default_attribute_metadata_driver'] ??= new \Doctrine\ORM\Mapping\Driver\AttributeDriver(['/var/www/html/vendor/sulu/sulu/src/Sulu/Bundle/CoreBundle/Entity', '/var/www/html/vendor/sulu/sulu/src/Sulu/Bundle/AdminBundle/Entity'], false));

        $a->addDriver($b, 'Sulu\\Bundle\\ReferenceBundle\\Domain\\Model');
        $a->addDriver($b, 'Sulu\\Bundle\\TrashBundle\\Domain\\Model');
        $a->addDriver($b, 'Sulu\\Bundle\\PreviewBundle\\Domain\\Model');
        $a->addDriver($b, 'Sulu\\Bundle\\ActivityBundle\\Domain\\Model');
        $a->addDriver($b, 'Gedmo\\Tree\\Entity');
        $a->addDriver($b, 'Sulu\\Bundle\\ContactBundle\\Entity');
        $a->addDriver($b, 'Sulu\\Bundle\\SecurityBundle\\Entity');
        $a->addDriver($b, 'Sulu\\Bundle\\WebsiteBundle\\Entity');
        $a->addDriver($b, 'Sulu\\Bundle\\TagBundle\\Entity');
        $a->addDriver($b, 'Sulu\\Bundle\\MediaBundle\\Entity');
        $a->addDriver($b, 'Sulu\\Bundle\\CategoryBundle\\Entity');
        $a->addDriver($b, 'Sulu\\Bundle\\RouteBundle\\Entity');
        $a->addDriver($b, 'Sulu\\Bundle\\AudienceTargetingBundle\\Entity');
        $a->addDriver($c, 'Sulu\\Bundle\\CoreBundle\\Entity');
        $a->addDriver($c, 'Sulu\\Bundle\\AdminBundle\\Entity');

        return $container->privates['.doctrine.orm.default_metadata_driver'] = new \Doctrine\Bundle\DoctrineBundle\Mapping\MappingDriver($a, ($container->privates['.service_locator.BxSdgVt'] ?? self::get_ServiceLocator_BxSdgVtService($container)));
    }

    /**
     * Gets the private '.service_locator.BxSdgVt' shared service.
     *
     * @return \Symfony\Component\DependencyInjection\ServiceLocator
     */
    protected static function get_ServiceLocator_BxSdgVtService($container)
    {
        return $container->privates['.service_locator.BxSdgVt'] = new \Symfony\Component\DependencyInjection\Argument\ServiceLocator($container->getService ??= $container->getService(...), [
            'doctrine.ulid_generator' => ['privates', 'doctrine.ulid_generator', 'getDoctrine_UlidGeneratorService', true],
            'doctrine.uuid_generator' => ['privates', 'doctrine.uuid_generator', 'getDoctrine_UuidGeneratorService', true],
        ], [
            'doctrine.ulid_generator' => '?',
            'doctrine.uuid_generator' => '?',
        ]);
    }

    /**
     * Gets the private '.service_locator.G4XF6lP' shared service.
     *
     * @return \Symfony\Component\DependencyInjection\ServiceLocator
     */
    protected static function get_ServiceLocator_G4XF6lPService($container)
    {
        return $container->privates['.service_locator.G4XF6lP'] = new \Symfony\Component\DependencyInjection\Argument\ServiceLocator($container->getService ??= $container->getService(...), [
            'security.firewall.map.context.test' => ['privates', 'security.firewall.map.context.test', 'getSecurity_Firewall_Map_Context_TestService', true],
        ], [
            'security.firewall.map.context.test' => '?',
        ]);
    }

    /**
     * Gets the private '.service_locator.GIuJv7e' shared service.
     *
     * @return \Symfony\Component\DependencyInjection\ServiceLocator
     */
    protected static function get_ServiceLocator_GIuJv7eService($container)
    {
        return $container->privates['.service_locator.GIuJv7e'] = new \Symfony\Component\DependencyInjection\Argument\ServiceLocator($container->getService ??= $container->getService(...), [], []);
    }

    /**
     * Gets the private '.service_locator.dQjDmHZ' shared service.
     *
     * @return \Symfony\Component\DependencyInjection\ServiceLocator
     */
    protected static function get_ServiceLocator_DQjDmHZService($container)
    {
        return $container->privates['.service_locator.dQjDmHZ'] = new \Symfony\Component\DependencyInjection\Argument\ServiceLocator($container->getService ??= $container->getService(...), [
            'pages' => ['privates', 'sulu_page.page_trash_item_handler', 'getSuluPage_PageTrashItemHandlerService', true],
            'accounts' => ['privates', 'sulu_contact.account_trash_item_handler', 'getSuluContact_AccountTrashItemHandlerService', true],
            'contacts' => ['privates', 'sulu_contact.contact_trash_item_handler', 'getSuluContact_ContactTrashItemHandlerService', true],
            'analytics' => ['privates', 'sulu_website.analytics_trash_item_handler', 'getSuluWebsite_AnalyticsTrashItemHandlerService', true],
            'tags' => ['privates', 'sulu_tag.tag_trash_item_handler', 'getSuluTag_TagTrashItemHandlerService', true],
            'media' => ['privates', 'sulu_media.media_trash_item_handler', 'getSuluMedia_MediaTrashItemHandlerService', true],
            'collections' => ['privates', 'sulu_media.collection_trash_item_handler', 'getSuluMedia_CollectionTrashItemHandlerService', true],
            'categories' => ['privates', 'sulu_category.category_trash_item_handler', 'getSuluCategory_CategoryTrashItemHandlerService', true],
            'snippets' => ['privates', 'sulu_snippet.snippet_trash_item_handler', 'getSuluSnippet_SnippetTrashItemHandlerService', true],
            'custom_urls' => ['privates', 'sulu_custom_urls.custom_url_trash_item_handler', 'getSuluCustomUrls_CustomUrlTrashItemHandlerService', true],
        ], [
            'pages' => 'Sulu\\Bundle\\PageBundle\\Trash\\PageTrashItemHandler',
            'accounts' => 'Sulu\\Bundle\\ContactBundle\\Trash\\AccountTrashItemHandler',
            'contacts' => 'Sulu\\Bundle\\ContactBundle\\Trash\\ContactTrashItemHandler',
            'analytics' => 'Sulu\\Bundle\\WebsiteBundle\\Trash\\AnalyticsTrashItemHandler',
            'tags' => 'Sulu\\Bundle\\TagBundle\\Trash\\TagTrashItemHandler',
            'media' => 'Sulu\\Bundle\\MediaBundle\\Trash\\MediaTrashItemHandler',
            'collections' => 'Sulu\\Bundle\\MediaBundle\\Trash\\CollectionTrashItemHandler',
            'categories' => 'Sulu\\Bundle\\CategoryBundle\\Trash\\CategoryTrashItemHandler',
            'snippets' => 'Sulu\\Bundle\\SnippetBundle\\Trash\\SnippetTrashItemHandler',
            'custom_urls' => 'Sulu\\Bundle\\CustomUrlBundle\\Trash\\CustomUrlTrashItemHandler',
        ]);
    }

    /**
     * Gets the private 'argument_metadata_factory' shared service.
     *
     * @return \Symfony\Component\HttpKernel\ControllerMetadata\ArgumentMetadataFactory
     */
    protected static function getArgumentMetadataFactoryService($container)
    {
        return $container->privates['argument_metadata_factory'] = new \Symfony\Component\HttpKernel\ControllerMetadata\ArgumentMetadataFactory();
    }

    /**
     * Gets the private 'argument_resolver' shared service.
     *
     * @return \Symfony\Component\HttpKernel\Controller\ArgumentResolver
     */
    protected static function getArgumentResolverService($container)
    {
        return $container->privates['argument_resolver'] = new \Symfony\Component\HttpKernel\Controller\ArgumentResolver(($container->privates['argument_metadata_factory'] ??= new \Symfony\Component\HttpKernel\ControllerMetadata\ArgumentMetadataFactory()), new RewindableGenerator(function () use ($container) {
            yield 0 => ($container->privates['security.user_value_resolver'] ?? $container->load('getSecurity_UserValueResolverService'));
            yield 1 => ($container->privates['security.security_token_value_resolver'] ?? $container->load('getSecurity_SecurityTokenValueResolverService'));
            yield 2 => ($container->privates['doctrine.orm.entity_value_resolver'] ?? $container->load('getDoctrine_Orm_EntityValueResolverService'));
            yield 3 => ($container->privates['argument_resolver.backed_enum_resolver'] ??= new \Symfony\Component\HttpKernel\Controller\ArgumentResolver\BackedEnumValueResolver());
            yield 4 => ($container->privates['argument_resolver.datetime'] ?? $container->load('getArgumentResolver_DatetimeService'));
            yield 5 => ($container->privates['argument_resolver.request_attribute'] ??= new \Symfony\Component\HttpKernel\Controller\ArgumentResolver\RequestAttributeValueResolver());
            yield 6 => ($container->privates['argument_resolver.request'] ??= new \Symfony\Component\HttpKernel\Controller\ArgumentResolver\RequestValueResolver());
            yield 7 => ($container->privates['argument_resolver.session'] ??= new \Symfony\Component\HttpKernel\Controller\ArgumentResolver\SessionValueResolver());
            yield 8 => ($container->privates['argument_resolver.service'] ?? $container->load('getArgumentResolver_ServiceService'));
            yield 9 => ($container->privates['argument_resolver.default'] ??= new \Symfony\Component\HttpKernel\Controller\ArgumentResolver\DefaultValueResolver());
            yield 10 => ($container->privates['argument_resolver.variadic'] ??= new \Symfony\Component\HttpKernel\Controller\ArgumentResolver\VariadicValueResolver());
        }, 11), new \Symfony\Component\DependencyInjection\Argument\ServiceLocator($container->getService ??= $container->getService(...), [
            'Symfony\\Component\\HttpKernel\\Controller\\ArgumentResolver\\RequestPayloadValueResolver' => ['privates', 'argument_resolver.request_payload', 'getArgumentResolver_RequestPayloadService', false],
            'Symfony\\Component\\HttpKernel\\Controller\\ArgumentResolver\\QueryParameterValueResolver' => ['privates', 'argument_resolver.query_parameter_value_resolver', 'getArgumentResolver_QueryParameterValueResolverService', true],
            'Symfony\\Component\\Security\\Http\\Controller\\UserValueResolver' => ['privates', 'security.user_value_resolver', 'getSecurity_UserValueResolverService', true],
            'Symfony\\Component\\Security\\Http\\Controller\\SecurityTokenValueResolver' => ['privates', 'security.security_token_value_resolver', 'getSecurity_SecurityTokenValueResolverService', true],
            'Symfony\\Bridge\\Doctrine\\ArgumentResolver\\EntityValueResolver' => ['privates', 'doctrine.orm.entity_value_resolver', 'getDoctrine_Orm_EntityValueResolverService', true],
            'Symfony\\Component\\HttpKernel\\Controller\\ArgumentResolver\\BackedEnumValueResolver' => ['privates', 'argument_resolver.backed_enum_resolver', 'getArgumentResolver_BackedEnumResolverService', true],
            'Symfony\\Component\\HttpKernel\\Controller\\ArgumentResolver\\DateTimeValueResolver' => ['privates', 'argument_resolver.datetime', 'getArgumentResolver_DatetimeService', true],
            'Symfony\\Component\\HttpKernel\\Controller\\ArgumentResolver\\RequestAttributeValueResolver' => ['privates', 'argument_resolver.request_attribute', 'getArgumentResolver_RequestAttributeService', true],
            'Symfony\\Component\\HttpKernel\\Controller\\ArgumentResolver\\RequestValueResolver' => ['privates', 'argument_resolver.request', 'getArgumentResolver_RequestService', true],
            'Symfony\\Component\\HttpKernel\\Controller\\ArgumentResolver\\SessionValueResolver' => ['privates', 'argument_resolver.session', 'getArgumentResolver_SessionService', true],
            'Symfony\\Component\\HttpKernel\\Controller\\ArgumentResolver\\ServiceValueResolver' => ['privates', 'argument_resolver.service', 'getArgumentResolver_ServiceService', true],
            'Symfony\\Component\\HttpKernel\\Controller\\ArgumentResolver\\DefaultValueResolver' => ['privates', 'argument_resolver.default', 'getArgumentResolver_DefaultService', true],
            'Symfony\\Component\\HttpKernel\\Controller\\ArgumentResolver\\VariadicValueResolver' => ['privates', 'argument_resolver.variadic', 'getArgumentResolver_VariadicService', true],
        ], [
            'Symfony\\Component\\HttpKernel\\Controller\\ArgumentResolver\\RequestPayloadValueResolver' => 'Symfony\\Component\\HttpKernel\\Controller\\ArgumentResolver\\RequestPayloadValueResolver',
            'Symfony\\Component\\HttpKernel\\Controller\\ArgumentResolver\\QueryParameterValueResolver' => 'Symfony\\Component\\HttpKernel\\Controller\\ArgumentResolver\\QueryParameterValueResolver',
            'Symfony\\Component\\Security\\Http\\Controller\\UserValueResolver' => 'Symfony\\Component\\Security\\Http\\Controller\\UserValueResolver',
            'Symfony\\Component\\Security\\Http\\Controller\\SecurityTokenValueResolver' => 'Symfony\\Component\\Security\\Http\\Controller\\SecurityTokenValueResolver',
            'Symfony\\Bridge\\Doctrine\\ArgumentResolver\\EntityValueResolver' => 'Symfony\\Bridge\\Doctrine\\ArgumentResolver\\EntityValueResolver',
            'Symfony\\Component\\HttpKernel\\Controller\\ArgumentResolver\\BackedEnumValueResolver' => 'Symfony\\Component\\HttpKernel\\Controller\\ArgumentResolver\\BackedEnumValueResolver',
            'Symfony\\Component\\HttpKernel\\Controller\\ArgumentResolver\\DateTimeValueResolver' => 'Symfony\\Component\\HttpKernel\\Controller\\ArgumentResolver\\DateTimeValueResolver',
            'Symfony\\Component\\HttpKernel\\Controller\\ArgumentResolver\\RequestAttributeValueResolver' => 'Symfony\\Component\\HttpKernel\\Controller\\ArgumentResolver\\RequestAttributeValueResolver',
            'Symfony\\Component\\HttpKernel\\Controller\\ArgumentResolver\\RequestValueResolver' => 'Symfony\\Component\\HttpKernel\\Controller\\ArgumentResolver\\RequestValueResolver',
            'Symfony\\Component\\HttpKernel\\Controller\\ArgumentResolver\\SessionValueResolver' => 'Symfony\\Component\\HttpKernel\\Controller\\ArgumentResolver\\SessionValueResolver',
            'Symfony\\Component\\HttpKernel\\Controller\\ArgumentResolver\\ServiceValueResolver' => 'Symfony\\Component\\HttpKernel\\Controller\\ArgumentResolver\\ServiceValueResolver',
            'Symfony\\Component\\HttpKernel\\Controller\\ArgumentResolver\\DefaultValueResolver' => 'Symfony\\Component\\HttpKernel\\Controller\\ArgumentResolver\\DefaultValueResolver',
            'Symfony\\Component\\HttpKernel\\Controller\\ArgumentResolver\\VariadicValueResolver' => 'Symfony\\Component\\HttpKernel\\Controller\\ArgumentResolver\\VariadicValueResolver',
        ]));
    }

    /**
     * Gets the private 'argument_resolver.request_payload' shared service.
     *
     * @return \Symfony\Component\HttpKernel\Controller\ArgumentResolver\RequestPayloadValueResolver
     */
    protected static function getArgumentResolver_RequestPayloadService($container, $lazyLoad = true)
    {
        if (true === $lazyLoad) {
            return $container->privates['argument_resolver.request_payload'] = $container->createProxy('RequestPayloadValueResolverGhost42384b8', static fn () => \RequestPayloadValueResolverGhost42384b8::createLazyGhost(static fn ($proxy) => self::getArgumentResolver_RequestPayloadService($container, $proxy)));
        }

        return ($lazyLoad->__construct(($container->privates['serializer'] ?? self::getSerializerService($container)), ($container->privates['validator'] ?? self::getValidatorService($container)), ($container->services['translator'] ?? self::getTranslatorService($container)), 'validators') && false ?: $lazyLoad);
    }

    /**
     * Gets the private 'cache.doctrine.orm.default.metadata' shared service.
     *
     * @return \Symfony\Component\Cache\Adapter\ArrayAdapter
     */
    protected static function getCache_Doctrine_Orm_Default_MetadataService($container)
    {
        return $container->privates['cache.doctrine.orm.default.metadata'] = new \Symfony\Component\Cache\Adapter\ArrayAdapter();
    }

    /**
     * Gets the private 'cache.doctrine.orm.default.query' shared service.
     *
     * @return \Symfony\Component\Cache\Adapter\ArrayAdapter
     */
    protected static function getCache_Doctrine_Orm_Default_QueryService($container)
    {
        return $container->privates['cache.doctrine.orm.default.query'] = new \Symfony\Component\Cache\Adapter\ArrayAdapter();
    }

    /**
     * Gets the private 'cache.doctrine.orm.default.result' shared service.
     *
     * @return \Symfony\Component\Cache\Adapter\ArrayAdapter
     */
    protected static function getCache_Doctrine_Orm_Default_ResultService($container)
    {
        return $container->privates['cache.doctrine.orm.default.result'] = new \Symfony\Component\Cache\Adapter\ArrayAdapter();
    }

    /**
     * Gets the private 'cache.property_access' shared service.
     *
     * @return \Symfony\Component\Cache\Adapter\ArrayAdapter
     */
    protected static function getCache_PropertyAccessService($container)
    {
        return $container->privates['cache.property_access'] = new \Symfony\Component\Cache\Adapter\ArrayAdapter(0, false);
    }

    /**
     * Gets the private 'clock' shared service.
     *
     * @return \Symfony\Component\Clock\Clock
     */
    protected static function getClockService($container)
    {
        return $container->privates['clock'] = new \Symfony\Component\Clock\Clock();
    }

    /**
     * Gets the private 'config_cache_factory' shared service.
     *
     * @return \Symfony\Component\Config\ResourceCheckerConfigCacheFactory
     */
    protected static function getConfigCacheFactoryService($container)
    {
        return $container->privates['config_cache_factory'] = new \Symfony\Component\Config\ResourceCheckerConfigCacheFactory(new RewindableGenerator(function () use ($container) {
            yield 0 => ($container->privates['dependency_injection.config.container_parameters_resource_checker'] ??= new \Symfony\Component\DependencyInjection\Config\ContainerParametersResourceChecker($container));
            yield 1 => ($container->privates['config.resource.self_checking_resource_checker'] ??= new \Symfony\Component\Config\Resource\SelfCheckingResourceChecker());
        }, 2));
    }

    /**
     * Gets the private 'controller.cache_attribute_listener' shared service.
     *
     * @return \Symfony\Component\HttpKernel\EventListener\CacheAttributeListener
     */
    protected static function getController_CacheAttributeListenerService($container)
    {
        return $container->privates['controller.cache_attribute_listener'] = new \Symfony\Component\HttpKernel\EventListener\CacheAttributeListener();
    }

    /**
     * Gets the private 'controller.is_csrf_token_valid_attribute_listener' shared service.
     *
     * @return \Symfony\Component\Security\Http\EventListener\IsCsrfTokenValidAttributeListener
     */
    protected static function getController_IsCsrfTokenValidAttributeListenerService($container)
    {
        return $container->privates['controller.is_csrf_token_valid_attribute_listener'] = new \Symfony\Component\Security\Http\EventListener\IsCsrfTokenValidAttributeListener(($container->privates['security.csrf.token_manager'] ?? self::getSecurity_Csrf_TokenManagerService($container)), ($container->privates['security.is_csrf_token_valid_attribute_expression_language'] ?? self::getSecurity_IsCsrfTokenValidAttributeExpressionLanguageService($container)));
    }

    /**
     * Gets the private 'controller.is_granted_attribute_listener' shared service.
     *
     * @return \Symfony\Component\Security\Http\EventListener\IsGrantedAttributeListener
     */
    protected static function getController_IsGrantedAttributeListenerService($container)
    {
        $a = ($container->services['jms_serializer.authorization_checker'] ?? self::getJmsSerializer_AuthorizationCheckerService($container));

        if (isset($container->privates['controller.is_granted_attribute_listener'])) {
            return $container->privates['controller.is_granted_attribute_listener'];
        }

        return $container->privates['controller.is_granted_attribute_listener'] = new \Symfony\Component\Security\Http\EventListener\IsGrantedAttributeListener($a, ($container->privates['security.is_granted_attribute_expression_language'] ?? self::getSecurity_IsGrantedAttributeExpressionLanguageService($container)));
    }

    /**
     * Gets the private 'controller_resolver' shared service.
     *
     * @return \Symfony\Bundle\FrameworkBundle\Controller\ControllerResolver
     */
    protected static function getControllerResolverService($container)
    {
        $container->privates['controller_resolver'] = $instance = new \Symfony\Bundle\FrameworkBundle\Controller\ControllerResolver($container, ($container->privates['logger'] ?? self::getLoggerService($container)));

        $instance->allowControllers(['Symfony\\Bundle\\FrameworkBundle\\Controller\\AbstractController', 'Symfony\\Bundle\\FrameworkBundle\\Controller\\TemplateController']);
        $instance->allowControllers(['Doctrine\\Bundle\\DoctrineBundle\\Controller\\ProfilerController']);

        return $instance;
    }

    /**
     * Gets the private 'debug.debug_handlers_listener' shared service.
     *
     * @return \Symfony\Component\HttpKernel\EventListener\DebugHandlersListener
     */
    protected static function getDebug_DebugHandlersListenerService($container)
    {
        return $container->privates['debug.debug_handlers_listener'] = new \Symfony\Component\HttpKernel\EventListener\DebugHandlersListener(NULL, $container->getEnv('bool:default::key:web:default:kernel.runtime_mode:'));
    }

    /**
     * Gets the private 'debug.security.access.decision_manager' shared service.
     *
     * @return \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager
     */
    protected static function getDebug_Security_Access_DecisionManagerService($container)
    {
        $a = ($container->privates['debug.security.access.decision_manager.inner'] ?? self::getDebug_Security_Access_DecisionManager_InnerService($container));

        if (isset($container->privates['debug.security.access.decision_manager'])) {
            return $container->privates['debug.security.access.decision_manager'];
        }

        return $container->privates['debug.security.access.decision_manager'] = new \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager($a);
    }

    /**
     * Gets the private 'debug.security.access.decision_manager.inner' shared service.
     *
     * @return \Symfony\Component\Security\Core\Authorization\AccessDecisionManager
     */
    protected static function getDebug_Security_Access_DecisionManager_InnerService($container)
    {
        return $container->privates['debug.security.access.decision_manager.inner'] = new \Symfony\Component\Security\Core\Authorization\AccessDecisionManager(new RewindableGenerator(function () use ($container) {
            yield 0 => ($container->privates['.debug.security.voter.security.access.authenticated_voter'] ?? $container->load('get_Debug_Security_Voter_Security_Access_AuthenticatedVoterService'));
            yield 1 => ($container->privates['.debug.security.voter.security.access.simple_role_voter'] ?? $container->load('get_Debug_Security_Voter_Security_Access_SimpleRoleVoterService'));
            yield 2 => ($container->privates['.debug.security.voter.security.access.expression_voter'] ?? $container->load('get_Debug_Security_Voter_Security_Access_ExpressionVoterService'));
            yield 3 => ($container->privates['.debug.security.voter.security.access.closure_voter'] ?? $container->load('get_Debug_Security_Voter_Security_Access_ClosureVoterService'));
            yield 4 => ($container->privates['.debug.security.voter.sulu_security.security_context_voter'] ?? $container->load('get_Debug_Security_Voter_SuluSecurity_SecurityContextVoterService'));
            yield 5 => ($container->privates['.debug.security.voter.test_voter'] ?? $container->load('get_Debug_Security_Voter_TestVoterService'));
        }, 6), new \Symfony\Component\Security\Core\Authorization\Strategy\AffirmativeStrategy(false));
    }

    /**
     * Gets the private 'debug.security.firewall' shared service.
     *
     * @return \Symfony\Bundle\SecurityBundle\Debug\TraceableFirewallListener
     */
    protected static function getDebug_Security_FirewallService($container)
    {
        $a = ($container->services['event_dispatcher'] ?? self::getEventDispatcherService($container));

        if (isset($container->privates['debug.security.firewall'])) {
            return $container->privates['debug.security.firewall'];
        }

        return $container->privates['debug.security.firewall'] = new \Symfony\Bundle\SecurityBundle\Debug\TraceableFirewallListener(($container->privates['security.firewall.map'] ?? self::getSecurity_Firewall_MapService($container)), $a, ($container->privates['security.logout_url_generator'] ?? self::getSecurity_LogoutUrlGeneratorService($container)));
    }

    /**
     * Gets the private 'disallow_search_engine_index_response_listener' shared service.
     *
     * @return \Symfony\Component\HttpKernel\EventListener\DisallowRobotsIndexingListener
     */
    protected static function getDisallowSearchEngineIndexResponseListenerService($container)
    {
        return $container->privates['disallow_search_engine_index_response_listener'] = new \Symfony\Component\HttpKernel\EventListener\DisallowRobotsIndexingListener();
    }

    /**
     * Gets the private 'doctrine.dbal.connection_expiries' shared service.
     *
     * @return \ArrayObject
     */
    protected static function getDoctrine_Dbal_ConnectionExpiriesService($container)
    {
        return $container->privates['doctrine.dbal.connection_expiries'] = new \ArrayObject();
    }

    /**
     * Gets the private 'doctrine.dbal.connection_factory' shared service.
     *
     * @return \Doctrine\Bundle\DoctrineBundle\ConnectionFactory
     */
    protected static function getDoctrine_Dbal_ConnectionFactoryService($container)
    {
        return $container->privates['doctrine.dbal.connection_factory'] = new \Doctrine\Bundle\DoctrineBundle\ConnectionFactory($container->parameters['doctrine.dbal.connection_factory.types'], ($container->privates['doctrine.dbal.connection_factory.dsn_parser'] ?? self::getDoctrine_Dbal_ConnectionFactory_DsnParserService($container)));
    }

    /**
     * Gets the private 'doctrine.dbal.connection_factory.dsn_parser' shared service.
     *
     * @return \Doctrine\DBAL\Tools\DsnParser
     */
    protected static function getDoctrine_Dbal_ConnectionFactory_DsnParserService($container)
    {
        return $container->privates['doctrine.dbal.connection_factory.dsn_parser'] = new \Doctrine\DBAL\Tools\DsnParser(['db2' => 'ibm_db2', 'mssql' => 'pdo_sqlsrv', 'mysql' => 'pdo_mysql', 'mysql2' => 'pdo_mysql', 'postgres' => 'pdo_pgsql', 'postgresql' => 'pdo_pgsql', 'pgsql' => 'pdo_pgsql', 'sqlite' => 'pdo_sqlite', 'sqlite3' => 'pdo_sqlite']);
    }

    /**
     * Gets the private 'doctrine.dbal.debug_middleware.default' shared service.
     *
     * @return \Doctrine\Bundle\DoctrineBundle\Middleware\DebugMiddleware
     */
    protected static function getDoctrine_Dbal_DebugMiddleware_DefaultService($container)
    {
        $container->privates['doctrine.dbal.debug_middleware.default'] = $instance = new \Doctrine\Bundle\DoctrineBundle\Middleware\DebugMiddleware(($container->privates['doctrine.debug_data_holder'] ??= new \Doctrine\Bundle\DoctrineBundle\Middleware\BacktraceDebugDataHolder([])), NULL);

        $instance->setConnectionName('default');

        return $instance;
    }

    /**
     * Gets the private 'doctrine.dbal.default_connection.configuration' shared service.
     *
     * @return \Doctrine\DBAL\Configuration
     */
    protected static function getDoctrine_Dbal_DefaultConnection_ConfigurationService($container)
    {
        $container->privates['doctrine.dbal.default_connection.configuration'] = $instance = new \Doctrine\DBAL\Configuration();

        $instance->setSchemaManagerFactory(($container->privates['doctrine.dbal.legacy_schema_manager_factory'] ??= new \Doctrine\DBAL\Schema\LegacySchemaManagerFactory()));
        $instance->setMiddlewares([($container->privates['doctrine.dbal.debug_middleware.default'] ?? self::getDoctrine_Dbal_DebugMiddleware_DefaultService($container)), ($container->privates['doctrine.dbal.idle_connection_middleware.default'] ?? self::getDoctrine_Dbal_IdleConnectionMiddleware_DefaultService($container))]);

        return $instance;
    }

    /**
     * Gets the private 'doctrine.dbal.default_connection.event_manager' shared service.
     *
     * @return \Symfony\Bridge\Doctrine\ContainerAwareEventManager
     */
    protected static function getDoctrine_Dbal_DefaultConnection_EventManagerService($container)
    {
        return $container->privates['doctrine.dbal.default_connection.event_manager'] = new \Symfony\Bridge\Doctrine\ContainerAwareEventManager(new \Symfony\Component\DependencyInjection\Argument\ServiceLocator($container->getService ??= $container->getService(...), [
            'sulu.persistence.event_subscriber.orm.metadata' => ['privates', 'sulu.persistence.event_subscriber.orm.metadata', 'getSulu_Persistence_EventSubscriber_Orm_MetadataService', true],
            'sulu.persistence.event_subscriber.orm.user_blame' => ['privates', 'sulu.persistence.event_subscriber.orm.user_blame', 'getSulu_Persistence_EventSubscriber_Orm_UserBlameService', true],
            'sulu_media.media_audience_targeting_subscriber' => ['privates', 'sulu_media.media_audience_targeting_subscriber', 'getSuluMedia_MediaAudienceTargetingSubscriberService', true],
            'sulu_core.doctrine.references' => ['privates', 'sulu_core.doctrine.references', 'getSuluCore_Doctrine_ReferencesService', true],
            'doctrine.orm.listeners.resolve_target_entity' => ['privates', 'doctrine.orm.listeners.resolve_target_entity', 'getDoctrine_Orm_Listeners_ResolveTargetEntityService', true],
            'doctrine.orm.listeners.doctrine_dbal_cache_adapter_schema_listener' => ['privates', 'doctrine.orm.listeners.doctrine_dbal_cache_adapter_schema_listener', 'getDoctrine_Orm_Listeners_DoctrineDbalCacheAdapterSchemaListenerService', true],
            'doctrine.orm.listeners.doctrine_token_provider_schema_listener' => ['privates', 'doctrine.orm.listeners.doctrine_token_provider_schema_listener', 'getDoctrine_Orm_Listeners_DoctrineTokenProviderSchemaListenerService', true],
            'doctrine.orm.listeners.pdo_session_handler_schema_listener' => ['privates', 'doctrine.orm.listeners.pdo_session_handler_schema_listener', 'getDoctrine_Orm_Listeners_PdoSessionHandlerSchemaListenerService', true],
            'doctrine.orm.listeners.lock_store_schema_listener' => ['privates', 'doctrine.orm.listeners.lock_store_schema_listener', 'getDoctrine_Orm_Listeners_LockStoreSchemaListenerService', true],
            'doctrine.orm.default_listeners.attach_entity_listeners' => ['privates', 'doctrine.orm.default_listeners.attach_entity_listeners', 'getDoctrine_Orm_DefaultListeners_AttachEntityListenersService', true],
            'doctrine_phpcr.jackalope_doctrine_dbal.schema_listener' => ['privates', 'doctrine_phpcr.jackalope_doctrine_dbal.schema_listener', 'getDoctrinePhpcr_JackalopeDoctrineDbal_SchemaListenerService', true],
            'stof_doctrine_extensions.listener.tree' => ['privates', 'stof_doctrine_extensions.listener.tree', 'getStofDoctrineExtensions_Listener_TreeService', true],
            'sulu.persistence.event_subscriber.orm.timestampable' => ['privates', 'sulu.persistence.event_subscriber.orm.timestampable', 'getSulu_Persistence_EventSubscriber_Orm_TimestampableService', true],
            'sulu_contact.account_listener' => ['privates', 'sulu_contact.account_listener', 'getSuluContact_AccountListenerService', true],
            'sulu_contact.doctrine.invalidation_listener' => ['privates', 'sulu_contact.doctrine.invalidation_listener', 'getSuluContact_Doctrine_InvalidationListenerService', true],
            'sulu_security.permission_inheritance_subscriber' => ['privates', 'sulu_security.permission_inheritance_subscriber', 'getSuluSecurity_PermissionInheritanceSubscriberService', true],
            'sulu_media.doctrine.invalidation_listener' => ['privates', 'sulu_media.doctrine.invalidation_listener', 'getSuluMedia_Doctrine_InvalidationListenerService', true],
            'sulu_activity.domain_event_collector_subscriber' => ['privates', 'sulu_activity.domain_event_collector_subscriber', 'getSuluActivity_DomainEventCollectorSubscriberService', true],
        ], [
            'sulu.persistence.event_subscriber.orm.metadata' => '?',
            'sulu.persistence.event_subscriber.orm.user_blame' => '?',
            'sulu_media.media_audience_targeting_subscriber' => '?',
            'sulu_core.doctrine.references' => '?',
            'doctrine.orm.listeners.resolve_target_entity' => '?',
            'doctrine.orm.listeners.doctrine_dbal_cache_adapter_schema_listener' => '?',
            'doctrine.orm.listeners.doctrine_token_provider_schema_listener' => '?',
            'doctrine.orm.listeners.pdo_session_handler_schema_listener' => '?',
            'doctrine.orm.listeners.lock_store_schema_listener' => '?',
            'doctrine.orm.default_listeners.attach_entity_listeners' => '?',
            'doctrine_phpcr.jackalope_doctrine_dbal.schema_listener' => '?',
            'stof_doctrine_extensions.listener.tree' => '?',
            'sulu.persistence.event_subscriber.orm.timestampable' => '?',
            'sulu_contact.account_listener' => '?',
            'sulu_contact.doctrine.invalidation_listener' => '?',
            'sulu_security.permission_inheritance_subscriber' => '?',
            'sulu_media.doctrine.invalidation_listener' => '?',
            'sulu_activity.domain_event_collector_subscriber' => '?',
        ]), [[['loadClassMetadata'], 'sulu.persistence.event_subscriber.orm.metadata'], [['loadClassMetadata'], 'sulu.persistence.event_subscriber.orm.user_blame'], [['onFlush'], 'sulu.persistence.event_subscriber.orm.user_blame'], [['loadClassMetadata'], 'sulu_media.media_audience_targeting_subscriber'], [['postGenerateSchemaTable'], 'sulu_core.doctrine.references'], [['loadClassMetadata'], 'sulu_core.doctrine.references'], [['loadClassMetadata'], 'doctrine.orm.listeners.resolve_target_entity'], [['onClassMetadataNotFound'], 'doctrine.orm.listeners.resolve_target_entity'], [['postGenerateSchema'], 'doctrine.orm.listeners.doctrine_dbal_cache_adapter_schema_listener'], [['postGenerateSchema'], 'doctrine.orm.listeners.doctrine_token_provider_schema_listener'], [['postGenerateSchema'], 'doctrine.orm.listeners.pdo_session_handler_schema_listener'], [['postGenerateSchema'], 'doctrine.orm.listeners.lock_store_schema_listener'], [['loadClassMetadata'], 'doctrine.orm.default_listeners.attach_entity_listeners'], [['postGenerateSchema'], 'doctrine_phpcr.jackalope_doctrine_dbal.schema_listener'], [['prePersist'], 'stof_doctrine_extensions.listener.tree'], [['preRemove'], 'stof_doctrine_extensions.listener.tree'], [['preUpdate'], 'stof_doctrine_extensions.listener.tree'], [['onFlush'], 'stof_doctrine_extensions.listener.tree'], [['loadClassMetadata'], 'stof_doctrine_extensions.listener.tree'], [['postPersist'], 'stof_doctrine_extensions.listener.tree'], [['postUpdate'], 'stof_doctrine_extensions.listener.tree'], [['postRemove'], 'stof_doctrine_extensions.listener.tree'], [['loadClassMetadata'], 'sulu.persistence.event_subscriber.orm.timestampable'], [['preUpdate'], 'sulu.persistence.event_subscriber.orm.timestampable'], [['prePersist'], 'sulu.persistence.event_subscriber.orm.timestampable'], [['postPersist'], 'sulu_contact.account_listener'], [['postPersist'], 'sulu_contact.doctrine.invalidation_listener'], [['postUpdate'], 'sulu_contact.doctrine.invalidation_listener'], [['preRemove'], 'sulu_contact.doctrine.invalidation_listener'], [['postPersist'], 'sulu_security.permission_inheritance_subscriber'], [['postPersist'], 'sulu_media.doctrine.invalidation_listener'], [['postUpdate'], 'sulu_media.doctrine.invalidation_listener'], [['preRemove'], 'sulu_media.doctrine.invalidation_listener'], [['onClear'], 'sulu_activity.domain_event_collector_subscriber'], [['postFlush'], 'sulu_activity.domain_event_collector_subscriber']]);
    }

    /**
     * Gets the private 'doctrine.dbal.idle_connection_listener' shared service.
     *
     * @return \Symfony\Bridge\Doctrine\Middleware\IdleConnection\Listener
     */
    protected static function getDoctrine_Dbal_IdleConnectionListenerService($container)
    {
        return $container->privates['doctrine.dbal.idle_connection_listener'] = new \Symfony\Bridge\Doctrine\Middleware\IdleConnection\Listener(($container->privates['doctrine.dbal.connection_expiries'] ??= new \ArrayObject()), $container);
    }

    /**
     * Gets the private 'doctrine.dbal.idle_connection_middleware.default' shared service.
     *
     * @return \Doctrine\Bundle\DoctrineBundle\Middleware\IdleConnectionMiddleware
     */
    protected static function getDoctrine_Dbal_IdleConnectionMiddleware_DefaultService($container)
    {
        $container->privates['doctrine.dbal.idle_connection_middleware.default'] = $instance = new \Doctrine\Bundle\DoctrineBundle\Middleware\IdleConnectionMiddleware(($container->privates['doctrine.dbal.connection_expiries'] ??= new \ArrayObject()), ['default' => 600]);

        $instance->setConnectionName('default');

        return $instance;
    }

    /**
     * Gets the private 'doctrine.dbal.legacy_schema_manager_factory' shared service.
     *
     * @return \Doctrine\DBAL\Schema\LegacySchemaManagerFactory
     */
    protected static function getDoctrine_Dbal_LegacySchemaManagerFactoryService($container)
    {
        return $container->privates['doctrine.dbal.legacy_schema_manager_factory'] = new \Doctrine\DBAL\Schema\LegacySchemaManagerFactory();
    }

    /**
     * Gets the private 'doctrine.debug_data_holder' shared service.
     *
     * @return \Doctrine\Bundle\DoctrineBundle\Middleware\BacktraceDebugDataHolder
     */
    protected static function getDoctrine_DebugDataHolderService($container)
    {
        return $container->privates['doctrine.debug_data_holder'] = new \Doctrine\Bundle\DoctrineBundle\Middleware\BacktraceDebugDataHolder([]);
    }

    /**
     * Gets the private 'doctrine.orm.container_repository_factory' shared service.
     *
     * @return \Doctrine\Bundle\DoctrineBundle\Repository\ContainerRepositoryFactory
     */
    protected static function getDoctrine_Orm_ContainerRepositoryFactoryService($container)
    {
        return $container->privates['doctrine.orm.container_repository_factory'] = new \Doctrine\Bundle\DoctrineBundle\Repository\ContainerRepositoryFactory(($container->privates['.service_locator.GIuJv7e'] ??= new \Symfony\Component\DependencyInjection\Argument\ServiceLocator($container->getService ??= $container->getService(...), [], [])));
    }

    /**
     * Gets the private 'doctrine.orm.default_attribute_metadata_driver' shared service.
     *
     * @return \Doctrine\ORM\Mapping\Driver\AttributeDriver
     */
    protected static function getDoctrine_Orm_DefaultAttributeMetadataDriverService($container)
    {
        return $container->privates['doctrine.orm.default_attribute_metadata_driver'] = new \Doctrine\ORM\Mapping\Driver\AttributeDriver(['/var/www/html/vendor/sulu/sulu/src/Sulu/Bundle/CoreBundle/Entity', '/var/www/html/vendor/sulu/sulu/src/Sulu/Bundle/AdminBundle/Entity'], false);
    }

    /**
     * Gets the private 'doctrine.orm.default_configuration' shared service.
     *
     * @return \Doctrine\ORM\Configuration
     */
    protected static function getDoctrine_Orm_DefaultConfigurationService($container)
    {
        $container->privates['doctrine.orm.default_configuration'] = $instance = new \Doctrine\ORM\Configuration();

        $instance->setEntityNamespaces(['SuluReferenceBundle' => 'Sulu\\Bundle\\ReferenceBundle\\Domain\\Model', 'SuluTrashBundle' => 'Sulu\\Bundle\\TrashBundle\\Domain\\Model', 'SuluPreviewBundle' => 'Sulu\\Bundle\\PreviewBundle\\Domain\\Model', 'SuluActivityBundle' => 'Sulu\\Bundle\\ActivityBundle\\Domain\\Model', 'GedmoTree' => 'Gedmo\\Tree\\Entity', 'SuluCoreBundle' => 'Sulu\\Bundle\\CoreBundle\\Entity', 'SuluAdminBundle' => 'Sulu\\Bundle\\AdminBundle\\Entity', 'SuluContactBundle' => 'Sulu\\Bundle\\ContactBundle\\Entity', 'SuluSecurityBundle' => 'Sulu\\Bundle\\SecurityBundle\\Entity', 'SuluWebsiteBundle' => 'Sulu\\Bundle\\WebsiteBundle\\Entity', 'SuluTagBundle' => 'Sulu\\Bundle\\TagBundle\\Entity', 'SuluMediaBundle' => 'Sulu\\Bundle\\MediaBundle\\Entity', 'SuluCategoryBundle' => 'Sulu\\Bundle\\CategoryBundle\\Entity', 'SuluRouteBundle' => 'Sulu\\Bundle\\RouteBundle\\Entity', 'SuluAudienceTargetingBundle' => 'Sulu\\Bundle\\AudienceTargetingBundle\\Entity']);
        $instance->setMetadataCache(($container->privates['cache.doctrine.orm.default.metadata'] ??= new \Symfony\Component\Cache\Adapter\ArrayAdapter()));
        $instance->setQueryCache(($container->privates['cache.doctrine.orm.default.query'] ??= new \Symfony\Component\Cache\Adapter\ArrayAdapter()));
        $instance->setResultCache(($container->privates['cache.doctrine.orm.default.result'] ??= new \Symfony\Component\Cache\Adapter\ArrayAdapter()));
        $instance->setMetadataDriverImpl(($container->privates['.doctrine.orm.default_metadata_driver'] ?? self::get_Doctrine_Orm_DefaultMetadataDriverService($container)));
        $instance->setProxyDir(($container->targetDir.''.'/doctrine/orm/Proxies'));
        $instance->setProxyNamespace('Proxies');
        $instance->setAutoGenerateProxyClasses(true);
        $instance->setSchemaIgnoreClasses([]);
        $instance->setClassMetadataFactoryName('Doctrine\\Bundle\\DoctrineBundle\\Mapping\\ClassMetadataFactory');
        $instance->setDefaultRepositoryClassName('Doctrine\\ORM\\EntityRepository');
        $instance->setNamingStrategy(($container->privates['doctrine.orm.naming_strategy.underscore'] ??= new \Doctrine\ORM\Mapping\UnderscoreNamingStrategy()));
        $instance->setQuoteStrategy(($container->privates['doctrine.orm.quote_strategy.default'] ??= new \Doctrine\ORM\Mapping\DefaultQuoteStrategy()));
        $instance->setTypedFieldMapper(($container->privates['doctrine.orm.typed_field_mapper.default'] ??= new \Doctrine\ORM\Mapping\DefaultTypedFieldMapper()));
        $instance->setEntityListenerResolver(($container->privates['doctrine.orm.default_entity_listener_resolver'] ??= new \Doctrine\Bundle\DoctrineBundle\Mapping\ContainerEntityListenerResolver($container)));
        $instance->setLazyGhostObjectEnabled(false);
        $instance->setIdentityGenerationPreferences([]);
        $instance->setRepositoryFactory(($container->privates['doctrine.orm.container_repository_factory'] ?? self::getDoctrine_Orm_ContainerRepositoryFactoryService($container)));
        $instance->addCustomStringFunction('group_concat', 'Oro\\ORM\\Query\\AST\\Functions\\String\\GroupConcat');
        $instance->addCustomStringFunction('CAST', 'Oro\\ORM\\Query\\AST\\Functions\\Cast');

        return $instance;
    }

    /**
     * Gets the private 'doctrine.orm.default_entity_listener_resolver' shared service.
     *
     * @return \Doctrine\Bundle\DoctrineBundle\Mapping\ContainerEntityListenerResolver
     */
    protected static function getDoctrine_Orm_DefaultEntityListenerResolverService($container)
    {
        return $container->privates['doctrine.orm.default_entity_listener_resolver'] = new \Doctrine\Bundle\DoctrineBundle\Mapping\ContainerEntityListenerResolver($container);
    }

    /**
     * Gets the private 'doctrine.orm.default_entity_manager.validator_loader' shared service.
     *
     * @return \Symfony\Bridge\Doctrine\Validator\DoctrineLoader
     */
    protected static function getDoctrine_Orm_DefaultEntityManager_ValidatorLoaderService($container)
    {
        $a = ($container->services['doctrine.orm.default_entity_manager'] ?? self::getDoctrine_Orm_DefaultEntityManagerService($container));

        if (isset($container->privates['doctrine.orm.default_entity_manager.validator_loader'])) {
            return $container->privates['doctrine.orm.default_entity_manager.validator_loader'];
        }

        return $container->privates['doctrine.orm.default_entity_manager.validator_loader'] = new \Symfony\Bridge\Doctrine\Validator\DoctrineLoader($a, NULL);
    }

    /**
     * Gets the private 'doctrine.orm.default_manager_configurator' shared service.
     *
     * @return \Doctrine\Bundle\DoctrineBundle\ManagerConfigurator
     */
    protected static function getDoctrine_Orm_DefaultManagerConfiguratorService($container)
    {
        return $container->privates['doctrine.orm.default_manager_configurator'] = new \Doctrine\Bundle\DoctrineBundle\ManagerConfigurator([], []);
    }

    /**
     * Gets the private 'doctrine.orm.default_xml_metadata_driver' shared service.
     *
     * @return \Doctrine\ORM\Mapping\Driver\SimplifiedXmlDriver
     */
    protected static function getDoctrine_Orm_DefaultXmlMetadataDriverService($container)
    {
        $container->privates['doctrine.orm.default_xml_metadata_driver'] = $instance = new \Doctrine\ORM\Mapping\Driver\SimplifiedXmlDriver(['/var/www/html/vendor/sulu/sulu/src/Sulu/Bundle/ReferenceBundle/Resources/config/doctrine' => 'Sulu\\Bundle\\ReferenceBundle\\Domain\\Model', '/var/www/html/vendor/sulu/sulu/src/Sulu/Bundle/TrashBundle/Resources/config/doctrine' => 'Sulu\\Bundle\\TrashBundle\\Domain\\Model', '/var/www/html/vendor/sulu/sulu/src/Sulu/Bundle/PreviewBundle/Resources/config/doctrine' => 'Sulu\\Bundle\\PreviewBundle\\Domain\\Model', '/var/www/html/vendor/sulu/sulu/src/Sulu/Bundle/ActivityBundle/Resources/config/doctrine' => 'Sulu\\Bundle\\ActivityBundle\\Domain\\Model', '/var/www/html/vendor/gedmo/doctrine-extensions/src/Tree/Entity' => 'Gedmo\\Tree\\Entity', '/var/www/html/vendor/sulu/sulu/src/Sulu/Bundle/ContactBundle/Resources/config/doctrine' => 'Sulu\\Bundle\\ContactBundle\\Entity', '/var/www/html/vendor/sulu/sulu/src/Sulu/Bundle/SecurityBundle/Resources/config/doctrine' => 'Sulu\\Bundle\\SecurityBundle\\Entity', '/var/www/html/vendor/sulu/sulu/src/Sulu/Bundle/WebsiteBundle/Resources/config/doctrine' => 'Sulu\\Bundle\\WebsiteBundle\\Entity', '/var/www/html/vendor/sulu/sulu/src/Sulu/Bundle/TagBundle/Resources/config/doctrine' => 'Sulu\\Bundle\\TagBundle\\Entity', '/var/www/html/vendor/sulu/sulu/src/Sulu/Bundle/MediaBundle/Resources/config/doctrine' => 'Sulu\\Bundle\\MediaBundle\\Entity', '/var/www/html/vendor/sulu/sulu/src/Sulu/Bundle/CategoryBundle/Resources/config/doctrine' => 'Sulu\\Bundle\\CategoryBundle\\Entity', '/var/www/html/vendor/sulu/sulu/src/Sulu/Bundle/RouteBundle/Resources/config/doctrine' => 'Sulu\\Bundle\\RouteBundle\\Entity', '/var/www/html/vendor/sulu/sulu/src/Sulu/Bundle/AudienceTargetingBundle/Resources/config/doctrine' => 'Sulu\\Bundle\\AudienceTargetingBundle\\Entity'], '.orm.xml', false);

        $instance->setGlobalBasename('mapping');

        return $instance;
    }

    /**
     * Gets the private 'doctrine.orm.naming_strategy.underscore' shared service.
     *
     * @return \Doctrine\ORM\Mapping\UnderscoreNamingStrategy
     */
    protected static function getDoctrine_Orm_NamingStrategy_UnderscoreService($container)
    {
        return $container->privates['doctrine.orm.naming_strategy.underscore'] = new \Doctrine\ORM\Mapping\UnderscoreNamingStrategy();
    }

    /**
     * Gets the private 'doctrine.orm.quote_strategy.default' shared service.
     *
     * @return \Doctrine\ORM\Mapping\DefaultQuoteStrategy
     */
    protected static function getDoctrine_Orm_QuoteStrategy_DefaultService($container)
    {
        return $container->privates['doctrine.orm.quote_strategy.default'] = new \Doctrine\ORM\Mapping\DefaultQuoteStrategy();
    }

    /**
     * Gets the private 'doctrine.orm.typed_field_mapper.default' shared service.
     *
     * @return \Doctrine\ORM\Mapping\DefaultTypedFieldMapper
     */
    protected static function getDoctrine_Orm_TypedFieldMapper_DefaultService($container)
    {
        return $container->privates['doctrine.orm.typed_field_mapper.default'] = new \Doctrine\ORM\Mapping\DefaultTypedFieldMapper();
    }

    /**
     * Gets the private 'doctrine.orm.validator_initializer' shared service.
     *
     * @return \Symfony\Bridge\Doctrine\Validator\DoctrineInitializer
     */
    protected static function getDoctrine_Orm_ValidatorInitializerService($container)
    {
        return $container->privates['doctrine.orm.validator_initializer'] = new \Symfony\Bridge\Doctrine\Validator\DoctrineInitializer(($container->services['doctrine'] ?? self::getDoctrineService($container)));
    }

    /**
     * Gets the private 'doctrine_phpcr.default_credentials' shared service.
     *
     * @return \PHPCR\SimpleCredentials
     */
    protected static function getDoctrinePhpcr_DefaultCredentialsService($container)
    {
        return $container->privates['doctrine_phpcr.default_credentials'] = new \PHPCR\SimpleCredentials($container->getEnv('PHPCR_USERNAME'), $container->getEnv('PHPCR_PASSWORD'));
    }

    /**
     * Gets the private 'doctrine_phpcr.jackalope.repository.default' shared service.
     *
     * @return \Jackalope\Repository
     */
    protected static function getDoctrinePhpcr_Jackalope_Repository_DefaultService($container)
    {
        $a = ($container->services['doctrine.dbal.default_connection'] ?? self::getDoctrine_Dbal_DefaultConnectionService($container));

        if (isset($container->privates['doctrine_phpcr.jackalope.repository.default'])) {
            return $container->privates['doctrine_phpcr.jackalope.repository.default'];
        }

        return $container->privates['doctrine_phpcr.jackalope.repository.default'] = ($container->privates['doctrine_phpcr.jackalope.repository.factory.service.doctrinedbal'] ??= new \Jackalope\RepositoryFactoryDoctrineDBAL())->getRepository(['jackalope.doctrine_dbal_connection' => $a, 'jackalope.check_login_on_server' => false]);
    }

    /**
     * Gets the private 'doctrine_phpcr.jackalope.repository.factory.service.doctrinedbal' shared service.
     *
     * @return \Jackalope\RepositoryFactoryDoctrineDBAL
     */
    protected static function getDoctrinePhpcr_Jackalope_Repository_Factory_Service_DoctrinedbalService($container)
    {
        return $container->privates['doctrine_phpcr.jackalope.repository.factory.service.doctrinedbal'] = new \Jackalope\RepositoryFactoryDoctrineDBAL();
    }

    /**
     * Gets the private 'exception_listener' shared service.
     *
     * @return \Symfony\Component\HttpKernel\EventListener\ErrorListener
     */
    protected static function getExceptionListenerService($container)
    {
        return $container->privates['exception_listener'] = new \Symfony\Component\HttpKernel\EventListener\ErrorListener('error_controller', ($container->privates['logger'] ?? self::getLoggerService($container)), true, [], []);
    }

    /**
     * Gets the private 'file_locator' shared service.
     *
     * @return \Symfony\Component\HttpKernel\Config\FileLocator
     */
    protected static function getFileLocatorService($container)
    {
        return $container->privates['file_locator'] = new \Symfony\Component\HttpKernel\Config\FileLocator(($container->services['kernel'] ?? $container->get('kernel', 1)));
    }

    /**
     * Gets the private 'filesystem' shared service.
     *
     * @return \Symfony\Component\Filesystem\Filesystem
     */
    protected static function getFilesystemService($container)
    {
        return $container->privates['filesystem'] = new \Symfony\Component\Filesystem\Filesystem();
    }

    /**
     * Gets the private 'fos_http_cache.event_listener.attributes' shared service.
     *
     * @return \FOS\HttpCacheBundle\EventListener\AttributesListener
     */
    protected static function getFosHttpCache_EventListener_AttributesService($container)
    {
        return $container->privates['fos_http_cache.event_listener.attributes'] = new \FOS\HttpCacheBundle\EventListener\AttributesListener(($container->privates['controller_resolver'] ?? self::getControllerResolverService($container)));
    }

    /**
     * Gets the private 'fos_rest.body_listener' shared service.
     *
     * @return \FOS\RestBundle\EventListener\BodyListener
     */
    protected static function getFosRest_BodyListenerService($container)
    {
        $container->privates['fos_rest.body_listener'] = $instance = new \FOS\RestBundle\EventListener\BodyListener(($container->privates['fos_rest.decoder_provider'] ?? self::getFosRest_DecoderProviderService($container)), false);

        $instance->setDefaultFormat(NULL);

        return $instance;
    }

    /**
     * Gets the private 'fos_rest.decoder_provider' shared service.
     *
     * @return \FOS\RestBundle\Decoder\ContainerDecoderProvider
     */
    protected static function getFosRest_DecoderProviderService($container)
    {
        return $container->privates['fos_rest.decoder_provider'] = new \FOS\RestBundle\Decoder\ContainerDecoderProvider(new \Symfony\Component\DependencyInjection\Argument\ServiceLocator($container->getService ??= $container->getService(...), [
            'fos_rest.decoder.json' => ['privates', 'fos_rest.decoder.json', 'getFosRest_Decoder_JsonService', true],
            'fos_rest.decoder.xml' => ['privates', 'fos_rest.decoder.xml', 'getFosRest_Decoder_XmlService', true],
        ], [
            'fos_rest.decoder.json' => '?',
            'fos_rest.decoder.xml' => '?',
        ]), ['json' => 'fos_rest.decoder.json', 'xml' => 'fos_rest.decoder.xml']);
    }

    /**
     * Gets the private 'fos_rest.exception.codes_map' shared service.
     *
     * @return \FOS\RestBundle\Util\ExceptionValueMap
     */
    protected static function getFosRest_Exception_CodesMapService($container)
    {
        return $container->privates['fos_rest.exception.codes_map'] = new \FOS\RestBundle\Util\ExceptionValueMap(['Sulu\\Bundle\\ReferenceBundle\\Domain\\Exception\\ReferenceNotFoundException' => 404, 'Sulu\\Bundle\\TrashBundle\\Domain\\Exception\\TrashItemNotFoundException' => 404, 'Sulu\\Component\\DocumentManager\\Exception\\DocumentNotFoundException' => 404, 'Sulu\\Component\\CustomUrl\\Manager\\TitleAlreadyExistsException' => 400, 'Sulu\\Component\\CustomUrl\\Generator\\MissingDomainPartException' => 400, 'Sulu\\Component\\CustomUrl\\Manager\\RouteNotRemovableException' => 420, 'Sulu\\Component\\DocumentManager\\Exception\\VersionNotFoundException' => 404, 'Sulu\\Component\\Content\\Exception\\MandatoryPropertyException' => 400, 'Sulu\\Bundle\\CategoryBundle\\Exception\\CategoryIdNotFoundException' => 404, 'Sulu\\Bundle\\CategoryBundle\\Exception\\CategoryKeyNotFoundException' => 404, 'Sulu\\Bundle\\CategoryBundle\\Exception\\CategoryKeyNotUniqueException' => 409, 'Sulu\\Bundle\\CategoryBundle\\Exception\\CategoryNameMissingException' => 400, 'Sulu\\Bundle\\CategoryBundle\\Exception\\KeywordIsMultipleReferencedException' => 409, 'Sulu\\Bundle\\CategoryBundle\\Exception\\KeywordNotUniqueException' => 409, 'Sulu\\Bundle\\MediaBundle\\Media\\Exception\\MediaNotFoundException' => 404, 'Sulu\\Bundle\\MediaBundle\\Media\\Exception\\FileVersionNotFoundException' => 404, 'Sulu\\Bundle\\MediaBundle\\Media\\Exception\\FormatNotFoundException' => 404, 'Sulu\\Bundle\\MediaBundle\\Media\\Exception\\FormatOptionsMissingParameterException' => 400, 'Sulu\\Bundle\\MediaBundle\\Media\\Exception\\MediaException' => 400, 'Sulu\\Bundle\\SecurityBundle\\Exception\\RoleNameAlreadyExistsException' => 409, 'Sulu\\Bundle\\SecurityBundle\\Exception\\RoleKeyAlreadyExistsException' => 409, 'Sulu\\Bundle\\SecurityBundle\\Security\\Exception\\UsernameNotUniqueException' => 409, 'Sulu\\Bundle\\SecurityBundle\\Security\\Exception\\EmailNotUniqueException' => 409, 'Sulu\\Component\\Content\\Exception\\ResourceLocatorAlreadyExistsException' => 409, 'Sulu\\Bundle\\AdminBundle\\Exception\\MetadataNotFoundException' => 404, 'Sulu\\Bundle\\AdminBundle\\Exception\\MetadataProviderNotFoundException' => 404, 'Sulu\\Component\\Rest\\Exception\\MissingArgumentException' => 400, 'Sulu\\Component\\Rest\\Exception\\MissingParameterException' => 400, 'Sulu\\Component\\Rest\\Exception\\InvalidHashException' => 409, 'Sulu\\Component\\Rest\\Csv\\ObjectNotSupportedException' => 406, 'Sulu\\Component\\Rest\\ListBuilder\\Filter\\InvalidFilterTypeOptionsException' => 400, 'Sulu\\Component\\Rest\\Exception\\RemoveDependantResourcesFoundExceptionInterface' => 409, 'Sulu\\Component\\Rest\\Exception\\InsufficientDescendantPermissionsException' => 403, 'Sulu\\Component\\Rest\\Exception\\ReferencingResourcesFoundExceptionInterface' => 409]);
    }

    /**
     * Gets the private 'fos_rest.exception.messages_map' shared service.
     *
     * @return \FOS\RestBundle\Util\ExceptionValueMap
     */
    protected static function getFosRest_Exception_MessagesMapService($container)
    {
        return $container->privates['fos_rest.exception.messages_map'] = new \FOS\RestBundle\Util\ExceptionValueMap([]);
    }

    /**
     * Gets the private 'fos_rest.exception.response_status_code_listener' shared service.
     *
     * @return \FOS\RestBundle\EventListener\ResponseStatusCodeListener
     */
    protected static function getFosRest_Exception_ResponseStatusCodeListenerService($container)
    {
        return $container->privates['fos_rest.exception.response_status_code_listener'] = new \FOS\RestBundle\EventListener\ResponseStatusCodeListener(($container->privates['fos_rest.exception.codes_map'] ?? self::getFosRest_Exception_CodesMapService($container)));
    }

    /**
     * Gets the private 'fos_rest.serializer.form_error_normalizer' shared service.
     *
     * @return \FOS\RestBundle\Serializer\Normalizer\FormErrorNormalizer
     */
    protected static function getFosRest_Serializer_FormErrorNormalizerService($container)
    {
        return $container->privates['fos_rest.serializer.form_error_normalizer'] = new \FOS\RestBundle\Serializer\Normalizer\FormErrorNormalizer();
    }

    /**
     * Gets the private 'fragment.listener' shared service.
     *
     * @return \Symfony\Component\HttpKernel\EventListener\FragmentListener
     */
    protected static function getFragment_ListenerService($container)
    {
        return $container->privates['fragment.listener'] = new \Symfony\Component\HttpKernel\EventListener\FragmentListener(($container->privates['uri_signer'] ?? self::getUriSignerService($container)), '/admin/_fragments');
    }

    /**
     * Gets the private 'identity_translator' shared service.
     *
     * @return \Symfony\Component\Translation\IdentityTranslator
     */
    protected static function getIdentityTranslatorService($container)
    {
        return $container->privates['identity_translator'] = new \Symfony\Component\Translation\IdentityTranslator();
    }

    /**
     * Gets the private 'locale_aware_listener' shared service.
     *
     * @return \Symfony\Component\HttpKernel\EventListener\LocaleAwareListener
     */
    protected static function getLocaleAwareListenerService($container)
    {
        return $container->privates['locale_aware_listener'] = new \Symfony\Component\HttpKernel\EventListener\LocaleAwareListener(new RewindableGenerator(function () use ($container) {
            yield 0 => ($container->privates['slugger'] ??= new \Symfony\Component\String\Slugger\AsciiSlugger('en'));
            yield 1 => ($container->services['translator'] ?? self::getTranslatorService($container));
            yield 2 => ($container->privates['translation.locale_switcher'] ?? $container->load('getTranslation_LocaleSwitcherService'));
        }, 3), ($container->services['request_stack'] ??= new \Symfony\Component\HttpFoundation\RequestStack()));
    }

    /**
     * Gets the private 'locale_listener' shared service.
     *
     * @return \Symfony\Component\HttpKernel\EventListener\LocaleListener
     */
    protected static function getLocaleListenerService($container)
    {
        return $container->privates['locale_listener'] = new \Symfony\Component\HttpKernel\EventListener\LocaleListener(($container->services['request_stack'] ??= new \Symfony\Component\HttpFoundation\RequestStack()), 'en', ($container->services['router'] ?? self::getRouterService($container)), false, []);
    }

    /**
     * Gets the private 'logger' shared service.
     *
     * @return \Symfony\Component\HttpKernel\Log\Logger
     */
    protected static function getLoggerService($container)
    {
        return $container->privates['logger'] = new \Symfony\Component\HttpKernel\Log\Logger(NULL, NULL, NULL, ($container->services['request_stack'] ??= new \Symfony\Component\HttpFoundation\RequestStack()), $container->getEnv('bool:default::key:web:default:kernel.runtime_mode:'));
    }

    /**
     * Gets the private 'mime_types' shared service.
     *
     * @return \Symfony\Component\Mime\MimeTypes
     */
    protected static function getMimeTypesService($container)
    {
        $container->privates['mime_types'] = $instance = new \Symfony\Component\Mime\MimeTypes();

        $instance->setDefault($instance);

        return $instance;
    }

    /**
     * Gets the private 'parameter_bag' shared service.
     *
     * @return \Symfony\Component\DependencyInjection\ParameterBag\ContainerBag
     */
    protected static function getParameterBagService($container)
    {
        return $container->privates['parameter_bag'] = new \Symfony\Component\DependencyInjection\ParameterBag\ContainerBag($container);
    }

    /**
     * Gets the private 'property_accessor' shared service.
     *
     * @return \Symfony\Component\PropertyAccess\PropertyAccessor
     */
    protected static function getPropertyAccessorService($container)
    {
        $a = ($container->privates['property_info.reflection_extractor'] ??= new \Symfony\Component\PropertyInfo\Extractor\ReflectionExtractor());

        return $container->privates['property_accessor'] = new \Symfony\Component\PropertyAccess\PropertyAccessor(3, 2, ($container->privates['cache.property_access'] ??= new \Symfony\Component\Cache\Adapter\ArrayAdapter(0, false)), $a, $a);
    }

    /**
     * Gets the private 'property_info' shared service.
     *
     * @return \Symfony\Component\PropertyInfo\PropertyInfoExtractor
     */
    protected static function getPropertyInfoService($container)
    {
        return $container->privates['property_info'] = new \Symfony\Component\PropertyInfo\PropertyInfoExtractor(new RewindableGenerator(function () use ($container) {
            yield 0 => ($container->privates['property_info.serializer_extractor'] ?? $container->load('getPropertyInfo_SerializerExtractorService'));
            yield 1 => ($container->privates['property_info.reflection_extractor'] ??= new \Symfony\Component\PropertyInfo\Extractor\ReflectionExtractor());
            yield 2 => ($container->privates['doctrine.orm.default_entity_manager.property_info_extractor'] ?? $container->load('getDoctrine_Orm_DefaultEntityManager_PropertyInfoExtractorService'));
        }, 3), new RewindableGenerator(function () use ($container) {
            yield 0 => ($container->privates['doctrine.orm.default_entity_manager.property_info_extractor'] ?? $container->load('getDoctrine_Orm_DefaultEntityManager_PropertyInfoExtractorService'));
            yield 1 => ($container->privates['property_info.reflection_extractor'] ??= new \Symfony\Component\PropertyInfo\Extractor\ReflectionExtractor());
        }, 2), new RewindableGenerator(fn () => new \EmptyIterator(), 0), new RewindableGenerator(function () use ($container) {
            yield 0 => ($container->privates['doctrine.orm.default_entity_manager.property_info_extractor'] ?? $container->load('getDoctrine_Orm_DefaultEntityManager_PropertyInfoExtractorService'));
            yield 1 => ($container->privates['property_info.reflection_extractor'] ??= new \Symfony\Component\PropertyInfo\Extractor\ReflectionExtractor());
        }, 2), new RewindableGenerator(function () use ($container) {
            yield 0 => ($container->privates['property_info.reflection_extractor'] ??= new \Symfony\Component\PropertyInfo\Extractor\ReflectionExtractor());
        }, 1));
    }

    /**
     * Gets the private 'property_info.reflection_extractor' shared service.
     *
     * @return \Symfony\Component\PropertyInfo\Extractor\ReflectionExtractor
     */
    protected static function getPropertyInfo_ReflectionExtractorService($container)
    {
        return $container->privates['property_info.reflection_extractor'] = new \Symfony\Component\PropertyInfo\Extractor\ReflectionExtractor();
    }

    /**
     * Gets the private 'response_listener' shared service.
     *
     * @return \Symfony\Component\HttpKernel\EventListener\ResponseListener
     */
    protected static function getResponseListenerService($container)
    {
        return $container->privates['response_listener'] = new \Symfony\Component\HttpKernel\EventListener\ResponseListener('UTF-8', false);
    }

    /**
     * Gets the private 'router.expression_language_provider' shared service.
     *
     * @return \Symfony\Component\Routing\Matcher\ExpressionLanguageProvider
     */
    protected static function getRouter_ExpressionLanguageProviderService($container)
    {
        return $container->privates['router.expression_language_provider'] = new \Symfony\Component\Routing\Matcher\ExpressionLanguageProvider(new \Symfony\Component\DependencyInjection\Argument\ServiceLocator($container->getService ??= $container->getService(...), [
            'env' => ['privates', 'container.getenv', 'getContainer_GetenvService', true],
            'service' => ['services', 'container.get_routing_condition_service', 'getContainer_GetRoutingConditionServiceService', true],
        ], [
            'env' => 'Closure',
            'service' => 'Closure',
        ]));
    }

    /**
     * Gets the private 'router.request_context' shared service.
     *
     * @return \Symfony\Component\Routing\RequestContext
     */
    protected static function getRouter_RequestContextService($container)
    {
        $container->privates['router.request_context'] = $instance = \Symfony\Component\Routing\RequestContext::fromUri('', 'localhost', 'http', 80, 443);

        $instance->setParameter('_functions', ($container->privates['router.expression_language_provider'] ?? self::getRouter_ExpressionLanguageProviderService($container)));

        return $instance;
    }

    /**
     * Gets the private 'security.authentication.trust_resolver' shared service.
     *
     * @return \Symfony\Component\Security\Core\Authentication\AuthenticationTrustResolver
     */
    protected static function getSecurity_Authentication_TrustResolverService($container)
    {
        return $container->privates['security.authentication.trust_resolver'] = new \Symfony\Component\Security\Core\Authentication\AuthenticationTrustResolver();
    }

    /**
     * Gets the private 'security.context_listener.0' shared service.
     *
     * @return \Symfony\Component\Security\Http\Firewall\ContextListener
     */
    protected static function getSecurity_ContextListener_0Service($container)
    {
        return $container->privates['security.context_listener.0'] = new \Symfony\Component\Security\Http\Firewall\ContextListener(($container->privates['security.untracked_token_storage'] ??= new \Symfony\Component\Security\Core\Authentication\Token\Storage\TokenStorage()), new RewindableGenerator(function () use ($container) {
            yield 0 => ($container->services['test_user_provider'] ?? $container->load('getTestUserProviderService'));
        }, 1), 'test', ($container->privates['logger'] ?? self::getLoggerService($container)), ($container->privates['security.event_dispatcher.test'] ?? self::getSecurity_EventDispatcher_TestService($container)), ($container->privates['security.authentication.trust_resolver'] ??= new \Symfony\Component\Security\Core\Authentication\AuthenticationTrustResolver()), [($container->privates['security.token_storage'] ?? self::getSecurity_TokenStorageService($container)), 'enableUsageTracking']);
    }

    /**
     * Gets the private 'security.csrf.token_generator' shared service.
     *
     * @return \Symfony\Component\Security\Csrf\TokenGenerator\UriSafeTokenGenerator
     */
    protected static function getSecurity_Csrf_TokenGeneratorService($container)
    {
        return $container->privates['security.csrf.token_generator'] = new \Symfony\Component\Security\Csrf\TokenGenerator\UriSafeTokenGenerator();
    }

    /**
     * Gets the private 'security.csrf.token_manager' shared service.
     *
     * @return \Symfony\Component\Security\Csrf\CsrfTokenManager
     */
    protected static function getSecurity_Csrf_TokenManagerService($container)
    {
        return $container->privates['security.csrf.token_manager'] = new \Symfony\Component\Security\Csrf\CsrfTokenManager(($container->privates['security.csrf.token_generator'] ??= new \Symfony\Component\Security\Csrf\TokenGenerator\UriSafeTokenGenerator()), ($container->privates['security.csrf.token_storage'] ?? self::getSecurity_Csrf_TokenStorageService($container)), ($container->services['request_stack'] ??= new \Symfony\Component\HttpFoundation\RequestStack()));
    }

    /**
     * Gets the private 'security.csrf.token_storage' shared service.
     *
     * @return \Symfony\Component\Security\Csrf\TokenStorage\SessionTokenStorage
     */
    protected static function getSecurity_Csrf_TokenStorageService($container)
    {
        return $container->privates['security.csrf.token_storage'] = new \Symfony\Component\Security\Csrf\TokenStorage\SessionTokenStorage(($container->services['request_stack'] ??= new \Symfony\Component\HttpFoundation\RequestStack()));
    }

    /**
     * Gets the private 'security.event_dispatcher.test' shared service.
     *
     * @return \Symfony\Component\EventDispatcher\EventDispatcher
     */
    protected static function getSecurity_EventDispatcher_TestService($container)
    {
        $container->privates['security.event_dispatcher.test'] = $instance = new \Symfony\Component\EventDispatcher\EventDispatcher();

        $instance->addListener('Symfony\\Component\\Security\\Http\\Event\\LoginSuccessEvent', [#[\Closure(name: 'security.listener.session.test', class: 'Symfony\\Component\\Security\\Http\\EventListener\\SessionStrategyListener')] fn () => ($container->privates['security.listener.session.test'] ?? $container->load('getSecurity_Listener_Session_TestService')), 'onSuccessfulLogin'], 0);
        $instance->addListener('Symfony\\Component\\Security\\Http\\Event\\CheckPassportEvent', [#[\Closure(name: 'security.listener.user_checker.test', class: 'Symfony\\Component\\Security\\Http\\EventListener\\UserCheckerListener')] fn () => ($container->privates['security.listener.user_checker.test'] ?? $container->load('getSecurity_Listener_UserChecker_TestService')), 'preCheckCredentials'], 256);
        $instance->addListener('security.authentication.success', [#[\Closure(name: 'security.listener.user_checker.test', class: 'Symfony\\Component\\Security\\Http\\EventListener\\UserCheckerListener')] fn () => ($container->privates['security.listener.user_checker.test'] ?? $container->load('getSecurity_Listener_UserChecker_TestService')), 'postCheckCredentials'], 256);
        $instance->addListener('Symfony\\Component\\Security\\Http\\Event\\CheckPassportEvent', [#[\Closure(name: 'security.listener.user_provider', class: 'Symfony\\Component\\Security\\Http\\EventListener\\UserProviderListener')] fn () => ($container->privates['security.listener.user_provider'] ?? $container->load('getSecurity_Listener_UserProviderService')), 'checkPassport'], 1024);
        $instance->addListener('Symfony\\Component\\Security\\Http\\Event\\LogoutEvent', [#[\Closure(name: 'sulu_security.logout_event_subscriber', class: 'Sulu\\Bundle\\SecurityBundle\\EventListener\\LogoutEventSubscriber')] fn () => ($container->privates['sulu_security.logout_event_subscriber'] ?? $container->load('getSuluSecurity_LogoutEventSubscriberService')), 'onLogout'], 64);
        $instance->addListener('security.interactive_login', [#[\Closure(name: 'sulu_security.last_login_listener', class: 'Sulu\\Bundle\\SecurityBundle\\EventListener\\LastLoginListener')] fn () => ($container->privates['sulu_security.last_login_listener'] ?? $container->load('getSuluSecurity_LastLoginListenerService')), 'onSecurityInteractiveLogin'], 0);
        $instance->addListener('Symfony\\Component\\Security\\Http\\Event\\CheckPassportEvent', [#[\Closure(name: 'security.listener.check_authenticator_credentials', class: 'Symfony\\Component\\Security\\Http\\EventListener\\CheckCredentialsListener')] fn () => ($container->privates['security.listener.check_authenticator_credentials'] ?? $container->load('getSecurity_Listener_CheckAuthenticatorCredentialsService')), 'checkPassport'], 0);
        $instance->addListener('Symfony\\Component\\Security\\Http\\Event\\LoginSuccessEvent', [#[\Closure(name: 'security.listener.password_migrating', class: 'Symfony\\Component\\Security\\Http\\EventListener\\PasswordMigratingListener')] fn () => ($container->privates['security.listener.password_migrating'] ?? $container->load('getSecurity_Listener_PasswordMigratingService')), 'onLoginSuccess'], 0);
        $instance->addListener('Symfony\\Component\\Security\\Http\\Event\\CheckPassportEvent', [#[\Closure(name: 'security.listener.csrf_protection', class: 'Symfony\\Component\\Security\\Http\\EventListener\\CsrfProtectionListener')] fn () => ($container->privates['security.listener.csrf_protection'] ?? $container->load('getSecurity_Listener_CsrfProtectionService')), 'checkPassport'], 512);
        $instance->addListener('Symfony\\Component\\Security\\Http\\Event\\LogoutEvent', [#[\Closure(name: 'security.logout.listener.csrf_token_clearing', class: 'Symfony\\Component\\Security\\Http\\EventListener\\CsrfTokenClearingLogoutListener')] fn () => ($container->privates['security.logout.listener.csrf_token_clearing'] ?? $container->load('getSecurity_Logout_Listener_CsrfTokenClearingService')), 'onLogout'], 0);

        return $instance;
    }

    /**
     * Gets the private 'security.firewall.map' shared service.
     *
     * @return \Symfony\Bundle\SecurityBundle\Security\FirewallMap
     */
    protected static function getSecurity_Firewall_MapService($container)
    {
        $a = ($container->privates['.service_locator.G4XF6lP'] ?? self::get_ServiceLocator_G4XF6lPService($container));

        if (isset($container->privates['security.firewall.map'])) {
            return $container->privates['security.firewall.map'];
        }

        return $container->privates['security.firewall.map'] = new \Symfony\Bundle\SecurityBundle\Security\FirewallMap($a, new RewindableGenerator(function () use ($container) {
            yield 'security.firewall.map.context.test' => NULL;
        }, 1));
    }

    /**
     * Gets the private 'security.helper' shared service.
     *
     * @return \Symfony\Bundle\SecurityBundle\Security
     */
    protected static function getSecurity_HelperService($container)
    {
        return $container->privates['security.helper'] = new \Symfony\Bundle\SecurityBundle\Security(new \Symfony\Component\DependencyInjection\Argument\ServiceLocator($container->getService ??= $container->getService(...), [
            'security.token_storage' => ['privates', 'security.token_storage', 'getSecurity_TokenStorageService', false],
            'security.authorization_checker' => ['services', 'jms_serializer.authorization_checker', 'getJmsSerializer_AuthorizationCheckerService', false],
            'security.user_authorization_checker' => ['services', 'jms_serializer.authorization_checker', 'getJmsSerializer_AuthorizationCheckerService', false],
            'security.authenticator.managers_locator' => ['privates', 'security.authenticator.managers_locator', 'getSecurity_Authenticator_ManagersLocatorService', true],
            'request_stack' => ['services', 'request_stack', 'getRequestStackService', false],
            'security.firewall.map' => ['privates', 'security.firewall.map', 'getSecurity_Firewall_MapService', false],
            'security.user_checker_locator' => ['privates', 'security.user_checker_locator', 'getSecurity_UserCheckerLocatorService', true],
            'security.firewall.event_dispatcher_locator' => ['privates', 'security.firewall.event_dispatcher_locator', 'getSecurity_Firewall_EventDispatcherLocatorService', true],
            'security.csrf.token_manager' => ['privates', 'security.csrf.token_manager', 'getSecurity_Csrf_TokenManagerService', false],
        ], [
            'security.token_storage' => '?',
            'security.authorization_checker' => '?',
            'security.user_authorization_checker' => '?',
            'security.authenticator.managers_locator' => '?',
            'request_stack' => '?',
            'security.firewall.map' => '?',
            'security.user_checker_locator' => '?',
            'security.firewall.event_dispatcher_locator' => '?',
            'security.csrf.token_manager' => '?',
        ]), ['test' => new \Symfony\Component\DependencyInjection\Argument\ServiceLocator($container->getService ??= $container->getService(...), [
            'security.authenticator.http_basic.test' => ['privates', 'security.authenticator.http_basic.test', 'getSecurity_Authenticator_HttpBasic_TestService', true],
        ], [
            'security.authenticator.http_basic.test' => '?',
        ])]);
    }

    /**
     * Gets the private 'security.is_csrf_token_valid_attribute_expression_language' shared service.
     *
     * @return \Symfony\Component\ExpressionLanguage\ExpressionLanguage
     */
    protected static function getSecurity_IsCsrfTokenValidAttributeExpressionLanguageService($container)
    {
        return $container->privates['security.is_csrf_token_valid_attribute_expression_language'] = new \Symfony\Component\ExpressionLanguage\ExpressionLanguage(($container->services['cache.security_is_csrf_token_valid_attribute_expression_language'] ?? self::getCache_SecurityIsCsrfTokenValidAttributeExpressionLanguageService($container)));
    }

    /**
     * Gets the private 'security.is_granted_attribute_expression_language' shared service.
     *
     * @return \Symfony\Component\ExpressionLanguage\ExpressionLanguage
     */
    protected static function getSecurity_IsGrantedAttributeExpressionLanguageService($container)
    {
        return $container->privates['security.is_granted_attribute_expression_language'] = new \Symfony\Component\ExpressionLanguage\ExpressionLanguage(($container->services['cache.security_is_granted_attribute_expression_language'] ?? self::getCache_SecurityIsGrantedAttributeExpressionLanguageService($container)));
    }

    /**
     * Gets the private 'security.logout_url_generator' shared service.
     *
     * @return \Symfony\Component\Security\Http\Logout\LogoutUrlGenerator
     */
    protected static function getSecurity_LogoutUrlGeneratorService($container)
    {
        return $container->privates['security.logout_url_generator'] = new \Symfony\Component\Security\Http\Logout\LogoutUrlGenerator(($container->services['request_stack'] ??= new \Symfony\Component\HttpFoundation\RequestStack()), ($container->services['router'] ?? self::getRouterService($container)), ($container->privates['security.token_storage'] ?? self::getSecurity_TokenStorageService($container)));
    }

    /**
     * Gets the private 'security.token_storage' shared service.
     *
     * @return \Symfony\Component\Security\Core\Authentication\Token\Storage\UsageTrackingTokenStorage
     */
    protected static function getSecurity_TokenStorageService($container)
    {
        return $container->privates['security.token_storage'] = new \Symfony\Component\Security\Core\Authentication\Token\Storage\UsageTrackingTokenStorage(($container->privates['security.untracked_token_storage'] ??= new \Symfony\Component\Security\Core\Authentication\Token\Storage\TokenStorage()), new \Symfony\Component\DependencyInjection\Argument\ServiceLocator($container->getService ??= $container->getService(...), [
            'request_stack' => ['services', 'request_stack', 'getRequestStackService', false],
        ], [
            'request_stack' => '?',
        ]));
    }

    /**
     * Gets the private 'security.untracked_token_storage' shared service.
     *
     * @return \Symfony\Component\Security\Core\Authentication\Token\Storage\TokenStorage
     */
    protected static function getSecurity_UntrackedTokenStorageService($container)
    {
        return $container->privates['security.untracked_token_storage'] = new \Symfony\Component\Security\Core\Authentication\Token\Storage\TokenStorage();
    }

    /**
     * Gets the private 'serializer' shared service.
     *
     * @return \Symfony\Component\Serializer\Serializer
     */
    protected static function getSerializerService($container)
    {
        $a = ($container->privates['serializer.normalizer.mime_message'] ?? self::getSerializer_Normalizer_MimeMessageService($container));

        if (isset($container->privates['serializer'])) {
            return $container->privates['serializer'];
        }

        return $container->privates['serializer'] = new \Symfony\Component\Serializer\Serializer([($container->privates['serializer.denormalizer.unwrapping'] ?? self::getSerializer_Denormalizer_UnwrappingService($container)), ($container->privates['fos_rest.serializer.form_error_normalizer'] ??= new \FOS\RestBundle\Serializer\Normalizer\FormErrorNormalizer()), ($container->privates['sulu_core.rest.flatten_exception_normalizer'] ?? self::getSuluCore_Rest_FlattenExceptionNormalizerService($container)), ($container->privates['serializer.normalizer.problem'] ?? self::getSerializer_Normalizer_ProblemService($container)), ($container->privates['serializer.normalizer.uid'] ??= new \Symfony\Component\Serializer\Normalizer\UidNormalizer([])), ($container->privates['serializer.normalizer.datetime'] ??= new \Symfony\Component\Serializer\Normalizer\DateTimeNormalizer([])), ($container->privates['serializer.normalizer.constraint_violation_list'] ?? self::getSerializer_Normalizer_ConstraintViolationListService($container)), $a, ($container->privates['serializer.normalizer.datetimezone'] ??= new \Symfony\Component\Serializer\Normalizer\DateTimeZoneNormalizer()), ($container->privates['serializer.normalizer.dateinterval'] ??= new \Symfony\Component\Serializer\Normalizer\DateIntervalNormalizer([])), ($container->privates['serializer.normalizer.form_error'] ??= new \Symfony\Component\Serializer\Normalizer\FormErrorNormalizer()), ($container->privates['serializer.normalizer.backed_enum'] ??= new \Symfony\Component\Serializer\Normalizer\BackedEnumNormalizer()), ($container->privates['serializer.normalizer.number'] ??= new \Symfony\Component\Serializer\Normalizer\NumberNormalizer()), ($container->privates['serializer.normalizer.data_uri'] ?? self::getSerializer_Normalizer_DataUriService($container)), ($container->privates['serializer.normalizer.translatable'] ?? self::getSerializer_Normalizer_TranslatableService($container)), ($container->privates['serializer.normalizer.json_serializable'] ??= new \Symfony\Component\Serializer\Normalizer\JsonSerializableNormalizer(NULL, NULL, [])), ($container->privates['serializer.denormalizer.array'] ??= new \Symfony\Component\Serializer\Normalizer\ArrayDenormalizer()), ($container->privates['serializer.normalizer.object'] ?? self::getSerializer_Normalizer_ObjectService($container))], [($container->privates['serializer.encoder.xml'] ??= new \Symfony\Component\Serializer\Encoder\XmlEncoder([])), ($container->privates['serializer.encoder.json'] ??= new \Symfony\Component\Serializer\Encoder\JsonEncoder(NULL, NULL, [])), ($container->privates['serializer.encoder.yaml'] ??= new \Symfony\Component\Serializer\Encoder\YamlEncoder(NULL, NULL, [])), ($container->privates['serializer.encoder.csv'] ??= new \Symfony\Component\Serializer\Encoder\CsvEncoder([]))], []);
    }

    /**
     * Gets the private 'serializer.denormalizer.array' shared service.
     *
     * @return \Symfony\Component\Serializer\Normalizer\ArrayDenormalizer
     */
    protected static function getSerializer_Denormalizer_ArrayService($container)
    {
        return $container->privates['serializer.denormalizer.array'] = new \Symfony\Component\Serializer\Normalizer\ArrayDenormalizer();
    }

    /**
     * Gets the private 'serializer.denormalizer.unwrapping' shared service.
     *
     * @return \Symfony\Component\Serializer\Normalizer\UnwrappingDenormalizer
     */
    protected static function getSerializer_Denormalizer_UnwrappingService($container)
    {
        return $container->privates['serializer.denormalizer.unwrapping'] = new \Symfony\Component\Serializer\Normalizer\UnwrappingDenormalizer(($container->privates['property_accessor'] ?? self::getPropertyAccessorService($container)));
    }

    /**
     * Gets the private 'serializer.encoder.csv' shared service.
     *
     * @return \Symfony\Component\Serializer\Encoder\CsvEncoder
     */
    protected static function getSerializer_Encoder_CsvService($container)
    {
        return $container->privates['serializer.encoder.csv'] = new \Symfony\Component\Serializer\Encoder\CsvEncoder([]);
    }

    /**
     * Gets the private 'serializer.encoder.json' shared service.
     *
     * @return \Symfony\Component\Serializer\Encoder\JsonEncoder
     */
    protected static function getSerializer_Encoder_JsonService($container)
    {
        return $container->privates['serializer.encoder.json'] = new \Symfony\Component\Serializer\Encoder\JsonEncoder(NULL, NULL, []);
    }

    /**
     * Gets the private 'serializer.encoder.xml' shared service.
     *
     * @return \Symfony\Component\Serializer\Encoder\XmlEncoder
     */
    protected static function getSerializer_Encoder_XmlService($container)
    {
        return $container->privates['serializer.encoder.xml'] = new \Symfony\Component\Serializer\Encoder\XmlEncoder([]);
    }

    /**
     * Gets the private 'serializer.encoder.yaml' shared service.
     *
     * @return \Symfony\Component\Serializer\Encoder\YamlEncoder
     */
    protected static function getSerializer_Encoder_YamlService($container)
    {
        return $container->privates['serializer.encoder.yaml'] = new \Symfony\Component\Serializer\Encoder\YamlEncoder(NULL, NULL, []);
    }

    /**
     * Gets the private 'serializer.mapping.chain_loader' shared service.
     *
     * @return \Symfony\Component\Serializer\Mapping\Loader\LoaderChain
     */
    protected static function getSerializer_Mapping_ChainLoaderService($container)
    {
        return $container->privates['serializer.mapping.chain_loader'] = new \Symfony\Component\Serializer\Mapping\Loader\LoaderChain([new \Symfony\Component\Serializer\Mapping\Loader\AttributeLoader()]);
    }

    /**
     * Gets the private 'serializer.mapping.class_discriminator_resolver' shared service.
     *
     * @return \Symfony\Component\Serializer\Mapping\ClassDiscriminatorFromClassMetadata
     */
    protected static function getSerializer_Mapping_ClassDiscriminatorResolverService($container)
    {
        return $container->privates['serializer.mapping.class_discriminator_resolver'] = new \Symfony\Component\Serializer\Mapping\ClassDiscriminatorFromClassMetadata(($container->privates['serializer.mapping.class_metadata_factory'] ?? self::getSerializer_Mapping_ClassMetadataFactoryService($container)));
    }

    /**
     * Gets the private 'serializer.mapping.class_metadata_factory' shared service.
     *
     * @return \Symfony\Component\Serializer\Mapping\Factory\ClassMetadataFactory
     */
    protected static function getSerializer_Mapping_ClassMetadataFactoryService($container)
    {
        return $container->privates['serializer.mapping.class_metadata_factory'] = new \Symfony\Component\Serializer\Mapping\Factory\ClassMetadataFactory(($container->privates['serializer.mapping.chain_loader'] ?? self::getSerializer_Mapping_ChainLoaderService($container)));
    }

    /**
     * Gets the private 'serializer.name_converter.metadata_aware' shared service.
     *
     * @return \Symfony\Component\Serializer\NameConverter\MetadataAwareNameConverter
     */
    protected static function getSerializer_NameConverter_MetadataAwareService($container)
    {
        return $container->privates['serializer.name_converter.metadata_aware'] = new \Symfony\Component\Serializer\NameConverter\MetadataAwareNameConverter(($container->privates['serializer.mapping.class_metadata_factory'] ?? self::getSerializer_Mapping_ClassMetadataFactoryService($container)));
    }

    /**
     * Gets the private 'serializer.normalizer.backed_enum' shared service.
     *
     * @return \Symfony\Component\Serializer\Normalizer\BackedEnumNormalizer
     */
    protected static function getSerializer_Normalizer_BackedEnumService($container)
    {
        return $container->privates['serializer.normalizer.backed_enum'] = new \Symfony\Component\Serializer\Normalizer\BackedEnumNormalizer();
    }

    /**
     * Gets the private 'serializer.normalizer.constraint_violation_list' shared autowired service.
     *
     * @return \Symfony\Component\Serializer\Normalizer\ConstraintViolationListNormalizer
     */
    protected static function getSerializer_Normalizer_ConstraintViolationListService($container)
    {
        return $container->privates['serializer.normalizer.constraint_violation_list'] = new \Symfony\Component\Serializer\Normalizer\ConstraintViolationListNormalizer([], ($container->privates['serializer.name_converter.metadata_aware'] ?? self::getSerializer_NameConverter_MetadataAwareService($container)));
    }

    /**
     * Gets the private 'serializer.normalizer.data_uri' shared service.
     *
     * @return \Symfony\Component\Serializer\Normalizer\DataUriNormalizer
     */
    protected static function getSerializer_Normalizer_DataUriService($container)
    {
        return $container->privates['serializer.normalizer.data_uri'] = new \Symfony\Component\Serializer\Normalizer\DataUriNormalizer(($container->privates['mime_types'] ?? self::getMimeTypesService($container)));
    }

    /**
     * Gets the private 'serializer.normalizer.dateinterval' shared service.
     *
     * @return \Symfony\Component\Serializer\Normalizer\DateIntervalNormalizer
     */
    protected static function getSerializer_Normalizer_DateintervalService($container)
    {
        return $container->privates['serializer.normalizer.dateinterval'] = new \Symfony\Component\Serializer\Normalizer\DateIntervalNormalizer([]);
    }

    /**
     * Gets the private 'serializer.normalizer.datetime' shared service.
     *
     * @return \Symfony\Component\Serializer\Normalizer\DateTimeNormalizer
     */
    protected static function getSerializer_Normalizer_DatetimeService($container)
    {
        return $container->privates['serializer.normalizer.datetime'] = new \Symfony\Component\Serializer\Normalizer\DateTimeNormalizer([]);
    }

    /**
     * Gets the private 'serializer.normalizer.datetimezone' shared service.
     *
     * @return \Symfony\Component\Serializer\Normalizer\DateTimeZoneNormalizer
     */
    protected static function getSerializer_Normalizer_DatetimezoneService($container)
    {
        return $container->privates['serializer.normalizer.datetimezone'] = new \Symfony\Component\Serializer\Normalizer\DateTimeZoneNormalizer();
    }

    /**
     * Gets the private 'serializer.normalizer.form_error' shared service.
     *
     * @return \Symfony\Component\Serializer\Normalizer\FormErrorNormalizer
     */
    protected static function getSerializer_Normalizer_FormErrorService($container)
    {
        return $container->privates['serializer.normalizer.form_error'] = new \Symfony\Component\Serializer\Normalizer\FormErrorNormalizer();
    }

    /**
     * Gets the private 'serializer.normalizer.json_serializable' shared service.
     *
     * @return \Symfony\Component\Serializer\Normalizer\JsonSerializableNormalizer
     */
    protected static function getSerializer_Normalizer_JsonSerializableService($container)
    {
        return $container->privates['serializer.normalizer.json_serializable'] = new \Symfony\Component\Serializer\Normalizer\JsonSerializableNormalizer(NULL, NULL, []);
    }

    /**
     * Gets the private 'serializer.normalizer.mime_message' shared service.
     *
     * @return \Symfony\Component\Serializer\Normalizer\MimeMessageNormalizer
     */
    protected static function getSerializer_Normalizer_MimeMessageService($container)
    {
        $a = ($container->privates['serializer.normalizer.property'] ?? self::getSerializer_Normalizer_PropertyService($container));

        if (isset($container->privates['serializer.normalizer.mime_message'])) {
            return $container->privates['serializer.normalizer.mime_message'];
        }

        return $container->privates['serializer.normalizer.mime_message'] = new \Symfony\Component\Serializer\Normalizer\MimeMessageNormalizer($a);
    }

    /**
     * Gets the private 'serializer.normalizer.number' shared service.
     *
     * @return \Symfony\Component\Serializer\Normalizer\NumberNormalizer
     */
    protected static function getSerializer_Normalizer_NumberService($container)
    {
        return $container->privates['serializer.normalizer.number'] = new \Symfony\Component\Serializer\Normalizer\NumberNormalizer();
    }

    /**
     * Gets the private 'serializer.normalizer.object' shared service.
     *
     * @return \Symfony\Component\Serializer\Normalizer\ObjectNormalizer
     */
    protected static function getSerializer_Normalizer_ObjectService($container)
    {
        $a = ($container->privates['property_info'] ?? self::getPropertyInfoService($container));

        return $container->privates['serializer.normalizer.object'] = new \Symfony\Component\Serializer\Normalizer\ObjectNormalizer(($container->privates['serializer.mapping.class_metadata_factory'] ?? self::getSerializer_Mapping_ClassMetadataFactoryService($container)), ($container->privates['serializer.name_converter.metadata_aware'] ?? self::getSerializer_NameConverter_MetadataAwareService($container)), ($container->privates['property_accessor'] ?? self::getPropertyAccessorService($container)), $a, ($container->privates['serializer.mapping.class_discriminator_resolver'] ?? self::getSerializer_Mapping_ClassDiscriminatorResolverService($container)), NULL, [], $a);
    }

    /**
     * Gets the private 'serializer.normalizer.problem' shared service.
     *
     * @return \Symfony\Component\Serializer\Normalizer\ProblemNormalizer
     */
    protected static function getSerializer_Normalizer_ProblemService($container)
    {
        return $container->privates['serializer.normalizer.problem'] = new \Symfony\Component\Serializer\Normalizer\ProblemNormalizer(true, [], ($container->services['translator'] ?? self::getTranslatorService($container)));
    }

    /**
     * Gets the private 'serializer.normalizer.property' shared service.
     *
     * @return \Symfony\Component\Serializer\Normalizer\PropertyNormalizer
     */
    protected static function getSerializer_Normalizer_PropertyService($container)
    {
        $a = ($container->privates['property_info'] ?? self::getPropertyInfoService($container));

        if (isset($container->privates['serializer.normalizer.property'])) {
            return $container->privates['serializer.normalizer.property'];
        }

        return $container->privates['serializer.normalizer.property'] = new \Symfony\Component\Serializer\Normalizer\PropertyNormalizer(($container->privates['serializer.mapping.class_metadata_factory'] ?? self::getSerializer_Mapping_ClassMetadataFactoryService($container)), ($container->privates['serializer.name_converter.metadata_aware'] ?? self::getSerializer_NameConverter_MetadataAwareService($container)), $a, ($container->privates['serializer.mapping.class_discriminator_resolver'] ?? self::getSerializer_Mapping_ClassDiscriminatorResolverService($container)), NULL, []);
    }

    /**
     * Gets the private 'serializer.normalizer.translatable' shared service.
     *
     * @return \Symfony\Component\Serializer\Normalizer\TranslatableNormalizer
     */
    protected static function getSerializer_Normalizer_TranslatableService($container)
    {
        return $container->privates['serializer.normalizer.translatable'] = new \Symfony\Component\Serializer\Normalizer\TranslatableNormalizer(($container->services['translator'] ?? self::getTranslatorService($container)), []);
    }

    /**
     * Gets the private 'serializer.normalizer.uid' shared service.
     *
     * @return \Symfony\Component\Serializer\Normalizer\UidNormalizer
     */
    protected static function getSerializer_Normalizer_UidService($container)
    {
        return $container->privates['serializer.normalizer.uid'] = new \Symfony\Component\Serializer\Normalizer\UidNormalizer([]);
    }

    /**
     * Gets the private 'sulu.content.slugger' shared service.
     *
     * @return \Symfony\Component\String\Slugger\AsciiSlugger
     */
    protected static function getSulu_Content_SluggerService($container)
    {
        return $container->privates['sulu.content.slugger'] = new \Symfony\Component\String\Slugger\AsciiSlugger();
    }

    /**
     * Gets the private 'sulu_activity.domain_event_collector' shared service.
     *
     * @return \Sulu\Bundle\ActivityBundle\Application\Collector\DomainEventCollector
     */
    protected static function getSuluActivity_DomainEventCollectorService($container)
    {
        $a = ($container->privates['sulu_activity.domain_event_dispatcher'] ?? self::getSuluActivity_DomainEventDispatcherService($container));

        if (isset($container->privates['sulu_activity.domain_event_collector'])) {
            return $container->privates['sulu_activity.domain_event_collector'];
        }

        return $container->privates['sulu_activity.domain_event_collector'] = new \Sulu\Bundle\ActivityBundle\Application\Collector\DomainEventCollector($a);
    }

    /**
     * Gets the private 'sulu_activity.domain_event_dispatcher' shared service.
     *
     * @return \Sulu\Bundle\ActivityBundle\Application\Dispatcher\DomainEventDispatcher
     */
    protected static function getSuluActivity_DomainEventDispatcherService($container)
    {
        $a = ($container->services['event_dispatcher'] ?? self::getEventDispatcherService($container));

        if (isset($container->privates['sulu_activity.domain_event_dispatcher'])) {
            return $container->privates['sulu_activity.domain_event_dispatcher'];
        }

        return $container->privates['sulu_activity.domain_event_dispatcher'] = new \Sulu\Bundle\ActivityBundle\Application\Dispatcher\DomainEventDispatcher($a);
    }

    /**
     * Gets the private 'sulu_core.proxy_manager.configuration' shared service.
     *
     * @return \ProxyManager\Configuration
     */
    protected static function getSuluCore_ProxyManager_ConfigurationService($container)
    {
        $container->privates['sulu_core.proxy_manager.configuration'] = $instance = new \ProxyManager\Configuration();

        $instance->setProxiesTargetDir(($container->targetDir.''.'/sulu/proxies'));
        $instance->setGeneratorStrategy(($container->privates['sulu_core.proxy_manager.file_writer_generator_strategy'] ?? self::getSuluCore_ProxyManager_FileWriterGeneratorStrategyService($container)));

        return $instance;
    }

    /**
     * Gets the private 'sulu_core.proxy_manager.file_locator' shared service.
     *
     * @return \ProxyManager\FileLocator\FileLocator
     */
    protected static function getSuluCore_ProxyManager_FileLocatorService($container)
    {
        return $container->privates['sulu_core.proxy_manager.file_locator'] = new \ProxyManager\FileLocator\FileLocator(($container->privates['sulu_core.proxy_manager.configuration'] ?? self::getSuluCore_ProxyManager_ConfigurationService($container))->getProxiesTargetDir());
    }

    /**
     * Gets the private 'sulu_core.proxy_manager.file_writer_generator_strategy' shared service.
     *
     * @return \ProxyManager\GeneratorStrategy\FileWriterGeneratorStrategy
     */
    protected static function getSuluCore_ProxyManager_FileWriterGeneratorStrategyService($container)
    {
        $a = ($container->privates['sulu_core.proxy_manager.file_locator'] ?? self::getSuluCore_ProxyManager_FileLocatorService($container));

        if (isset($container->privates['sulu_core.proxy_manager.file_writer_generator_strategy'])) {
            return $container->privates['sulu_core.proxy_manager.file_writer_generator_strategy'];
        }

        return $container->privates['sulu_core.proxy_manager.file_writer_generator_strategy'] = new \ProxyManager\GeneratorStrategy\FileWriterGeneratorStrategy($a);
    }

    /**
     * Gets the private 'sulu_core.request_processor.admin' shared service.
     *
     * @return \Sulu\Component\Webspace\Analyzer\Attributes\AdminRequestProcessor
     */
    protected static function getSuluCore_RequestProcessor_AdminService($container)
    {
        return $container->privates['sulu_core.request_processor.admin'] = new \Sulu\Component\Webspace\Analyzer\Attributes\AdminRequestProcessor(($container->services['sulu_core.webspace.webspace_manager'] ?? self::getSuluCore_Webspace_WebspaceManagerService($container)), 'dev');
    }

    /**
     * Gets the private 'sulu_core.request_processor.system' shared service.
     *
     * @return \Sulu\Component\Webspace\Analyzer\Attributes\SystemRequestProcessor
     */
    protected static function getSuluCore_RequestProcessor_SystemService($container)
    {
        return $container->privates['sulu_core.request_processor.system'] = new \Sulu\Component\Webspace\Analyzer\Attributes\SystemRequestProcessor(($container->privates['sulu_security.system_store'] ?? self::getSuluSecurity_SystemStoreService($container)), 'admin');
    }

    /**
     * Gets the private 'sulu_core.rest.flatten_exception_normalizer' shared service.
     *
     * @return \Sulu\Component\Rest\FlattenExceptionNormalizer
     */
    protected static function getSuluCore_Rest_FlattenExceptionNormalizerService($container)
    {
        return $container->privates['sulu_core.rest.flatten_exception_normalizer'] = new \Sulu\Component\Rest\FlattenExceptionNormalizer(($container->privates['sulu_core.rest.flatten_exception_normalizer.inner'] ?? self::getSuluCore_Rest_FlattenExceptionNormalizer_InnerService($container)), ($container->services['translator'] ?? self::getTranslatorService($container)));
    }

    /**
     * Gets the private 'sulu_core.rest.flatten_exception_normalizer.inner' shared service.
     *
     * @return \FOS\RestBundle\Serializer\Normalizer\FlattenExceptionNormalizer
     */
    protected static function getSuluCore_Rest_FlattenExceptionNormalizer_InnerService($container)
    {
        return $container->privates['sulu_core.rest.flatten_exception_normalizer.inner'] = new \FOS\RestBundle\Serializer\Normalizer\FlattenExceptionNormalizer(($container->privates['fos_rest.exception.codes_map'] ?? self::getFosRest_Exception_CodesMapService($container)), ($container->privates['fos_rest.exception.messages_map'] ??= new \FOS\RestBundle\Util\ExceptionValueMap([])), true, false);
    }

    /**
     * Gets the private 'sulu_core.webspace.loader.delegator' shared service.
     *
     * @return \Symfony\Component\Config\Loader\DelegatingLoader
     */
    protected static function getSuluCore_Webspace_Loader_DelegatorService($container)
    {
        return $container->privates['sulu_core.webspace.loader.delegator'] = new \Symfony\Component\Config\Loader\DelegatingLoader(($container->privates['sulu_core.webspace.loader.resolver'] ?? self::getSuluCore_Webspace_Loader_ResolverService($container)));
    }

    /**
     * Gets the private 'sulu_core.webspace.loader.resolver' shared service.
     *
     * @return \Symfony\Component\Config\Loader\LoaderResolver
     */
    protected static function getSuluCore_Webspace_Loader_ResolverService($container)
    {
        return $container->privates['sulu_core.webspace.loader.resolver'] = new \Symfony\Component\Config\Loader\LoaderResolver([($container->privates['sulu_core.webspace.loader.xml.1.1'] ?? self::getSuluCore_Webspace_Loader_Xml_1_1Service($container)), ($container->privates['sulu_core.webspace.loader.xml.1.0'] ?? self::getSuluCore_Webspace_Loader_Xml_1_0Service($container))]);
    }

    /**
     * Gets the private 'sulu_core.webspace.loader.xml.1.0' shared service.
     *
     * @return \Sulu\Component\Webspace\Loader\XmlFileLoader10
     */
    protected static function getSuluCore_Webspace_Loader_Xml_1_0Service($container)
    {
        return $container->privates['sulu_core.webspace.loader.xml.1.0'] = new \Sulu\Component\Webspace\Loader\XmlFileLoader10(($container->privates['file_locator'] ??= new \Symfony\Component\HttpKernel\Config\FileLocator(($container->services['kernel'] ?? $container->get('kernel', 1)))));
    }

    /**
     * Gets the private 'sulu_core.webspace.loader.xml.1.1' shared service.
     *
     * @return \Sulu\Component\Webspace\Loader\XmlFileLoader11
     */
    protected static function getSuluCore_Webspace_Loader_Xml_1_1Service($container)
    {
        return $container->privates['sulu_core.webspace.loader.xml.1.1'] = new \Sulu\Component\Webspace\Loader\XmlFileLoader11(($container->privates['file_locator'] ??= new \Symfony\Component\HttpKernel\Config\FileLocator(($container->services['kernel'] ?? $container->get('kernel', 1)))));
    }

    /**
     * Gets the private 'sulu_core.webspace.webspace_manager.url_replacer' shared service.
     *
     * @return \Sulu\Component\Webspace\Url\Replacer
     */
    protected static function getSuluCore_Webspace_WebspaceManager_UrlReplacerService($container)
    {
        return $container->privates['sulu_core.webspace.webspace_manager.url_replacer'] = new \Sulu\Component\Webspace\Url\Replacer();
    }

    /**
     * Gets the private 'sulu_document_manager.decorated_default_session.inner' shared service.
     *
     * @return \Jackalope\Session
     */
    protected static function getSuluDocumentManager_DecoratedDefaultSession_InnerService($container)
    {
        $a = ($container->privates['doctrine_phpcr.jackalope.repository.default'] ?? self::getDoctrinePhpcr_Jackalope_Repository_DefaultService($container));

        if (isset($container->privates['sulu_document_manager.decorated_default_session.inner'])) {
            return $container->privates['sulu_document_manager.decorated_default_session.inner'];
        }

        return $container->privates['sulu_document_manager.decorated_default_session.inner'] = $a->login(($container->privates['doctrine_phpcr.default_credentials'] ??= new \PHPCR\SimpleCredentials($container->getEnv('PHPCR_USERNAME'), $container->getEnv('PHPCR_PASSWORD'))), $container->getEnv('PHPCR_WORKSPACE'));
    }

    /**
     * Gets the private 'sulu_document_manager.document_registry' shared service.
     *
     * @return \Sulu\Component\DocumentManager\DocumentRegistry
     */
    protected static function getSuluDocumentManager_DocumentRegistryService($container)
    {
        return $container->privates['sulu_document_manager.document_registry'] = new \Sulu\Component\DocumentManager\DocumentRegistry('en');
    }

    /**
     * Gets the private 'sulu_document_manager.event_dispatcher.standard' shared service.
     *
     * @return \Symfony\Component\EventDispatcher\EventDispatcher
     */
    protected static function getSuluDocumentManager_EventDispatcher_StandardService($container)
    {
        $container->privates['sulu_document_manager.event_dispatcher.standard'] = $instance = new \Symfony\Component\EventDispatcher\EventDispatcher();

        $instance->addListener('sulu_document_manager.persist', [#[\Closure(name: 'sulu_page.search.event_subscriber.structure', class: 'Sulu\\Bundle\\PageBundle\\Search\\EventSubscriber\\StructureSubscriber')] fn () => ($container->privates['sulu_page.search.event_subscriber.structure'] ?? $container->load('getSuluPage_Search_EventSubscriber_StructureService')), 'indexPersistedDocument'], -10);
        $instance->addListener('sulu_document_manager.publish', [#[\Closure(name: 'sulu_page.search.event_subscriber.structure', class: 'Sulu\\Bundle\\PageBundle\\Search\\EventSubscriber\\StructureSubscriber')] fn () => ($container->privates['sulu_page.search.event_subscriber.structure'] ?? $container->load('getSuluPage_Search_EventSubscriber_StructureService')), 'indexPublishedDocument'], -256);
        $instance->addListener('sulu_document_manager.move', [#[\Closure(name: 'sulu_page.search.event_subscriber.structure', class: 'Sulu\\Bundle\\PageBundle\\Search\\EventSubscriber\\StructureSubscriber')] fn () => ($container->privates['sulu_page.search.event_subscriber.structure'] ?? $container->load('getSuluPage_Search_EventSubscriber_StructureService')), 'indexMovedDocument'], -256);
        $instance->addListener('sulu_document_manager.remove', [#[\Closure(name: 'sulu_page.search.event_subscriber.structure', class: 'Sulu\\Bundle\\PageBundle\\Search\\EventSubscriber\\StructureSubscriber')] fn () => ($container->privates['sulu_page.search.event_subscriber.structure'] ?? $container->load('getSuluPage_Search_EventSubscriber_StructureService')), 'deindexRemovedDocument'], 600);
        $instance->addListener('sulu_document_manager.unpublish', [#[\Closure(name: 'sulu_page.search.event_subscriber.structure', class: 'Sulu\\Bundle\\PageBundle\\Search\\EventSubscriber\\StructureSubscriber')] fn () => ($container->privates['sulu_page.search.event_subscriber.structure'] ?? $container->load('getSuluPage_Search_EventSubscriber_StructureService')), 'deindexUnpublishedDocument'], -1024);
        $instance->addListener('sulu_document_manager.remove_draft', [#[\Closure(name: 'sulu_page.search.event_subscriber.structure', class: 'Sulu\\Bundle\\PageBundle\\Search\\EventSubscriber\\StructureSubscriber')] fn () => ($container->privates['sulu_page.search.event_subscriber.structure'] ?? $container->load('getSuluPage_Search_EventSubscriber_StructureService')), 'indexDocumentAfterRemoveDraft'], -1024);
        $instance->addListener('sulu_document_manager.remove_locale', [#[\Closure(name: 'sulu_page.search.event_subscriber.structure', class: 'Sulu\\Bundle\\PageBundle\\Search\\EventSubscriber\\StructureSubscriber')] fn () => ($container->privates['sulu_page.search.event_subscriber.structure'] ?? $container->load('getSuluPage_Search_EventSubscriber_StructureService')), 'deindexRemovedLocaleDocument'], -1024);
        $instance->addListener('sulu_document_manager.remove', [#[\Closure(name: 'sulu_page.page_remove_subscriber', class: 'Sulu\\Bundle\\PageBundle\\EventListener\\PageRemoveSubscriber')] fn () => ($container->privates['sulu_page.page_remove_subscriber'] ?? $container->load('getSuluPage_PageRemoveSubscriberService')), 'preventRemoveWithChildren'], 4096);
        $instance->addListener('sulu_document_manager.configure_options', [#[\Closure(name: 'sulu_page.page_remove_subscriber', class: 'Sulu\\Bundle\\PageBundle\\EventListener\\PageRemoveSubscriber')] fn () => ($container->privates['sulu_page.page_remove_subscriber'] ?? $container->load('getSuluPage_PageRemoveSubscriberService')), 'addForceRemoveChildrenOption'], 0);
        $instance->addListener('sulu_document_manager.configure_options', [#[\Closure(name: 'sulu_page.document_manager.event_subscriber', class: 'Sulu\\Bundle\\PageBundle\\EventListener\\DomainEventSubscriber')] fn () => ($container->privates['sulu_page.document_manager.event_subscriber'] ?? $container->load('getSuluPage_DocumentManager_EventSubscriberService')), 'handleConfigureOptions'], 0);
        $instance->addListener('sulu_document_manager.flush', [#[\Closure(name: 'sulu_page.document_manager.event_subscriber', class: 'Sulu\\Bundle\\PageBundle\\EventListener\\DomainEventSubscriber')] fn () => ($container->privates['sulu_page.document_manager.event_subscriber'] ?? $container->load('getSuluPage_DocumentManager_EventSubscriberService')), 'handleFlush'], 0);
        $instance->addListener('sulu_document_manager.persist', [#[\Closure(name: 'sulu_page.document_manager.event_subscriber', class: 'Sulu\\Bundle\\PageBundle\\EventListener\\DomainEventSubscriber')] fn () => ($container->privates['sulu_page.document_manager.event_subscriber'] ?? $container->load('getSuluPage_DocumentManager_EventSubscriberService')), 'handlePrePersist'], 479);
        $instance->addListener('sulu_document_manager.persist', [#[\Closure(name: 'sulu_page.document_manager.event_subscriber', class: 'Sulu\\Bundle\\PageBundle\\EventListener\\DomainEventSubscriber')] fn () => ($container->privates['sulu_page.document_manager.event_subscriber'] ?? $container->load('getSuluPage_DocumentManager_EventSubscriberService')), 'handlePersist'], -10000);
        $instance->addListener('sulu_document_manager.remove', [#[\Closure(name: 'sulu_page.document_manager.event_subscriber', class: 'Sulu\\Bundle\\PageBundle\\EventListener\\DomainEventSubscriber')] fn () => ($container->privates['sulu_page.document_manager.event_subscriber'] ?? $container->load('getSuluPage_DocumentManager_EventSubscriberService')), 'handleRemove'], -10000);
        $instance->addListener('sulu_document_manager.remove', [#[\Closure(name: 'sulu_page.document_manager.event_subscriber', class: 'Sulu\\Bundle\\PageBundle\\EventListener\\DomainEventSubscriber')] fn () => ($container->privates['sulu_page.document_manager.event_subscriber'] ?? $container->load('getSuluPage_DocumentManager_EventSubscriberService')), 'handleRouteRemove'], -10000);
        $instance->addListener('sulu_document_manager.remove_locale', [#[\Closure(name: 'sulu_page.document_manager.event_subscriber', class: 'Sulu\\Bundle\\PageBundle\\EventListener\\DomainEventSubscriber')] fn () => ($container->privates['sulu_page.document_manager.event_subscriber'] ?? $container->load('getSuluPage_DocumentManager_EventSubscriberService')), 'handleRemoveLocale'], -10000);
        $instance->addListener('sulu_document_manager.copy_locale', [#[\Closure(name: 'sulu_page.document_manager.event_subscriber', class: 'Sulu\\Bundle\\PageBundle\\EventListener\\DomainEventSubscriber')] fn () => ($container->privates['sulu_page.document_manager.event_subscriber'] ?? $container->load('getSuluPage_DocumentManager_EventSubscriberService')), 'handleCopyLocale'], -10000);
        $instance->addListener('sulu_document_manager.copy', [#[\Closure(name: 'sulu_page.document_manager.event_subscriber', class: 'Sulu\\Bundle\\PageBundle\\EventListener\\DomainEventSubscriber')] fn () => ($container->privates['sulu_page.document_manager.event_subscriber'] ?? $container->load('getSuluPage_DocumentManager_EventSubscriberService')), 'handleCopy'], -10000);
        $instance->addListener('sulu_document_manager.move', [#[\Closure(name: 'sulu_page.document_manager.event_subscriber', class: 'Sulu\\Bundle\\PageBundle\\EventListener\\DomainEventSubscriber')] fn () => ($container->privates['sulu_page.document_manager.event_subscriber'] ?? $container->load('getSuluPage_DocumentManager_EventSubscriberService')), 'handlePreMove'], 10000);
        $instance->addListener('sulu_document_manager.move', [#[\Closure(name: 'sulu_page.document_manager.event_subscriber', class: 'Sulu\\Bundle\\PageBundle\\EventListener\\DomainEventSubscriber')] fn () => ($container->privates['sulu_page.document_manager.event_subscriber'] ?? $container->load('getSuluPage_DocumentManager_EventSubscriberService')), 'handleMove'], -10000);
        $instance->addListener('sulu_document_manager.publish', [#[\Closure(name: 'sulu_page.document_manager.event_subscriber', class: 'Sulu\\Bundle\\PageBundle\\EventListener\\DomainEventSubscriber')] fn () => ($container->privates['sulu_page.document_manager.event_subscriber'] ?? $container->load('getSuluPage_DocumentManager_EventSubscriberService')), 'handlePublish'], -10000);
        $instance->addListener('sulu_document_manager.unpublish', [#[\Closure(name: 'sulu_page.document_manager.event_subscriber', class: 'Sulu\\Bundle\\PageBundle\\EventListener\\DomainEventSubscriber')] fn () => ($container->privates['sulu_page.document_manager.event_subscriber'] ?? $container->load('getSuluPage_DocumentManager_EventSubscriberService')), 'handleUnpublish'], -10000);
        $instance->addListener('sulu_document_manager.remove_draft', [#[\Closure(name: 'sulu_page.document_manager.event_subscriber', class: 'Sulu\\Bundle\\PageBundle\\EventListener\\DomainEventSubscriber')] fn () => ($container->privates['sulu_page.document_manager.event_subscriber'] ?? $container->load('getSuluPage_DocumentManager_EventSubscriberService')), 'handleRemoveDraft'], -10000);
        $instance->addListener('sulu_document_manager.restore', [#[\Closure(name: 'sulu_page.document_manager.event_subscriber', class: 'Sulu\\Bundle\\PageBundle\\EventListener\\DomainEventSubscriber')] fn () => ($container->privates['sulu_page.document_manager.event_subscriber'] ?? $container->load('getSuluPage_DocumentManager_EventSubscriberService')), 'handleRestore'], -10000);
        $instance->addListener('sulu_document_manager.reorder', [#[\Closure(name: 'sulu_page.document_manager.event_subscriber', class: 'Sulu\\Bundle\\PageBundle\\EventListener\\DomainEventSubscriber')] fn () => ($container->privates['sulu_page.document_manager.event_subscriber'] ?? $container->load('getSuluPage_DocumentManager_EventSubscriberService')), 'handleReorder'], -10000);
        $instance->addListener('sulu_document_manager.persist', [#[\Closure(name: 'sulu_page.document.subscriber.content', class: 'Sulu\\Component\\Content\\Document\\Subscriber\\StructureSubscriber')] fn () => ($container->privates['sulu_page.document.subscriber.content'] ?? $container->load('getSuluPage_Document_Subscriber_ContentService')), 'saveStructureData'], 0);
        $instance->addListener('sulu_document_manager.persist', [#[\Closure(name: 'sulu_page.document.subscriber.content', class: 'Sulu\\Component\\Content\\Document\\Subscriber\\StructureSubscriber')] fn () => ($container->privates['sulu_page.document.subscriber.content'] ?? $container->load('getSuluPage_Document_Subscriber_ContentService')), 'handlePersistStagedProperties'], 50);
        $instance->addListener('sulu_document_manager.persist', [#[\Closure(name: 'sulu_page.document.subscriber.content', class: 'Sulu\\Component\\Content\\Document\\Subscriber\\StructureSubscriber')] fn () => ($container->privates['sulu_page.document.subscriber.content'] ?? $container->load('getSuluPage_Document_Subscriber_ContentService')), 'handlePersistStructureType'], 100);
        $instance->addListener('sulu_document_manager.publish', [#[\Closure(name: 'sulu_page.document.subscriber.content', class: 'Sulu\\Component\\Content\\Document\\Subscriber\\StructureSubscriber')] fn () => ($container->privates['sulu_page.document.subscriber.content'] ?? $container->load('getSuluPage_Document_Subscriber_ContentService')), 'saveStructureData'], 0);
        $instance->addListener('sulu_document_manager.hydrate', [#[\Closure(name: 'sulu_page.document.subscriber.content', class: 'Sulu\\Component\\Content\\Document\\Subscriber\\StructureSubscriber')] fn () => ($container->privates['sulu_page.document.subscriber.content'] ?? $container->load('getSuluPage_Document_Subscriber_ContentService')), 'handleHydrate'], 0);
        $instance->addListener('sulu_document_manager.configure_options', [#[\Closure(name: 'sulu_page.document.subscriber.content', class: 'Sulu\\Component\\Content\\Document\\Subscriber\\StructureSubscriber')] fn () => ($container->privates['sulu_page.document.subscriber.content'] ?? $container->load('getSuluPage_Document_Subscriber_ContentService')), 'configureOptions'], 0);
        $instance->addListener('sulu_document_manager.metadata_load', [#[\Closure(name: 'sulu_navigationContext.document.subscriber.navigation_context', class: 'Sulu\\Component\\Content\\Document\\Subscriber\\NavigationContextSubscriber')] fn () => ($container->privates['sulu_navigationContext.document.subscriber.navigation_context'] ??= new \Sulu\Component\Content\Document\Subscriber\NavigationContextSubscriber()), 'handleMetadataLoad'], 0);
        $instance->addListener('sulu_document_manager.metadata_load', [#[\Closure(name: 'sulu_redirect_type.document.subscriber.redirect_type', class: 'Sulu\\Component\\Content\\Document\\Subscriber\\RedirectTypeSubscriber')] fn () => ($container->privates['sulu_redirect_type.document.subscriber.redirect_type'] ??= new \Sulu\Component\Content\Document\Subscriber\RedirectTypeSubscriber()), 'handleMetadataLoad'], 0);
        $instance->addListener('sulu_document_manager.persist', [#[\Closure(name: 'sulu_redirect_type.document.subscriber.redirect_type', class: 'Sulu\\Component\\Content\\Document\\Subscriber\\RedirectTypeSubscriber')] fn () => ($container->privates['sulu_redirect_type.document.subscriber.redirect_type'] ??= new \Sulu\Component\Content\Document\Subscriber\RedirectTypeSubscriber()), 'handlePersist'], 15);
        $instance->addListener('sulu_document_manager.persist', [#[\Closure(name: 'sulu_resource_segment.document.subscriber.resource_segment', class: 'Sulu\\Component\\Content\\Document\\Subscriber\\ResourceSegmentSubscriber')] fn () => ($container->privates['sulu_resource_segment.document.subscriber.resource_segment'] ?? $container->load('getSuluResourceSegment_Document_Subscriber_ResourceSegmentService')), 'handlePersistDocument'], 10);
        $instance->addListener('sulu_document_manager.hydrate', [#[\Closure(name: 'sulu_resource_segment.document.subscriber.resource_segment', class: 'Sulu\\Component\\Content\\Document\\Subscriber\\ResourceSegmentSubscriber')] fn () => ($container->privates['sulu_resource_segment.document.subscriber.resource_segment'] ?? $container->load('getSuluResourceSegment_Document_Subscriber_ResourceSegmentService')), 'handleHydrate'], -200);
        $instance->addListener('sulu_document_manager.move', [#[\Closure(name: 'sulu_resource_segment.document.subscriber.resource_segment', class: 'Sulu\\Component\\Content\\Document\\Subscriber\\ResourceSegmentSubscriber')] fn () => ($container->privates['sulu_resource_segment.document.subscriber.resource_segment'] ?? $container->load('getSuluResourceSegment_Document_Subscriber_ResourceSegmentService')), 'updateMovedDocument'], -128);
        $instance->addListener('sulu_document_manager.copy', [#[\Closure(name: 'sulu_resource_segment.document.subscriber.resource_segment', class: 'Sulu\\Component\\Content\\Document\\Subscriber\\ResourceSegmentSubscriber')] fn () => ($container->privates['sulu_resource_segment.document.subscriber.resource_segment'] ?? $container->load('getSuluResourceSegment_Document_Subscriber_ResourceSegmentService')), 'updateCopiedDocument'], -128);
        $instance->addListener('sulu_document_manager.publish', [#[\Closure(name: 'sulu_resource_segment.document.subscriber.resource_segment', class: 'Sulu\\Component\\Content\\Document\\Subscriber\\ResourceSegmentSubscriber')] fn () => ($container->privates['sulu_resource_segment.document.subscriber.resource_segment'] ?? $container->load('getSuluResourceSegment_Document_Subscriber_ResourceSegmentService')), 'handlePersistRoute'], -128);
        $instance->addListener('sulu_document_manager.hydrate', [#[\Closure(name: 'sulu_document_manager.document.subscriber.workflow_stage', class: 'Sulu\\Component\\Content\\Document\\Subscriber\\WorkflowStageSubscriber')] fn () => ($container->privates['sulu_document_manager.document.subscriber.workflow_stage'] ?? $container->load('getSuluDocumentManager_Document_Subscriber_WorkflowStageService')), 'setWorkflowStageOnDocument'], 0);
        $instance->addListener('sulu_document_manager.persist', [#[\Closure(name: 'sulu_document_manager.document.subscriber.workflow_stage', class: 'Sulu\\Component\\Content\\Document\\Subscriber\\WorkflowStageSubscriber')] fn () => ($container->privates['sulu_document_manager.document.subscriber.workflow_stage'] ?? $container->load('getSuluDocumentManager_Document_Subscriber_WorkflowStageService')), 'setWorkflowStageToTest'], 0);
        $instance->addListener('sulu_document_manager.publish', [#[\Closure(name: 'sulu_document_manager.document.subscriber.workflow_stage', class: 'Sulu\\Component\\Content\\Document\\Subscriber\\WorkflowStageSubscriber')] fn () => ($container->privates['sulu_document_manager.document.subscriber.workflow_stage'] ?? $container->load('getSuluDocumentManager_Document_Subscriber_WorkflowStageService')), 'setWorkflowStageToPublished'], 0);
        $instance->addListener('sulu_document_manager.unpublish', [#[\Closure(name: 'sulu_document_manager.document.subscriber.workflow_stage', class: 'Sulu\\Component\\Content\\Document\\Subscriber\\WorkflowStageSubscriber')] fn () => ($container->privates['sulu_document_manager.document.subscriber.workflow_stage'] ?? $container->load('getSuluDocumentManager_Document_Subscriber_WorkflowStageService')), 'setWorkflowStageToTestAndResetPublishedDate'], 0);
        $instance->addListener('sulu_document_manager.copy', [#[\Closure(name: 'sulu_document_manager.document.subscriber.workflow_stage', class: 'Sulu\\Component\\Content\\Document\\Subscriber\\WorkflowStageSubscriber')] fn () => ($container->privates['sulu_document_manager.document.subscriber.workflow_stage'] ?? $container->load('getSuluDocumentManager_Document_Subscriber_WorkflowStageService')), 'setWorkflowStageToTestForCopy'], 0);
        $instance->addListener('sulu_document_manager.restore', [#[\Closure(name: 'sulu_document_manager.document.subscriber.workflow_stage', class: 'Sulu\\Component\\Content\\Document\\Subscriber\\WorkflowStageSubscriber')] fn () => ($container->privates['sulu_document_manager.document.subscriber.workflow_stage'] ?? $container->load('getSuluDocumentManager_Document_Subscriber_WorkflowStageService')), 'setWorkflowStageToTestForRestore'], -32);
        $instance->addListener('sulu_document_manager.metadata_load', [#[\Closure(name: 'sulu_document_manager.document.subscriber.shadow_locale', class: 'Sulu\\Component\\Content\\Document\\Subscriber\\ShadowLocaleSubscriber')] fn () => ($container->privates['sulu_document_manager.document.subscriber.shadow_locale'] ?? $container->load('getSuluDocumentManager_Document_Subscriber_ShadowLocaleService')), 'handleMetadataLoad'], 0);
        $instance->addListener('sulu_document_manager.persist', [#[\Closure(name: 'sulu_document_manager.document.subscriber.shadow_locale', class: 'Sulu\\Component\\Content\\Document\\Subscriber\\ShadowLocaleSubscriber')] fn () => ($container->privates['sulu_document_manager.document.subscriber.shadow_locale'] ?? $container->load('getSuluDocumentManager_Document_Subscriber_ShadowLocaleService')), 'handlePersistUpdateUrl'], 20);
        $instance->addListener('sulu_document_manager.persist', [#[\Closure(name: 'sulu_document_manager.document.subscriber.shadow_locale', class: 'Sulu\\Component\\Content\\Document\\Subscriber\\ShadowLocaleSubscriber')] fn () => ($container->privates['sulu_document_manager.document.subscriber.shadow_locale'] ?? $container->load('getSuluDocumentManager_Document_Subscriber_ShadowLocaleService')), 'saveShadowProperties'], 15);
        $instance->addListener('sulu_document_manager.hydrate', [#[\Closure(name: 'sulu_document_manager.document.subscriber.shadow_locale', class: 'Sulu\\Component\\Content\\Document\\Subscriber\\ShadowLocaleSubscriber')] fn () => ($container->privates['sulu_document_manager.document.subscriber.shadow_locale'] ?? $container->load('getSuluDocumentManager_Document_Subscriber_ShadowLocaleService')), 'handleHydrate'], 390);
        $instance->addListener('sulu_document_manager.publish', [#[\Closure(name: 'sulu_document_manager.document.subscriber.shadow_locale', class: 'Sulu\\Component\\Content\\Document\\Subscriber\\ShadowLocaleSubscriber')] fn () => ($container->privates['sulu_document_manager.document.subscriber.shadow_locale'] ?? $container->load('getSuluDocumentManager_Document_Subscriber_ShadowLocaleService')), 'saveShadowProperties'], 15);
        $instance->addListener('sulu_document_manager.configure_options', [#[\Closure(name: 'sulu_document_manager.document.subscriber.shadow_locale', class: 'Sulu\\Component\\Content\\Document\\Subscriber\\ShadowLocaleSubscriber')] fn () => ($container->privates['sulu_document_manager.document.subscriber.shadow_locale'] ?? $container->load('getSuluDocumentManager_Document_Subscriber_ShadowLocaleService')), 'handleConfigureOptions'], 0);
        $instance->addListener('sulu_document_manager.persist', [#[\Closure(name: 'sulu_document_manager.document.subscriber.shadow_copy_properties', class: 'Sulu\\Component\\Content\\Document\\Subscriber\\ShadowCopyPropertiesSubscriber')] fn () => ($container->privates['sulu_document_manager.document.subscriber.shadow_copy_properties'] ?? $container->load('getSuluDocumentManager_Document_Subscriber_ShadowCopyPropertiesService')), 'copyShadowProperties'], -256);
        $instance->addListener('sulu_document_manager.publish', [#[\Closure(name: 'sulu_document_manager.document.subscriber.shadow_copy_properties', class: 'Sulu\\Component\\Content\\Document\\Subscriber\\ShadowCopyPropertiesSubscriber')] fn () => ($container->privates['sulu_document_manager.document.subscriber.shadow_copy_properties'] ?? $container->load('getSuluDocumentManager_Document_Subscriber_ShadowCopyPropertiesService')), 'copyShadowProperties'], -256);
        $instance->addListener('sulu_document_manager.hydrate', [#[\Closure(name: 'sulu_document_manager.document.subscriber.title', class: 'Sulu\\Component\\Content\\Document\\Subscriber\\TitleSubscriber')] fn () => ($container->privates['sulu_document_manager.document.subscriber.title'] ?? $container->load('getSuluDocumentManager_Document_Subscriber_TitleService')), 'setTitleOnDocument'], -10);
        $instance->addListener('sulu_document_manager.persist', [#[\Closure(name: 'sulu_document_manager.document.subscriber.title', class: 'Sulu\\Component\\Content\\Document\\Subscriber\\TitleSubscriber')] fn () => ($container->privates['sulu_document_manager.document.subscriber.title'] ?? $container->load('getSuluDocumentManager_Document_Subscriber_TitleService')), 'setTitleOnNode'], 10);
        $instance->addListener('sulu_document_manager.publish', [#[\Closure(name: 'sulu_document_manager.document.subscriber.title', class: 'Sulu\\Component\\Content\\Document\\Subscriber\\TitleSubscriber')] fn () => ($container->privates['sulu_document_manager.document.subscriber.title'] ?? $container->load('getSuluDocumentManager_Document_Subscriber_TitleService')), 'setTitleOnNode'], 10);
        $instance->addListener('sulu_document_manager.hydrate', [#[\Closure(name: 'sulu_document_manager.document.subscriber.fallback_localization', class: 'Sulu\\Component\\Content\\Document\\Subscriber\\FallbackLocalizationSubscriber')] fn () => ($container->privates['sulu_document_manager.document.subscriber.fallback_localization'] ?? $container->load('getSuluDocumentManager_Document_Subscriber_FallbackLocalizationService')), 'handleHydrate'], 400);
        $instance->addListener('sulu_document_manager.persist', [#[\Closure(name: 'sulu_document_manager.document.subscriber.extension', class: 'Sulu\\Component\\Content\\Document\\Subscriber\\ExtensionSubscriber')] fn () => ($container->privates['sulu_document_manager.document.subscriber.extension'] ?? $container->load('getSuluDocumentManager_Document_Subscriber_ExtensionService')), 'saveExtensionData'], 10);
        $instance->addListener('sulu_document_manager.publish', [#[\Closure(name: 'sulu_document_manager.document.subscriber.extension', class: 'Sulu\\Component\\Content\\Document\\Subscriber\\ExtensionSubscriber')] fn () => ($container->privates['sulu_document_manager.document.subscriber.extension'] ?? $container->load('getSuluDocumentManager_Document_Subscriber_ExtensionService')), 'saveExtensionData'], 10);
        $instance->addListener('sulu_document_manager.hydrate', [#[\Closure(name: 'sulu_document_manager.document.subscriber.extension', class: 'Sulu\\Component\\Content\\Document\\Subscriber\\ExtensionSubscriber')] fn () => ($container->privates['sulu_document_manager.document.subscriber.extension'] ?? $container->load('getSuluDocumentManager_Document_Subscriber_ExtensionService')), 'handleHydrate'], -10);
        $instance->addListener('sulu_document_manager.persist', [#[\Closure(name: 'sulu_document_manager.document.subscriber.order', class: 'Sulu\\Component\\Content\\Document\\Subscriber\\OrderSubscriber')] fn () => ($container->privates['sulu_document_manager.document.subscriber.order'] ?? $container->load('getSuluDocumentManager_Document_Subscriber_OrderService')), 'handlePersist'], 0);
        $instance->addListener('sulu_document_manager.metadata_load', [#[\Closure(name: 'sulu_document_manager.document.subscriber.order', class: 'Sulu\\Component\\Content\\Document\\Subscriber\\OrderSubscriber')] fn () => ($container->privates['sulu_document_manager.document.subscriber.order'] ?? $container->load('getSuluDocumentManager_Document_Subscriber_OrderService')), 'handleMetadataLoad'], 0);
        $instance->addListener('sulu_document_manager.reorder', [#[\Closure(name: 'sulu_document_manager.document.subscriber.order', class: 'Sulu\\Component\\Content\\Document\\Subscriber\\OrderSubscriber')] fn () => ($container->privates['sulu_document_manager.document.subscriber.order'] ?? $container->load('getSuluDocumentManager_Document_Subscriber_OrderService')), 'handleReorder'], 0);
        $instance->addListener('sulu_document_manager.persist', [#[\Closure(name: 'sulu_document_manager.document.subscriber.security', class: 'Sulu\\Component\\Content\\Document\\Subscriber\\SecuritySubscriber')] fn () => ($container->privates['sulu_document_manager.document.subscriber.security'] ?? $container->load('getSuluDocumentManager_Document_Subscriber_SecurityService')), 'handlePersist'], 0);
        $instance->addListener('sulu_document_manager.persist', [#[\Closure(name: 'sulu_document_manager.document.subscriber.security', class: 'Sulu\\Component\\Content\\Document\\Subscriber\\SecuritySubscriber')] fn () => ($container->privates['sulu_document_manager.document.subscriber.security'] ?? $container->load('getSuluDocumentManager_Document_Subscriber_SecurityService')), 'handlePersistCreate'], 3);
        $instance->addListener('sulu_document_manager.hydrate', [#[\Closure(name: 'sulu_document_manager.document.subscriber.security', class: 'Sulu\\Component\\Content\\Document\\Subscriber\\SecuritySubscriber')] fn () => ($container->privates['sulu_document_manager.document.subscriber.security'] ?? $container->load('getSuluDocumentManager_Document_Subscriber_SecurityService')), 'handleHydrate'], 0);
        $instance->addListener('sulu_document_manager.copy', [#[\Closure(name: 'sulu_document_manager.document.subscriber.webspace', class: 'Sulu\\Component\\Content\\Document\\Subscriber\\WebspaceSubscriber')] fn () => ($container->privates['sulu_document_manager.document.subscriber.webspace'] ?? $container->load('getSuluDocumentManager_Document_Subscriber_WebspaceService')), 'deleteUnavailableLocales'], 256);
        $instance->addListener('sulu_document_manager.persist', [#[\Closure(name: 'sulu_document_manager.document.subscriber.webspace', class: 'Sulu\\Component\\Content\\Document\\Subscriber\\WebspaceSubscriber')] fn () => ($container->privates['sulu_document_manager.document.subscriber.webspace'] ?? $container->load('getSuluDocumentManager_Document_Subscriber_WebspaceService')), 'handleWebspace'], 0);
        $instance->addListener('sulu_document_manager.hydrate', [#[\Closure(name: 'sulu_document_manager.document.subscriber.webspace', class: 'Sulu\\Component\\Content\\Document\\Subscriber\\WebspaceSubscriber')] fn () => ($container->privates['sulu_document_manager.document.subscriber.webspace'] ?? $container->load('getSuluDocumentManager_Document_Subscriber_WebspaceService')), 'handleWebspace'], -10);
        $instance->addListener('sulu_document_manager.persist', [#[\Closure(name: 'sulu_document_manager.document.subscriber.route', class: 'Sulu\\Component\\Content\\Document\\Subscriber\\RouteSubscriber')] fn () => ($container->privates['sulu_document_manager.document.subscriber.route'] ?? $container->load('getSuluDocumentManager_Document_Subscriber_RouteService')), 'handleSetNodeOnPersist'], 490);
        $instance->addListener('sulu_document_manager.persist', [#[\Closure(name: 'sulu_document_manager.document.subscriber.route', class: 'Sulu\\Component\\Content\\Document\\Subscriber\\RouteSubscriber')] fn () => ($container->privates['sulu_document_manager.document.subscriber.route'] ?? $container->load('getSuluDocumentManager_Document_Subscriber_RouteService')), 'handlePersist'], 5);
        $instance->addListener('sulu_document_manager.hydrate', [#[\Closure(name: 'sulu_document_manager.document.subscriber.route', class: 'Sulu\\Component\\Content\\Document\\Subscriber\\RouteSubscriber')] fn () => ($container->privates['sulu_document_manager.document.subscriber.route'] ?? $container->load('getSuluDocumentManager_Document_Subscriber_RouteService')), 'handleHydrate'], 0);
        $instance->addListener('sulu_document_manager.remove', [#[\Closure(name: 'sulu_document_manager.document.subscriber.route', class: 'Sulu\\Component\\Content\\Document\\Subscriber\\RouteSubscriber')] fn () => ($container->privates['sulu_document_manager.document.subscriber.route'] ?? $container->load('getSuluDocumentManager_Document_Subscriber_RouteService')), 'handleRemove'], 550);
        $instance->addListener('sulu_document_manager.publish', [#[\Closure(name: 'sulu_document_manager.document.subscriber.route', class: 'Sulu\\Component\\Content\\Document\\Subscriber\\RouteSubscriber')] fn () => ($container->privates['sulu_document_manager.document.subscriber.route'] ?? $container->load('getSuluDocumentManager_Document_Subscriber_RouteService')), 'handlePublish'], 0);
        $instance->addListener('sulu_document_manager.metadata_load', [#[\Closure(name: 'sulu_document_manager.document.subscriber.target', class: 'Sulu\\Component\\Content\\Document\\Subscriber\\TargetSubscriber')] fn () => ($container->privates['sulu_document_manager.document.subscriber.target'] ??= new \Sulu\Component\Content\Document\Subscriber\TargetSubscriber()), 'handleMetadataLoad'], 0);
        $instance->addListener('sulu_document_manager.metadata_load', [#[\Closure(name: 'sulu_document_manager.document.subscriber.robot', class: 'Sulu\\Component\\Content\\Document\\Subscriber\\RobotSubscriber')] fn () => ($container->privates['sulu_document_manager.document.subscriber.robot'] ??= new \Sulu\Component\Content\Document\Subscriber\RobotSubscriber()), 'handleMetadataLoad'], 0);
        $instance->addListener('sulu_document_manager.persist', [#[\Closure(name: 'sulu_document_manager.document.subscriber.publish', class: 'Sulu\\Bundle\\PageBundle\\Document\\Subscriber\\PublishSubscriber')] fn () => ($container->privates['sulu_document_manager.document.subscriber.publish'] ?? $container->load('getSuluDocumentManager_Document_Subscriber_PublishService')), 'createNodeInPublicWorkspace'], -490);
        $instance->addListener('sulu_document_manager.remove', [#[\Closure(name: 'sulu_document_manager.document.subscriber.publish', class: 'Sulu\\Bundle\\PageBundle\\Document\\Subscriber\\PublishSubscriber')] fn () => ($container->privates['sulu_document_manager.document.subscriber.publish'] ?? $container->load('getSuluDocumentManager_Document_Subscriber_PublishService')), 'removeNodeFromPublicWorkspace'], 0);
        $instance->addListener('sulu_document_manager.move', [#[\Closure(name: 'sulu_document_manager.document.subscriber.publish', class: 'Sulu\\Bundle\\PageBundle\\Document\\Subscriber\\PublishSubscriber')] fn () => ($container->privates['sulu_document_manager.document.subscriber.publish'] ?? $container->load('getSuluDocumentManager_Document_Subscriber_PublishService')), 'moveNodeInPublicWorkspace'], 0);
        $instance->addListener('sulu_document_manager.copy', [#[\Closure(name: 'sulu_document_manager.document.subscriber.publish', class: 'Sulu\\Bundle\\PageBundle\\Document\\Subscriber\\PublishSubscriber')] fn () => ($container->privates['sulu_document_manager.document.subscriber.publish'] ?? $container->load('getSuluDocumentManager_Document_Subscriber_PublishService')), 'copyNodeInPublicWorkspace'], 0);
        $instance->addListener('sulu_document_manager.reorder', [#[\Closure(name: 'sulu_document_manager.document.subscriber.publish', class: 'Sulu\\Bundle\\PageBundle\\Document\\Subscriber\\PublishSubscriber')] fn () => ($container->privates['sulu_document_manager.document.subscriber.publish'] ?? $container->load('getSuluDocumentManager_Document_Subscriber_PublishService')), 'reorderNodeInPublicWorkspace'], 0);
        $instance->addListener('sulu_document_manager.publish', [#[\Closure(name: 'sulu_document_manager.document.subscriber.publish', class: 'Sulu\\Bundle\\PageBundle\\Document\\Subscriber\\PublishSubscriber')] fn () => ($container->privates['sulu_document_manager.document.subscriber.publish'] ?? $container->load('getSuluDocumentManager_Document_Subscriber_PublishService')), 'setNodeFromPublicWorkspaceForPublishing'], 512);
        $instance->addListener('sulu_document_manager.unpublish', [#[\Closure(name: 'sulu_document_manager.document.subscriber.publish', class: 'Sulu\\Bundle\\PageBundle\\Document\\Subscriber\\PublishSubscriber')] fn () => ($container->privates['sulu_document_manager.document.subscriber.publish'] ?? $container->load('getSuluDocumentManager_Document_Subscriber_PublishService')), 'setNodeFromPublicWorkspaceForUnpublishing'], 512);
        $instance->addListener('sulu_document_manager.unpublish', [#[\Closure(name: 'sulu_document_manager.document.subscriber.publish', class: 'Sulu\\Bundle\\PageBundle\\Document\\Subscriber\\PublishSubscriber')] fn () => ($container->privates['sulu_document_manager.document.subscriber.publish'] ?? $container->load('getSuluDocumentManager_Document_Subscriber_PublishService')), 'removePropertiesFromPublicWorkspace'], 0);
        $instance->addListener('sulu_document_manager.remove_draft', [#[\Closure(name: 'sulu_document_manager.document.subscriber.publish', class: 'Sulu\\Bundle\\PageBundle\\Document\\Subscriber\\PublishSubscriber')] fn () => ($container->privates['sulu_document_manager.document.subscriber.publish'] ?? $container->load('getSuluDocumentManager_Document_Subscriber_PublishService')), 'copyPropertiesFromPublicWorkspace'], 0);
        $instance->addListener('sulu_document_manager.remove_locale', [#[\Closure(name: 'sulu_document_manager.document.subscriber.publish', class: 'Sulu\\Bundle\\PageBundle\\Document\\Subscriber\\PublishSubscriber')] fn () => ($container->privates['sulu_document_manager.document.subscriber.publish'] ?? $container->load('getSuluDocumentManager_Document_Subscriber_PublishService')), 'removeLocalePropertiesFromPublicWorkspace'], 0);
        $instance->addListener('sulu_document_manager.flush', [#[\Closure(name: 'sulu_document_manager.document.subscriber.publish', class: 'Sulu\\Bundle\\PageBundle\\Document\\Subscriber\\PublishSubscriber')] fn () => ($container->privates['sulu_document_manager.document.subscriber.publish'] ?? $container->load('getSuluDocumentManager_Document_Subscriber_PublishService')), 'flushPublicWorkspace'], 0);
        $instance->addListener('sulu_document_manager.copy_locale', [#[\Closure(name: 'sulu_document_manager.document.subscriber.copy_locale', class: 'Sulu\\Component\\Content\\Document\\Subscriber\\CopyLocaleSubscriber')] fn () => ($container->privates['sulu_document_manager.document.subscriber.copy_locale'] ?? $container->load('getSuluDocumentManager_Document_Subscriber_CopyLocaleService')), 'handleCopyLocale'], 0);
        $instance->addListener('sulu_document_manager.remove', [#[\Closure(name: 'sulu_document_manager.document.subscriber.compat.content_mapper', class: 'Sulu\\Component\\Content\\Document\\Subscriber\\Compat\\ContentMapperSubscriber')] fn () => ($container->privates['sulu_document_manager.document.subscriber.compat.content_mapper'] ?? $container->load('getSuluDocumentManager_Document_Subscriber_Compat_ContentMapperService')), 'handlePreRemove'], 510);
        $instance->addListener('sulu_document_manager.remove', [#[\Closure(name: 'sulu_document_manager.document.subscriber.compat.content_mapper', class: 'Sulu\\Component\\Content\\Document\\Subscriber\\Compat\\ContentMapperSubscriber')] fn () => ($container->privates['sulu_document_manager.document.subscriber.compat.content_mapper'] ?? $container->load('getSuluDocumentManager_Document_Subscriber_Compat_ContentMapperService')), 'handlePostRemove'], -100);
        $instance->addListener('sulu_document_manager.persist', [#[\Closure(name: 'sulu_document_manager.document.subscriber.compat.content_mapper', class: 'Sulu\\Component\\Content\\Document\\Subscriber\\Compat\\ContentMapperSubscriber')] fn () => ($container->privates['sulu_document_manager.document.subscriber.compat.content_mapper'] ?? $container->load('getSuluDocumentManager_Document_Subscriber_Compat_ContentMapperService')), 'handlePersist'], 0);
        $instance->addListener('sulu_document_manager.flush', [#[\Closure(name: 'sulu_document_manager.document.subscriber.compat.content_mapper', class: 'Sulu\\Component\\Content\\Document\\Subscriber\\Compat\\ContentMapperSubscriber')] fn () => ($container->privates['sulu_document_manager.document.subscriber.compat.content_mapper'] ?? $container->load('getSuluDocumentManager_Document_Subscriber_Compat_ContentMapperService')), 'handleFlush'], 0);
        $instance->addListener('sulu_document_manager.remove', [#[\Closure(name: 'sulu_document_manager.subscriber.behavior.remove_content', class: 'Sulu\\Component\\Content\\Document\\Subscriber\\StructureRemoveSubscriber')] fn () => ($container->privates['sulu_document_manager.subscriber.behavior.remove_content'] ?? $container->load('getSuluDocumentManager_Subscriber_Behavior_RemoveContentService')), 'handleRemove'], 550);
        $instance->addListener('sulu_document_manager.remove_locale', [#[\Closure(name: 'sulu_page.create_trash_item_subscriber', class: 'Sulu\\Bundle\\PageBundle\\EventListener\\PageTrashSubscriber')] fn () => ($container->privates['sulu_page.create_trash_item_subscriber'] ?? $container->load('getSuluPage_CreateTrashItemSubscriberService')), 'storePageTranslationToTrash'], 1024);
        $instance->addListener('sulu_document_manager.remove', [#[\Closure(name: 'sulu_page.create_trash_item_subscriber', class: 'Sulu\\Bundle\\PageBundle\\EventListener\\PageTrashSubscriber')] fn () => ($container->privates['sulu_page.create_trash_item_subscriber'] ?? $container->load('getSuluPage_CreateTrashItemSubscriberService')), 'storePageToTrash'], 1024);
        $instance->addListener('sulu_document_manager.flush', [#[\Closure(name: 'sulu_page.create_trash_item_subscriber', class: 'Sulu\\Bundle\\PageBundle\\EventListener\\PageTrashSubscriber')] fn () => ($container->privates['sulu_page.create_trash_item_subscriber'] ?? $container->load('getSuluPage_CreateTrashItemSubscriberService')), 'flushTrashItem'], 0);
        $instance->addListener('sulu_document_manager.clear', [#[\Closure(name: 'sulu_page.create_trash_item_subscriber', class: 'Sulu\\Bundle\\PageBundle\\EventListener\\PageTrashSubscriber')] fn () => ($container->privates['sulu_page.create_trash_item_subscriber'] ?? $container->load('getSuluPage_CreateTrashItemSubscriberService')), 'clearPendingTrashItem'], 0);
        $instance->addListener('sulu_document_manager.configure_options', [#[\Closure(name: 'sulu_http_cache.event_subscriber.invalidation', class: 'Sulu\\Bundle\\HttpCacheBundle\\EventSubscriber\\InvalidationSubscriber')] fn () => ($container->privates['sulu_http_cache.event_subscriber.invalidation'] ?? $container->load('getSuluHttpCache_EventSubscriber_InvalidationService')), 'configureOptions'], 0);
        $instance->addListener('sulu_document_manager.publish', [#[\Closure(name: 'sulu_http_cache.event_subscriber.invalidation', class: 'Sulu\\Bundle\\HttpCacheBundle\\EventSubscriber\\InvalidationSubscriber')] fn () => ($container->privates['sulu_http_cache.event_subscriber.invalidation'] ?? $container->load('getSuluHttpCache_EventSubscriber_InvalidationService')), 'invalidateDocumentBeforePublishing'], 1024);
        $instance->addListener('sulu_document_manager.unpublish', [#[\Closure(name: 'sulu_http_cache.event_subscriber.invalidation', class: 'Sulu\\Bundle\\HttpCacheBundle\\EventSubscriber\\InvalidationSubscriber')] fn () => ($container->privates['sulu_http_cache.event_subscriber.invalidation'] ?? $container->load('getSuluHttpCache_EventSubscriber_InvalidationService')), 'invalidateDocumentBeforeUnpublishing'], 1024);
        $instance->addListener('sulu_document_manager.remove', [#[\Closure(name: 'sulu_http_cache.event_subscriber.invalidation', class: 'Sulu\\Bundle\\HttpCacheBundle\\EventSubscriber\\InvalidationSubscriber')] fn () => ($container->privates['sulu_http_cache.event_subscriber.invalidation'] ?? $container->load('getSuluHttpCache_EventSubscriber_InvalidationService')), 'invalidateDocumentBeforeRemoving'], 1024);
        $instance->addListener('sulu_document_manager.remove_locale', [#[\Closure(name: 'sulu_http_cache.event_subscriber.invalidation', class: 'Sulu\\Bundle\\HttpCacheBundle\\EventSubscriber\\InvalidationSubscriber')] fn () => ($container->privates['sulu_http_cache.event_subscriber.invalidation'] ?? $container->load('getSuluHttpCache_EventSubscriber_InvalidationService')), 'invalidateDocumentBeforeRemovingLocale'], 1024);
        $instance->addListener('sulu_document_manager.flush', [#[\Closure(name: 'sulu_snippet.document_manager.event_subscriber', class: 'Sulu\\Bundle\\SnippetBundle\\EventListener\\DomainEventSubscriber')] fn () => ($container->privates['sulu_snippet.document_manager.event_subscriber'] ?? $container->load('getSuluSnippet_DocumentManager_EventSubscriberService')), 'handleFlush'], 0);
        $instance->addListener('sulu_document_manager.persist', [#[\Closure(name: 'sulu_snippet.document_manager.event_subscriber', class: 'Sulu\\Bundle\\SnippetBundle\\EventListener\\DomainEventSubscriber')] fn () => ($container->privates['sulu_snippet.document_manager.event_subscriber'] ?? $container->load('getSuluSnippet_DocumentManager_EventSubscriberService')), 'handlePrePersist'], 479);
        $instance->addListener('sulu_document_manager.persist', [#[\Closure(name: 'sulu_snippet.document_manager.event_subscriber', class: 'Sulu\\Bundle\\SnippetBundle\\EventListener\\DomainEventSubscriber')] fn () => ($container->privates['sulu_snippet.document_manager.event_subscriber'] ?? $container->load('getSuluSnippet_DocumentManager_EventSubscriberService')), 'handlePersist'], -10000);
        $instance->addListener('sulu_document_manager.remove', [#[\Closure(name: 'sulu_snippet.document_manager.event_subscriber', class: 'Sulu\\Bundle\\SnippetBundle\\EventListener\\DomainEventSubscriber')] fn () => ($container->privates['sulu_snippet.document_manager.event_subscriber'] ?? $container->load('getSuluSnippet_DocumentManager_EventSubscriberService')), 'handleRemove'], -10000);
        $instance->addListener('sulu_document_manager.remove_locale', [#[\Closure(name: 'sulu_snippet.document_manager.event_subscriber', class: 'Sulu\\Bundle\\SnippetBundle\\EventListener\\DomainEventSubscriber')] fn () => ($container->privates['sulu_snippet.document_manager.event_subscriber'] ?? $container->load('getSuluSnippet_DocumentManager_EventSubscriberService')), 'handleRemoveLocale'], -10000);
        $instance->addListener('sulu_document_manager.copy_locale', [#[\Closure(name: 'sulu_snippet.document_manager.event_subscriber', class: 'Sulu\\Bundle\\SnippetBundle\\EventListener\\DomainEventSubscriber')] fn () => ($container->privates['sulu_snippet.document_manager.event_subscriber'] ?? $container->load('getSuluSnippet_DocumentManager_EventSubscriberService')), 'handleCopyLocale'], -10000);
        $instance->addListener('sulu_document_manager.copy', [#[\Closure(name: 'sulu_snippet.document_manager.event_subscriber', class: 'Sulu\\Bundle\\SnippetBundle\\EventListener\\DomainEventSubscriber')] fn () => ($container->privates['sulu_snippet.document_manager.event_subscriber'] ?? $container->load('getSuluSnippet_DocumentManager_EventSubscriberService')), 'handleCopy'], -10000);
        $instance->addListener('sulu_document_manager.remove', [#[\Closure(name: 'sulu_snippet.snippet_trash_subscriber', class: 'Sulu\\Bundle\\SnippetBundle\\EventListener\\SnippetTrashSubscriber')] fn () => ($container->privates['sulu_snippet.snippet_trash_subscriber'] ?? $container->load('getSuluSnippet_SnippetTrashSubscriberService')), 'storeSnippetToTrash'], 1024);
        $instance->addListener('sulu_document_manager.flush', [#[\Closure(name: 'sulu_snippet.snippet_trash_subscriber', class: 'Sulu\\Bundle\\SnippetBundle\\EventListener\\SnippetTrashSubscriber')] fn () => ($container->privates['sulu_snippet.snippet_trash_subscriber'] ?? $container->load('getSuluSnippet_SnippetTrashSubscriberService')), 'flushTrashItem'], 0);
        $instance->addListener('sulu_document_manager.clear', [#[\Closure(name: 'sulu_snippet.snippet_trash_subscriber', class: 'Sulu\\Bundle\\SnippetBundle\\EventListener\\SnippetTrashSubscriber')] fn () => ($container->privates['sulu_snippet.snippet_trash_subscriber'] ?? $container->load('getSuluSnippet_SnippetTrashSubscriberService')), 'clearPendingTrashItem'], 0);
        $instance->addListener('sulu_document_manager.clear', [#[\Closure(name: 'sulu_document_manager.document_domain_event_collector_subscriber', class: 'Sulu\\Bundle\\DocumentManagerBundle\\Collector\\DocumentDomainEventCollectorSubscriber')] fn () => ($container->privates['sulu_document_manager.document_domain_event_collector_subscriber'] ?? $container->load('getSuluDocumentManager_DocumentDomainEventCollectorSubscriberService')), 'onClear'], -256);
        $instance->addListener('sulu_document_manager.flush', [#[\Closure(name: 'sulu_document_manager.document_domain_event_collector_subscriber', class: 'Sulu\\Bundle\\DocumentManagerBundle\\Collector\\DocumentDomainEventCollectorSubscriber')] fn () => ($container->privates['sulu_document_manager.document_domain_event_collector_subscriber'] ?? $container->load('getSuluDocumentManager_DocumentDomainEventCollectorSubscriberService')), 'onFlush'], -256);
        $instance->addListener('sulu_document_manager.hydrate', [#[\Closure(name: 'sulu_document_manager.subscriber.core.instantiator', class: 'Sulu\\Component\\DocumentManager\\Subscriber\\Core\\InstantiatorSubscriber')] fn () => ($container->privates['sulu_document_manager.subscriber.core.instantiator'] ?? $container->load('getSuluDocumentManager_Subscriber_Core_InstantiatorService')), 'handleHydrate'], 500);
        $instance->addListener('sulu_document_manager.create', [#[\Closure(name: 'sulu_document_manager.subscriber.core.instantiator', class: 'Sulu\\Component\\DocumentManager\\Subscriber\\Core\\InstantiatorSubscriber')] fn () => ($container->privates['sulu_document_manager.subscriber.core.instantiator'] ?? $container->load('getSuluDocumentManager_Subscriber_Core_InstantiatorService')), 'handleCreate'], 500);
        $instance->addListener('sulu_document_manager.hydrate', [#[\Closure(name: 'sulu_document_manager.subscriber.core.registrator', class: 'Sulu\\Component\\DocumentManager\\Subscriber\\Core\\RegistratorSubscriber')] fn () => ($container->privates['sulu_document_manager.subscriber.core.registrator'] ?? $container->load('getSuluDocumentManager_Subscriber_Core_RegistratorService')), 'handleDefaultLocale'], 520);
        $instance->addListener('sulu_document_manager.hydrate', [#[\Closure(name: 'sulu_document_manager.subscriber.core.registrator', class: 'Sulu\\Component\\DocumentManager\\Subscriber\\Core\\RegistratorSubscriber')] fn () => ($container->privates['sulu_document_manager.subscriber.core.registrator'] ?? $container->load('getSuluDocumentManager_Subscriber_Core_RegistratorService')), 'handleDocumentFromRegistry'], 510);
        $instance->addListener('sulu_document_manager.hydrate', [#[\Closure(name: 'sulu_document_manager.subscriber.core.registrator', class: 'Sulu\\Component\\DocumentManager\\Subscriber\\Core\\RegistratorSubscriber')] fn () => ($container->privates['sulu_document_manager.subscriber.core.registrator'] ?? $container->load('getSuluDocumentManager_Subscriber_Core_RegistratorService')), 'handleStopPropagationAndResetLocale'], 509);
        $instance->addListener('sulu_document_manager.hydrate', [#[\Closure(name: 'sulu_document_manager.subscriber.core.registrator', class: 'Sulu\\Component\\DocumentManager\\Subscriber\\Core\\RegistratorSubscriber')] fn () => ($container->privates['sulu_document_manager.subscriber.core.registrator'] ?? $container->load('getSuluDocumentManager_Subscriber_Core_RegistratorService')), 'handleHydrate'], 490);
        $instance->addListener('sulu_document_manager.hydrate', [#[\Closure(name: 'sulu_document_manager.subscriber.core.registrator', class: 'Sulu\\Component\\DocumentManager\\Subscriber\\Core\\RegistratorSubscriber')] fn () => ($container->privates['sulu_document_manager.subscriber.core.registrator'] ?? $container->load('getSuluDocumentManager_Subscriber_Core_RegistratorService')), 'handleEndHydrate'], -500);
        $instance->addListener('sulu_document_manager.persist', [#[\Closure(name: 'sulu_document_manager.subscriber.core.registrator', class: 'Sulu\\Component\\DocumentManager\\Subscriber\\Core\\RegistratorSubscriber')] fn () => ($container->privates['sulu_document_manager.subscriber.core.registrator'] ?? $container->load('getSuluDocumentManager_Subscriber_Core_RegistratorService')), 'handlePersist'], 450);
        $instance->addListener('sulu_document_manager.persist', [#[\Closure(name: 'sulu_document_manager.subscriber.core.registrator', class: 'Sulu\\Component\\DocumentManager\\Subscriber\\Core\\RegistratorSubscriber')] fn () => ($container->privates['sulu_document_manager.subscriber.core.registrator'] ?? $container->load('getSuluDocumentManager_Subscriber_Core_RegistratorService')), 'handleNodeFromRegistry'], 510);
        $instance->addListener('sulu_document_manager.persist', [#[\Closure(name: 'sulu_document_manager.subscriber.core.registrator', class: 'Sulu\\Component\\DocumentManager\\Subscriber\\Core\\RegistratorSubscriber')] fn () => ($container->privates['sulu_document_manager.subscriber.core.registrator'] ?? $container->load('getSuluDocumentManager_Subscriber_Core_RegistratorService')), 'handleEndPersist'], -500);
        $instance->addListener('sulu_document_manager.remove', [#[\Closure(name: 'sulu_document_manager.subscriber.core.registrator', class: 'Sulu\\Component\\DocumentManager\\Subscriber\\Core\\RegistratorSubscriber')] fn () => ($container->privates['sulu_document_manager.subscriber.core.registrator'] ?? $container->load('getSuluDocumentManager_Subscriber_Core_RegistratorService')), 'handleRemove'], 490);
        $instance->addListener('sulu_document_manager.clear', [#[\Closure(name: 'sulu_document_manager.subscriber.core.registrator', class: 'Sulu\\Component\\DocumentManager\\Subscriber\\Core\\RegistratorSubscriber')] fn () => ($container->privates['sulu_document_manager.subscriber.core.registrator'] ?? $container->load('getSuluDocumentManager_Subscriber_Core_RegistratorService')), 'handleClear'], 500);
        $instance->addListener('sulu_document_manager.reorder', [#[\Closure(name: 'sulu_document_manager.subscriber.core.registrator', class: 'Sulu\\Component\\DocumentManager\\Subscriber\\Core\\RegistratorSubscriber')] fn () => ($container->privates['sulu_document_manager.subscriber.core.registrator'] ?? $container->load('getSuluDocumentManager_Subscriber_Core_RegistratorService')), 'handleNodeFromRegistry'], 510);
        $instance->addListener('sulu_document_manager.configure_options', [#[\Closure(name: 'sulu_document_manager.subscriber.core.registrator', class: 'Sulu\\Component\\DocumentManager\\Subscriber\\Core\\RegistratorSubscriber')] fn () => ($container->privates['sulu_document_manager.subscriber.core.registrator'] ?? $container->load('getSuluDocumentManager_Subscriber_Core_RegistratorService')), 'configureOptions'], 0);
        $instance->addListener('sulu_document_manager.remove_draft', [#[\Closure(name: 'sulu_document_manager.subscriber.core.registrator', class: 'Sulu\\Component\\DocumentManager\\Subscriber\\Core\\RegistratorSubscriber')] fn () => ($container->privates['sulu_document_manager.subscriber.core.registrator'] ?? $container->load('getSuluDocumentManager_Subscriber_Core_RegistratorService')), 'handleNodeFromRegistry'], 512);
        $instance->addListener('sulu_document_manager.remove_locale', [#[\Closure(name: 'sulu_document_manager.subscriber.core.registrator', class: 'Sulu\\Component\\DocumentManager\\Subscriber\\Core\\RegistratorSubscriber')] fn () => ($container->privates['sulu_document_manager.subscriber.core.registrator'] ?? $container->load('getSuluDocumentManager_Subscriber_Core_RegistratorService')), 'handleNodeFromRegistry'], 512);
        $instance->addListener('sulu_document_manager.restore', [#[\Closure(name: 'sulu_document_manager.subscriber.core.registrator', class: 'Sulu\\Component\\DocumentManager\\Subscriber\\Core\\RegistratorSubscriber')] fn () => ($container->privates['sulu_document_manager.subscriber.core.registrator'] ?? $container->load('getSuluDocumentManager_Subscriber_Core_RegistratorService')), 'handleNodeFromRegistry'], 512);
        $instance->addListener('sulu_document_manager.reorder', [#[\Closure(name: 'sulu_document_manager.subscriber.phpcr.reorder', class: 'Sulu\\Component\\DocumentManager\\Subscriber\\Phpcr\\ReorderSubscriber')] fn () => ($container->privates['sulu_document_manager.subscriber.phpcr.reorder'] ?? $container->load('getSuluDocumentManager_Subscriber_Phpcr_ReorderService')), 'handleReorder'], 500);
        $instance->addListener('sulu_document_manager.persist', [#[\Closure(name: 'sulu_document_manager.subscriber.phpcr.mixin', class: 'Sulu\\Component\\DocumentManager\\Subscriber\\Behavior\\Mapping\\MixinSubscriber')] fn () => ($container->privates['sulu_document_manager.subscriber.phpcr.mixin'] ?? $container->load('getSuluDocumentManager_Subscriber_Phpcr_MixinService')), 'setDocumentMixinsOnNode'], 468);
        $instance->addListener('sulu_document_manager.publish', [#[\Closure(name: 'sulu_document_manager.subscriber.phpcr.mixin', class: 'Sulu\\Component\\DocumentManager\\Subscriber\\Behavior\\Mapping\\MixinSubscriber')] fn () => ($container->privates['sulu_document_manager.subscriber.phpcr.mixin'] ?? $container->load('getSuluDocumentManager_Subscriber_Phpcr_MixinService')), 'setDocumentMixinsOnNode'], 468);
        $instance->addListener('sulu_document_manager.find', [#[\Closure(name: 'sulu_document_manager.subscriber.phpcr.find', class: 'Sulu\\Component\\DocumentManager\\Subscriber\\Phpcr\\FindSubscriber')] fn () => ($container->privates['sulu_document_manager.subscriber.phpcr.find'] ?? $container->load('getSuluDocumentManager_Subscriber_Phpcr_FindService')), 'handleFind'], 500);
        $instance->addListener('sulu_document_manager.configure_options', [#[\Closure(name: 'sulu_document_manager.subscriber.phpcr.find', class: 'Sulu\\Component\\DocumentManager\\Subscriber\\Phpcr\\FindSubscriber')] fn () => ($container->privates['sulu_document_manager.subscriber.phpcr.find'] ?? $container->load('getSuluDocumentManager_Subscriber_Phpcr_FindService')), 'configureOptions'], 0);
        $instance->addListener('sulu_document_manager.query.create', [#[\Closure(name: 'sulu_document_manager.subscriber.phpcr.query', class: 'Sulu\\Component\\DocumentManager\\Subscriber\\Phpcr\\QuerySubscriber')] fn () => ($container->privates['sulu_document_manager.subscriber.phpcr.query'] ?? $container->load('getSuluDocumentManager_Subscriber_Phpcr_QueryService')), 'handleCreate'], 500);
        $instance->addListener('sulu_document_manager.query.create_builder', [#[\Closure(name: 'sulu_document_manager.subscriber.phpcr.query', class: 'Sulu\\Component\\DocumentManager\\Subscriber\\Phpcr\\QuerySubscriber')] fn () => ($container->privates['sulu_document_manager.subscriber.phpcr.query'] ?? $container->load('getSuluDocumentManager_Subscriber_Phpcr_QueryService')), 'handleCreateBuilder'], 500);
        $instance->addListener('sulu_document_manager.query.execute', [#[\Closure(name: 'sulu_document_manager.subscriber.phpcr.query', class: 'Sulu\\Component\\DocumentManager\\Subscriber\\Phpcr\\QuerySubscriber')] fn () => ($container->privates['sulu_document_manager.subscriber.phpcr.query'] ?? $container->load('getSuluDocumentManager_Subscriber_Phpcr_QueryService')), 'handleQueryExecute'], 500);
        $instance->addListener('sulu_document_manager.move', [#[\Closure(name: 'sulu_document_manager.subscriber.phpcr.general', class: 'Sulu\\Component\\DocumentManager\\Subscriber\\Phpcr\\GeneralSubscriber')] fn () => ($container->privates['sulu_document_manager.subscriber.phpcr.general'] ?? $container->load('getSuluDocumentManager_Subscriber_Phpcr_GeneralService')), 'handleMove'], 400);
        $instance->addListener('sulu_document_manager.copy', [#[\Closure(name: 'sulu_document_manager.subscriber.phpcr.general', class: 'Sulu\\Component\\DocumentManager\\Subscriber\\Phpcr\\GeneralSubscriber')] fn () => ($container->privates['sulu_document_manager.subscriber.phpcr.general'] ?? $container->load('getSuluDocumentManager_Subscriber_Phpcr_GeneralService')), 'handleCopy'], 400);
        $instance->addListener('sulu_document_manager.clear', [#[\Closure(name: 'sulu_document_manager.subscriber.phpcr.general', class: 'Sulu\\Component\\DocumentManager\\Subscriber\\Phpcr\\GeneralSubscriber')] fn () => ($container->privates['sulu_document_manager.subscriber.phpcr.general'] ?? $container->load('getSuluDocumentManager_Subscriber_Phpcr_GeneralService')), 'handleClear'], 500);
        $instance->addListener('sulu_document_manager.flush', [#[\Closure(name: 'sulu_document_manager.subscriber.phpcr.general', class: 'Sulu\\Component\\DocumentManager\\Subscriber\\Phpcr\\GeneralSubscriber')] fn () => ($container->privates['sulu_document_manager.subscriber.phpcr.general'] ?? $container->load('getSuluDocumentManager_Subscriber_Phpcr_GeneralService')), 'handleFlush'], 500);
        $instance->addListener('sulu_document_manager.remove', [#[\Closure(name: 'sulu_document_manager.subscriber.phpcr.remove', class: 'Sulu\\Component\\DocumentManager\\Subscriber\\Phpcr\\RemoveSubscriber')] fn () => ($container->privates['sulu_document_manager.subscriber.phpcr.remove'] ?? $container->load('getSuluDocumentManager_Subscriber_Phpcr_RemoveService')), 'handleRemove'], 500);
        $instance->addListener('sulu_document_manager.hydrate', [#[\Closure(name: 'sulu_document_manager.subscriber.core.mapping', class: 'Sulu\\Component\\DocumentManager\\Subscriber\\Core\\MappingSubscriber')] fn () => ($container->privates['sulu_document_manager.subscriber.core.mapping'] ?? $container->load('getSuluDocumentManager_Subscriber_Core_MappingService')), 'handleHydrate'], -100);
        $instance->addListener('sulu_document_manager.persist', [#[\Closure(name: 'sulu_document_manager.subscriber.core.mapping', class: 'Sulu\\Component\\DocumentManager\\Subscriber\\Core\\MappingSubscriber')] fn () => ($container->privates['sulu_document_manager.subscriber.core.mapping'] ?? $container->load('getSuluDocumentManager_Subscriber_Core_MappingService')), 'handleMapping'], -100);
        $instance->addListener('sulu_document_manager.publish', [#[\Closure(name: 'sulu_document_manager.subscriber.core.mapping', class: 'Sulu\\Component\\DocumentManager\\Subscriber\\Core\\MappingSubscriber')] fn () => ($container->privates['sulu_document_manager.subscriber.core.mapping'] ?? $container->load('getSuluDocumentManager_Subscriber_Core_MappingService')), 'handleMapping'], -128);
        $instance->addListener('sulu_document_manager.refresh', [#[\Closure(name: 'sulu_document_manager.subscriber.phpcr.refresh', class: 'Sulu\\Component\\DocumentManager\\Subscriber\\Phpcr\\RefreshSubscriber')] fn () => ($container->privates['sulu_document_manager.subscriber.phpcr.refresh'] ?? $container->load('getSuluDocumentManager_Subscriber_Phpcr_RefreshService')), 'refreshDocument'], 0);
        $instance->addListener('sulu_document_manager.remove_draft', [#[\Closure(name: 'sulu_document_manager.subscriber.phpcr.refresh', class: 'Sulu\\Component\\DocumentManager\\Subscriber\\Phpcr\\RefreshSubscriber')] fn () => ($container->privates['sulu_document_manager.subscriber.phpcr.refresh'] ?? $container->load('getSuluDocumentManager_Subscriber_Phpcr_RefreshService')), 'refreshDocumentForDeleteDraft'], -512);
        $instance->addListener('sulu_document_manager.configure_options', [#[\Closure(name: 'sulu_document_manager.subscriber.security', class: 'Sulu\\Bundle\\DocumentManagerBundle\\Document\\Subscriber\\SecuritySubscriber')] fn () => ($container->privates['sulu_document_manager.subscriber.security'] ?? $container->load('getSuluDocumentManager_Subscriber_SecurityService')), 'setDefaultUser'], 0);
        $instance->addListener('sulu_document_manager.configure_options', [#[\Closure(name: 'sulu_document_manager.subscriber.behavior.auto_name', class: 'Sulu\\Component\\DocumentManager\\Subscriber\\Behavior\\Path\\AutoNameSubscriber')] fn () => ($container->privates['sulu_document_manager.subscriber.behavior.auto_name'] ?? $container->load('getSuluDocumentManager_Subscriber_Behavior_AutoNameService')), 'configureOptions'], 0);
        $instance->addListener('sulu_document_manager.persist', [#[\Closure(name: 'sulu_document_manager.subscriber.behavior.auto_name', class: 'Sulu\\Component\\DocumentManager\\Subscriber\\Behavior\\Path\\AutoNameSubscriber')] fn () => ($container->privates['sulu_document_manager.subscriber.behavior.auto_name'] ?? $container->load('getSuluDocumentManager_Subscriber_Behavior_AutoNameService')), 'handleScheduleRename'], 0);
        $instance->addListener('sulu_document_manager.persist', [#[\Closure(name: 'sulu_document_manager.subscriber.behavior.auto_name', class: 'Sulu\\Component\\DocumentManager\\Subscriber\\Behavior\\Path\\AutoNameSubscriber')] fn () => ($container->privates['sulu_document_manager.subscriber.behavior.auto_name'] ?? $container->load('getSuluDocumentManager_Subscriber_Behavior_AutoNameService')), 'handlePersist'], 480);
        $instance->addListener('sulu_document_manager.move', [#[\Closure(name: 'sulu_document_manager.subscriber.behavior.auto_name', class: 'Sulu\\Component\\DocumentManager\\Subscriber\\Behavior\\Path\\AutoNameSubscriber')] fn () => ($container->privates['sulu_document_manager.subscriber.behavior.auto_name'] ?? $container->load('getSuluDocumentManager_Subscriber_Behavior_AutoNameService')), 'handleMove'], 480);
        $instance->addListener('sulu_document_manager.copy', [#[\Closure(name: 'sulu_document_manager.subscriber.behavior.auto_name', class: 'Sulu\\Component\\DocumentManager\\Subscriber\\Behavior\\Path\\AutoNameSubscriber')] fn () => ($container->privates['sulu_document_manager.subscriber.behavior.auto_name'] ?? $container->load('getSuluDocumentManager_Subscriber_Behavior_AutoNameService')), 'handleCopy'], 480);
        $instance->addListener('sulu_document_manager.flush', [#[\Closure(name: 'sulu_document_manager.subscriber.behavior.auto_name', class: 'Sulu\\Component\\DocumentManager\\Subscriber\\Behavior\\Path\\AutoNameSubscriber')] fn () => ($container->privates['sulu_document_manager.subscriber.behavior.auto_name'] ?? $container->load('getSuluDocumentManager_Subscriber_Behavior_AutoNameService')), 'handleRename'], 510);
        $instance->addListener('sulu_document_manager.persist', [#[\Closure(name: 'sulu_document_manager.subscriber.behavior.path.explicit', class: 'Sulu\\Component\\DocumentManager\\Subscriber\\Behavior\\Path\\ExplicitSubscriber')] fn () => ($container->privates['sulu_document_manager.subscriber.behavior.path.explicit'] ?? $container->load('getSuluDocumentManager_Subscriber_Behavior_Path_ExplicitService')), 'handlePersist'], 485);
        $instance->addListener('sulu_document_manager.configure_options', [#[\Closure(name: 'sulu_document_manager.subscriber.behavior.path.explicit', class: 'Sulu\\Component\\DocumentManager\\Subscriber\\Behavior\\Path\\ExplicitSubscriber')] fn () => ($container->privates['sulu_document_manager.subscriber.behavior.path.explicit'] ?? $container->load('getSuluDocumentManager_Subscriber_Behavior_Path_ExplicitService')), 'configureOptions'], 0);
        $instance->addListener('sulu_document_manager.hydrate', [#[\Closure(name: 'sulu_document_manager.suscriber.behavior.blame', class: 'Sulu\\Component\\Content\\Document\\Subscriber\\BlameSubscriber')] fn () => ($container->privates['sulu_document_manager.suscriber.behavior.blame'] ?? $container->load('getSuluDocumentManager_Suscriber_Behavior_BlameService')), 'setBlamesOnDocument'], 0);
        $instance->addListener('sulu_document_manager.persist', [#[\Closure(name: 'sulu_document_manager.suscriber.behavior.blame', class: 'Sulu\\Component\\Content\\Document\\Subscriber\\BlameSubscriber')] fn () => ($container->privates['sulu_document_manager.suscriber.behavior.blame'] ?? $container->load('getSuluDocumentManager_Suscriber_Behavior_BlameService')), 'setBlamesOnNodeForPersist'], 0);
        $instance->addListener('sulu_document_manager.publish', [#[\Closure(name: 'sulu_document_manager.suscriber.behavior.blame', class: 'Sulu\\Component\\Content\\Document\\Subscriber\\BlameSubscriber')] fn () => ($container->privates['sulu_document_manager.suscriber.behavior.blame'] ?? $container->load('getSuluDocumentManager_Suscriber_Behavior_BlameService')), 'setBlamesOnNodeForPublish'], 0);
        $instance->addListener('sulu_document_manager.restore', [#[\Closure(name: 'sulu_document_manager.suscriber.behavior.blame', class: 'Sulu\\Component\\Content\\Document\\Subscriber\\BlameSubscriber')] fn () => ($container->privates['sulu_document_manager.suscriber.behavior.blame'] ?? $container->load('getSuluDocumentManager_Suscriber_Behavior_BlameService')), 'setChangerForRestore'], -32);
        $instance->addListener('sulu_document_manager.hydrate', [#[\Closure(name: 'sulu_document_manager.suscriber.behavior.author', class: 'Sulu\\Component\\Content\\Document\\Subscriber\\AuthorSubscriber')] fn () => ($container->privates['sulu_document_manager.suscriber.behavior.author'] ?? $container->load('getSuluDocumentManager_Suscriber_Behavior_AuthorService')), 'setAuthorOnDocument'], 0);
        $instance->addListener('sulu_document_manager.persist', [#[\Closure(name: 'sulu_document_manager.suscriber.behavior.author', class: 'Sulu\\Component\\Content\\Document\\Subscriber\\AuthorSubscriber')] fn () => ($container->privates['sulu_document_manager.suscriber.behavior.author'] ?? $container->load('getSuluDocumentManager_Suscriber_Behavior_AuthorService')), 'setAuthorOnNode'], 0);
        $instance->addListener('sulu_document_manager.publish', [#[\Closure(name: 'sulu_document_manager.suscriber.behavior.author', class: 'Sulu\\Component\\Content\\Document\\Subscriber\\AuthorSubscriber')] fn () => ($container->privates['sulu_document_manager.suscriber.behavior.author'] ?? $container->load('getSuluDocumentManager_Suscriber_Behavior_AuthorService')), 'setAuthorOnNode'], 0);
        $instance->addListener('sulu_document_manager.hydrate', [#[\Closure(name: 'sulu_document_manager.suscriber.behavior.last_modified', class: 'Sulu\\Component\\Content\\Document\\Subscriber\\LastModifiedSubscriber')] fn () => ($container->privates['sulu_document_manager.suscriber.behavior.last_modified'] ?? $container->load('getSuluDocumentManager_Suscriber_Behavior_LastModifiedService')), 'setLastModifiedOnDocument'], 0);
        $instance->addListener('sulu_document_manager.persist', [#[\Closure(name: 'sulu_document_manager.suscriber.behavior.last_modified', class: 'Sulu\\Component\\Content\\Document\\Subscriber\\LastModifiedSubscriber')] fn () => ($container->privates['sulu_document_manager.suscriber.behavior.last_modified'] ?? $container->load('getSuluDocumentManager_Suscriber_Behavior_LastModifiedService')), 'setLastModifiedOnNode'], 0);
        $instance->addListener('sulu_document_manager.publish', [#[\Closure(name: 'sulu_document_manager.suscriber.behavior.last_modified', class: 'Sulu\\Component\\Content\\Document\\Subscriber\\LastModifiedSubscriber')] fn () => ($container->privates['sulu_document_manager.suscriber.behavior.last_modified'] ?? $container->load('getSuluDocumentManager_Suscriber_Behavior_LastModifiedService')), 'setLastModifiedOnNode'], 0);
        $instance->addListener('sulu_document_manager.persist', [#[\Closure(name: 'sulu_document_manager.suscriber.behavior.timestamp', class: 'Sulu\\Component\\DocumentManager\\Subscriber\\Behavior\\Audit\\TimestampSubscriber')] fn () => ($container->privates['sulu_document_manager.suscriber.behavior.timestamp'] ?? $container->load('getSuluDocumentManager_Suscriber_Behavior_TimestampService')), 'setTimestampsOnNodeForPersist'], 0);
        $instance->addListener('sulu_document_manager.publish', [#[\Closure(name: 'sulu_document_manager.suscriber.behavior.timestamp', class: 'Sulu\\Component\\DocumentManager\\Subscriber\\Behavior\\Audit\\TimestampSubscriber')] fn () => ($container->privates['sulu_document_manager.suscriber.behavior.timestamp'] ?? $container->load('getSuluDocumentManager_Suscriber_Behavior_TimestampService')), 'setTimestampsOnNodeForPublish'], 0);
        $instance->addListener('sulu_document_manager.restore', [#[\Closure(name: 'sulu_document_manager.suscriber.behavior.timestamp', class: 'Sulu\\Component\\DocumentManager\\Subscriber\\Behavior\\Audit\\TimestampSubscriber')] fn () => ($container->privates['sulu_document_manager.suscriber.behavior.timestamp'] ?? $container->load('getSuluDocumentManager_Suscriber_Behavior_TimestampService')), 'setChangedForRestore'], -32);
        $instance->addListener('sulu_document_manager.hydrate', [#[\Closure(name: 'sulu_document_manager.suscriber.behavior.timestamp', class: 'Sulu\\Component\\DocumentManager\\Subscriber\\Behavior\\Audit\\TimestampSubscriber')] fn () => ($container->privates['sulu_document_manager.suscriber.behavior.timestamp'] ?? $container->load('getSuluDocumentManager_Suscriber_Behavior_TimestampService')), 'setTimestampsOnDocument'], 0);
        $instance->addListener('sulu_document_manager.hydrate', [#[\Closure(name: 'sulu_document_manager.suscriber.behavior.node_name', class: 'Sulu\\Component\\DocumentManager\\Subscriber\\Behavior\\Mapping\\NodeNameSubscriber')] fn () => ($container->privates['sulu_document_manager.suscriber.behavior.node_name'] ??= new \Sulu\Component\DocumentManager\Subscriber\Behavior\Mapping\NodeNameSubscriber()), 'setFinalNodeName'], 0);
        $instance->addListener('sulu_document_manager.persist', [#[\Closure(name: 'sulu_document_manager.suscriber.behavior.node_name', class: 'Sulu\\Component\\DocumentManager\\Subscriber\\Behavior\\Mapping\\NodeNameSubscriber')] fn () => ($container->privates['sulu_document_manager.suscriber.behavior.node_name'] ??= new \Sulu\Component\DocumentManager\Subscriber\Behavior\Mapping\NodeNameSubscriber()), 'setInitialNodeName'], 0);
        $instance->addListener('sulu_document_manager.persist', [#[\Closure(name: 'sulu_document_manager.suscriber.behavior.node_name', class: 'Sulu\\Component\\DocumentManager\\Subscriber\\Behavior\\Mapping\\NodeNameSubscriber')] fn () => ($container->privates['sulu_document_manager.suscriber.behavior.node_name'] ??= new \Sulu\Component\DocumentManager\Subscriber\Behavior\Mapping\NodeNameSubscriber()), 'setFinalNodeName'], -480);
        $instance->addListener('sulu_document_manager.hydrate', [#[\Closure(name: 'sulu_document_manager.suscriber.behavior.uuid', class: 'Sulu\\Component\\DocumentManager\\Subscriber\\Behavior\\Mapping\\UuidSubscriber')] fn () => ($container->privates['sulu_document_manager.suscriber.behavior.uuid'] ??= new \Sulu\Component\DocumentManager\Subscriber\Behavior\Mapping\UuidSubscriber()), 'handleUuid'], 0);
        $instance->addListener('sulu_document_manager.persist', [#[\Closure(name: 'sulu_document_manager.suscriber.behavior.uuid', class: 'Sulu\\Component\\DocumentManager\\Subscriber\\Behavior\\Mapping\\UuidSubscriber')] fn () => ($container->privates['sulu_document_manager.suscriber.behavior.uuid'] ??= new \Sulu\Component\DocumentManager\Subscriber\Behavior\Mapping\UuidSubscriber()), 'handleUuid'], 0);
        $instance->addListener('sulu_document_manager.hydrate', [#[\Closure(name: 'sulu_document_manager.suscriber.behavior.locale', class: 'Sulu\\Component\\DocumentManager\\Subscriber\\Behavior\\Mapping\\LocaleSubscriber')] fn () => ($container->privates['sulu_document_manager.suscriber.behavior.locale'] ?? $container->load('getSuluDocumentManager_Suscriber_Behavior_LocaleService')), 'handleLocale'], 410);
        $instance->addListener('sulu_document_manager.persist', [#[\Closure(name: 'sulu_document_manager.suscriber.behavior.locale', class: 'Sulu\\Component\\DocumentManager\\Subscriber\\Behavior\\Mapping\\LocaleSubscriber')] fn () => ($container->privates['sulu_document_manager.suscriber.behavior.locale'] ?? $container->load('getSuluDocumentManager_Suscriber_Behavior_LocaleService')), 'handleLocale'], 410);
        $instance->addListener('sulu_document_manager.hydrate', [#[\Closure(name: 'sulu_document_manager.suscriber.behavior.parent', class: 'Sulu\\Component\\DocumentManager\\Subscriber\\Behavior\\Mapping\\ParentSubscriber')] fn () => ($container->privates['sulu_document_manager.suscriber.behavior.parent'] ?? $container->load('getSuluDocumentManager_Suscriber_Behavior_ParentService')), 'handleHydrate'], 0);
        $instance->addListener('sulu_document_manager.persist', [#[\Closure(name: 'sulu_document_manager.suscriber.behavior.parent', class: 'Sulu\\Component\\DocumentManager\\Subscriber\\Behavior\\Mapping\\ParentSubscriber')] fn () => ($container->privates['sulu_document_manager.suscriber.behavior.parent'] ?? $container->load('getSuluDocumentManager_Suscriber_Behavior_ParentService')), 'handleChangeParent'], 0);
        $instance->addListener('sulu_document_manager.persist', [#[\Closure(name: 'sulu_document_manager.suscriber.behavior.parent', class: 'Sulu\\Component\\DocumentManager\\Subscriber\\Behavior\\Mapping\\ParentSubscriber')] fn () => ($container->privates['sulu_document_manager.suscriber.behavior.parent'] ?? $container->load('getSuluDocumentManager_Suscriber_Behavior_ParentService')), 'handleSetParentNodeFromDocument'], 490);
        $instance->addListener('sulu_document_manager.move', [#[\Closure(name: 'sulu_document_manager.suscriber.behavior.parent', class: 'Sulu\\Component\\DocumentManager\\Subscriber\\Behavior\\Mapping\\ParentSubscriber')] fn () => ($container->privates['sulu_document_manager.suscriber.behavior.parent'] ?? $container->load('getSuluDocumentManager_Suscriber_Behavior_ParentService')), 'handleMove'], 0);
        $instance->addListener('sulu_document_manager.hydrate', [#[\Closure(name: 'sulu_document_manager.suscriber.behavior.children', class: 'Sulu\\Component\\DocumentManager\\Subscriber\\Behavior\\Mapping\\ChildrenSubscriber')] fn () => ($container->privates['sulu_document_manager.suscriber.behavior.children'] ?? $container->load('getSuluDocumentManager_Suscriber_Behavior_ChildrenService')), 'handleHydrate'], 0);
        $instance->addListener('sulu_document_manager.persist', [#[\Closure(name: 'sulu_document_manager.subscriber.behavior.path', class: 'Sulu\\Component\\DocumentManager\\Subscriber\\Behavior\\Mapping\\PathSubscriber')] fn () => ($container->privates['sulu_document_manager.subscriber.behavior.path'] ?? $container->load('getSuluDocumentManager_Subscriber_Behavior_PathService')), 'setInitialPath'], 0);
        $instance->addListener('sulu_document_manager.persist', [#[\Closure(name: 'sulu_document_manager.subscriber.behavior.path', class: 'Sulu\\Component\\DocumentManager\\Subscriber\\Behavior\\Mapping\\PathSubscriber')] fn () => ($container->privates['sulu_document_manager.subscriber.behavior.path'] ?? $container->load('getSuluDocumentManager_Subscriber_Behavior_PathService')), 'setFinalPath'], -495);
        $instance->addListener('sulu_document_manager.hydrate', [#[\Closure(name: 'sulu_document_manager.subscriber.behavior.path', class: 'Sulu\\Component\\DocumentManager\\Subscriber\\Behavior\\Mapping\\PathSubscriber')] fn () => ($container->privates['sulu_document_manager.subscriber.behavior.path'] ?? $container->load('getSuluDocumentManager_Subscriber_Behavior_PathService')), 'setFinalPath'], 0);
        $instance->addListener('sulu_document_manager.persist', [#[\Closure(name: 'sulu_document_manager.subscriber.behavior.filing', class: 'Sulu\\Component\\Content\\Document\\Subscriber\\StructureTypeFilingSubscriber')] fn () => ($container->privates['sulu_document_manager.subscriber.behavior.filing'] ?? $container->load('getSuluDocumentManager_Subscriber_Behavior_FilingService')), 'handlePersist'], 485);
        $instance->addListener('sulu_document_manager.persist', [#[\Closure(name: 'sulu_document_manager.subscriber.behavior.alias', class: 'Sulu\\Component\\DocumentManager\\Subscriber\\Behavior\\Path\\AliasFilingSubscriber')] fn () => ($container->privates['sulu_document_manager.subscriber.behavior.alias'] ?? $container->load('getSuluDocumentManager_Subscriber_Behavior_AliasService')), 'handlePersist'], 490);
        $instance->addListener('sulu_document_manager.persist', [#[\Closure(name: 'sulu_document_manager.subscriber.behavior.base_path', class: 'Sulu\\Component\\DocumentManager\\Subscriber\\Behavior\\Path\\BasePathSubscriber')] fn () => ($container->privates['sulu_document_manager.subscriber.behavior.base_path'] ?? $container->load('getSuluDocumentManager_Subscriber_Behavior_BasePathService')), 'handlePersist'], 500);
        $instance->addListener('sulu_document_manager.publish', [#[\Closure(name: 'sulu_document_manager.reference_subscriber', class: 'Sulu\\Bundle\\DocumentManagerBundle\\Reference\\Subscriber\\DocumentReferenceSubscriber')] fn () => ($container->privates['sulu_document_manager.reference_subscriber'] ?? $container->load('getSuluDocumentManager_ReferenceSubscriberService')), 'onPublish'], 0);
        $instance->addListener('sulu_document_manager.unpublish', [#[\Closure(name: 'sulu_document_manager.reference_subscriber', class: 'Sulu\\Bundle\\DocumentManagerBundle\\Reference\\Subscriber\\DocumentReferenceSubscriber')] fn () => ($container->privates['sulu_document_manager.reference_subscriber'] ?? $container->load('getSuluDocumentManager_ReferenceSubscriberService')), 'onUnpublish'], 0);
        $instance->addListener('sulu_document_manager.persist', [#[\Closure(name: 'sulu_document_manager.reference_subscriber', class: 'Sulu\\Bundle\\DocumentManagerBundle\\Reference\\Subscriber\\DocumentReferenceSubscriber')] fn () => ($container->privates['sulu_document_manager.reference_subscriber'] ?? $container->load('getSuluDocumentManager_ReferenceSubscriberService')), 'onPersist'], 0);
        $instance->addListener('sulu_document_manager.remove', [#[\Closure(name: 'sulu_document_manager.reference_subscriber', class: 'Sulu\\Bundle\\DocumentManagerBundle\\Reference\\Subscriber\\DocumentReferenceSubscriber')] fn () => ($container->privates['sulu_document_manager.reference_subscriber'] ?? $container->load('getSuluDocumentManager_ReferenceSubscriberService')), 'onRemove'], 0);
        $instance->addListener('sulu_document_manager.remove_locale', [#[\Closure(name: 'sulu_document_manager.reference_subscriber', class: 'Sulu\\Bundle\\DocumentManagerBundle\\Reference\\Subscriber\\DocumentReferenceSubscriber')] fn () => ($container->privates['sulu_document_manager.reference_subscriber'] ?? $container->load('getSuluDocumentManager_ReferenceSubscriberService')), 'onRemoveLocale'], 0);
        $instance->addListener('sulu_document_manager.clear', [#[\Closure(name: 'sulu_document_manager.reference_subscriber', class: 'Sulu\\Bundle\\DocumentManagerBundle\\Reference\\Subscriber\\DocumentReferenceSubscriber')] fn () => ($container->privates['sulu_document_manager.reference_subscriber'] ?? $container->load('getSuluDocumentManager_ReferenceSubscriberService')), 'onClear'], 0);
        $instance->addListener('sulu_document_manager.flush', [#[\Closure(name: 'sulu_document_manager.reference_subscriber', class: 'Sulu\\Bundle\\DocumentManagerBundle\\Reference\\Subscriber\\DocumentReferenceSubscriber')] fn () => ($container->privates['sulu_document_manager.reference_subscriber'] ?? $container->load('getSuluDocumentManager_ReferenceSubscriberService')), 'onFlush'], 0);
        $instance->addListener('sulu_document_manager.copy_locale', [#[\Closure(name: 'sulu_document_manager.reference_subscriber', class: 'Sulu\\Bundle\\DocumentManagerBundle\\Reference\\Subscriber\\DocumentReferenceSubscriber')] fn () => ($container->privates['sulu_document_manager.reference_subscriber'] ?? $container->load('getSuluDocumentManager_ReferenceSubscriberService')), 'onCopyLocale'], 0);
        $instance->addListener('sulu_document_manager.persist', [#[\Closure(name: 'sulu_custom_urls.subscriber', class: 'Sulu\\Component\\CustomUrl\\Document\\Subscriber\\CustomUrlSubscriber')] fn () => ($container->privates['sulu_custom_urls.subscriber'] ?? $container->load('getSuluCustomUrls_SubscriberService')), 'handlePersist'], 0);
        $instance->addListener('sulu_document_manager.remove', [#[\Closure(name: 'sulu_custom_urls.subscriber', class: 'Sulu\\Component\\CustomUrl\\Document\\Subscriber\\CustomUrlSubscriber')] fn () => ($container->privates['sulu_custom_urls.subscriber'] ?? $container->load('getSuluCustomUrls_SubscriberService')), 'handleRemove'], 550);
        $instance->addListener('sulu_document_manager.publish', [#[\Closure(name: 'sulu_custom_urls.event_subscriber.invalidation', class: 'Sulu\\Component\\CustomUrl\\Document\\Subscriber\\InvalidationSubscriber')] fn () => ($container->privates['sulu_custom_urls.event_subscriber.invalidation'] ?? $container->load('getSuluCustomUrls_EventSubscriber_InvalidationService')), 'invalidateDocumentBeforePublishing'], 1024);
        $instance->addListener('sulu_document_manager.remove', [#[\Closure(name: 'sulu_custom_urls.event_subscriber.invalidation', class: 'Sulu\\Component\\CustomUrl\\Document\\Subscriber\\InvalidationSubscriber')] fn () => ($container->privates['sulu_custom_urls.event_subscriber.invalidation'] ?? $container->load('getSuluCustomUrls_EventSubscriber_InvalidationService')), 'invalidateDocumentBeforeRemoving'], 1024);
        $instance->addListener('sulu_document_manager.remove', [#[\Closure(name: 'sulu_custom_urls.custom_url_trash_subscriber', class: 'Sulu\\Bundle\\CustomUrlBundle\\EventListener\\CustomUrlTrashSubscriber')] fn () => ($container->privates['sulu_custom_urls.custom_url_trash_subscriber'] ?? $container->load('getSuluCustomUrls_CustomUrlTrashSubscriberService')), 'storeCustomUrlToTrash'], 1024);
        $instance->addListener('sulu_document_manager.flush', [#[\Closure(name: 'sulu_custom_urls.custom_url_trash_subscriber', class: 'Sulu\\Bundle\\CustomUrlBundle\\EventListener\\CustomUrlTrashSubscriber')] fn () => ($container->privates['sulu_custom_urls.custom_url_trash_subscriber'] ?? $container->load('getSuluCustomUrls_CustomUrlTrashSubscriberService')), 'flushTrashItem'], 0);
        $instance->addListener('sulu_document_manager.clear', [#[\Closure(name: 'sulu_custom_urls.custom_url_trash_subscriber', class: 'Sulu\\Bundle\\CustomUrlBundle\\EventListener\\CustomUrlTrashSubscriber')] fn () => ($container->privates['sulu_custom_urls.custom_url_trash_subscriber'] ?? $container->load('getSuluCustomUrls_CustomUrlTrashSubscriberService')), 'clearPendingTrashItem'], 0);
        $instance->addListener('sulu_document_manager.hydrate', [#[\Closure(name: 'sulu_route.subscriber.routable', class: 'Sulu\\Bundle\\RouteBundle\\Document\\Subscriber\\RoutableSubscriber')] fn () => ($container->privates['sulu_route.subscriber.routable'] ?? $container->load('getSuluRoute_Subscriber_RoutableService')), 'handleHydrate'], 0);
        $instance->addListener('sulu_document_manager.persist', [#[\Closure(name: 'sulu_route.subscriber.routable', class: 'Sulu\\Bundle\\RouteBundle\\Document\\Subscriber\\RoutableSubscriber')] fn () => ($container->privates['sulu_route.subscriber.routable'] ?? $container->load('getSuluRoute_Subscriber_RoutableService')), 'handlePersist'], -2000);
        $instance->addListener('sulu_document_manager.remove', [#[\Closure(name: 'sulu_route.subscriber.routable', class: 'Sulu\\Bundle\\RouteBundle\\Document\\Subscriber\\RoutableSubscriber')] fn () => ($container->privates['sulu_route.subscriber.routable'] ?? $container->load('getSuluRoute_Subscriber_RoutableService')), 'handleRemove'], 1024);
        $instance->addListener('sulu_document_manager.remove_locale', [#[\Closure(name: 'sulu_route.subscriber.routable', class: 'Sulu\\Bundle\\RouteBundle\\Document\\Subscriber\\RoutableSubscriber')] fn () => ($container->privates['sulu_route.subscriber.routable'] ?? $container->load('getSuluRoute_Subscriber_RoutableService')), 'handleRemoveLocale'], 1024);
        $instance->addListener('sulu_document_manager.publish', [#[\Closure(name: 'sulu_route.subscriber.routable', class: 'Sulu\\Bundle\\RouteBundle\\Document\\Subscriber\\RoutableSubscriber')] fn () => ($container->privates['sulu_route.subscriber.routable'] ?? $container->load('getSuluRoute_Subscriber_RoutableService')), 'handlePublish'], -2000);
        $instance->addListener('sulu_document_manager.copy', [#[\Closure(name: 'sulu_route.subscriber.routable', class: 'Sulu\\Bundle\\RouteBundle\\Document\\Subscriber\\RoutableSubscriber')] fn () => ($container->privates['sulu_route.subscriber.routable'] ?? $container->load('getSuluRoute_Subscriber_RoutableService')), 'handleCopy'], -2000);
        $instance->addListener('sulu_document_manager.publish', [#[\Closure(name: 'sulu_route.subscriber.page_tree_route', class: 'Sulu\\Bundle\\RouteBundle\\Document\\Subscriber\\PageTreeRouteSubscriber')] fn () => ($container->privates['sulu_route.subscriber.page_tree_route'] ?? $container->load('getSuluRoute_Subscriber_PageTreeRouteService')), 'handlePublish'], 10);
        $instance->addListener('sulu_document_manager.move', [#[\Closure(name: 'sulu_route.subscriber.page_tree_route', class: 'Sulu\\Bundle\\RouteBundle\\Document\\Subscriber\\PageTreeRouteSubscriber')] fn () => ($container->privates['sulu_route.subscriber.page_tree_route'] ?? $container->load('getSuluRoute_Subscriber_PageTreeRouteService')), 'handleMove'], -1000);

        return $instance;
    }

    /**
     * Gets the private 'sulu_document_manager.metadata_factory' shared service.
     *
     * @return \Sulu\Component\DocumentManager\Metadata\MetadataFactory
     */
    protected static function getSuluDocumentManager_MetadataFactoryService($container)
    {
        $a = ($container->services['sulu_document_manager.metadata_factory.base'] ?? self::getSuluDocumentManager_MetadataFactory_BaseService($container));

        if (isset($container->privates['sulu_document_manager.metadata_factory'])) {
            return $container->privates['sulu_document_manager.metadata_factory'];
        }

        return $container->privates['sulu_document_manager.metadata_factory'] = new \Sulu\Component\DocumentManager\Metadata\MetadataFactory($a);
    }

    /**
     * Gets the private 'sulu_document_manager.namespace_registry' shared service.
     *
     * @return \Sulu\Component\DocumentManager\NamespaceRegistry
     */
    protected static function getSuluDocumentManager_NamespaceRegistryService($container)
    {
        return $container->privates['sulu_document_manager.namespace_registry'] = new \Sulu\Component\DocumentManager\NamespaceRegistry($container->parameters['sulu_document_manager.namespace_mapping']);
    }

    /**
     * Gets the private 'sulu_document_manager.node_manager' shared service.
     *
     * @return \Sulu\Component\DocumentManager\NodeManager
     */
    protected static function getSuluDocumentManager_NodeManagerService($container)
    {
        $a = ($container->services['doctrine_phpcr.session'] ?? self::getDoctrinePhpcr_SessionService($container));

        if (isset($container->privates['sulu_document_manager.node_manager'])) {
            return $container->privates['sulu_document_manager.node_manager'];
        }

        return $container->privates['sulu_document_manager.node_manager'] = new \Sulu\Component\DocumentManager\NodeManager($a);
    }

    /**
     * Gets the private 'sulu_document_manager.path_segment_registry' shared service.
     *
     * @return \Sulu\Component\DocumentManager\PathSegmentRegistry
     */
    protected static function getSuluDocumentManager_PathSegmentRegistryService($container)
    {
        return $container->privates['sulu_document_manager.path_segment_registry'] = new \Sulu\Component\DocumentManager\PathSegmentRegistry($container->parameters['sulu_document_manager.segments']);
    }

    /**
     * Gets the private 'sulu_document_manager.proxy_factory' shared service.
     *
     * @return \Sulu\Component\DocumentManager\ProxyFactory
     */
    protected static function getSuluDocumentManager_ProxyFactoryService($container)
    {
        $a = ($container->privates['sulu_document_manager.event_dispatcher.standard'] ?? self::getSuluDocumentManager_EventDispatcher_StandardService($container));

        if (isset($container->privates['sulu_document_manager.proxy_factory'])) {
            return $container->privates['sulu_document_manager.proxy_factory'];
        }
        $b = ($container->privates['sulu_document_manager.metadata_factory'] ?? self::getSuluDocumentManager_MetadataFactoryService($container));

        if (isset($container->privates['sulu_document_manager.proxy_factory'])) {
            return $container->privates['sulu_document_manager.proxy_factory'];
        }

        return $container->privates['sulu_document_manager.proxy_factory'] = new \Sulu\Component\DocumentManager\ProxyFactory(($container->privates['sulu_document_manager.proxy_manager.factory.ghost'] ?? self::getSuluDocumentManager_ProxyManager_Factory_GhostService($container)), $a, ($container->privates['sulu_document_manager.document_registry'] ??= new \Sulu\Component\DocumentManager\DocumentRegistry('en')), $b);
    }

    /**
     * Gets the private 'sulu_document_manager.proxy_manager.factory.ghost' shared service.
     *
     * @return \ProxyManager\Factory\LazyLoadingGhostFactory
     */
    protected static function getSuluDocumentManager_ProxyManager_Factory_GhostService($container)
    {
        return $container->privates['sulu_document_manager.proxy_manager.factory.ghost'] = new \ProxyManager\Factory\LazyLoadingGhostFactory(($container->privates['sulu_core.proxy_manager.configuration'] ?? self::getSuluCore_ProxyManager_ConfigurationService($container)));
    }

    /**
     * Gets the private 'sulu_http_cache.cache_lifetime.resolver' shared service.
     *
     * @return \Sulu\Bundle\HttpCacheBundle\CacheLifetime\CacheLifetimeResolver
     */
    protected static function getSuluHttpCache_CacheLifetime_ResolverService($container)
    {
        return $container->privates['sulu_http_cache.cache_lifetime.resolver'] = new \Sulu\Bundle\HttpCacheBundle\CacheLifetime\CacheLifetimeResolver();
    }

    /**
     * Gets the private 'sulu_markup.link_tag' shared service.
     *
     * @return \Sulu\Bundle\MarkupBundle\Markup\LinkTag
     */
    protected static function getSuluMarkup_LinkTagService($container)
    {
        $a = ($container->privates['sulu_markup.link_tag.provider_pool'] ?? self::getSuluMarkup_LinkTag_ProviderPoolService($container));

        if (isset($container->privates['sulu_markup.link_tag'])) {
            return $container->privates['sulu_markup.link_tag'];
        }

        return $container->privates['sulu_markup.link_tag'] = new \Sulu\Bundle\MarkupBundle\Markup\LinkTag($a, (($container->hasParameter("sulu.preview")) ? ($container->getParameter("sulu.preview")) : (false)), ($container->privates['url_helper'] ?? self::getUrlHelperService($container)), NULL);
    }

    /**
     * Gets the private 'sulu_markup.link_tag.provider_pool' shared service.
     *
     * @return \Sulu\Bundle\MarkupBundle\Markup\Link\LinkProviderPool
     */
    protected static function getSuluMarkup_LinkTag_ProviderPoolService($container)
    {
        $a = ($container->privates['sulu_page.link_tag.page_provider'] ?? self::getSuluPage_LinkTag_PageProviderService($container));

        if (isset($container->privates['sulu_markup.link_tag.provider_pool'])) {
            return $container->privates['sulu_markup.link_tag.provider_pool'];
        }

        return $container->privates['sulu_markup.link_tag.provider_pool'] = new \Sulu\Bundle\MarkupBundle\Markup\Link\LinkProviderPool(['page' => $a, 'media' => ($container->privates['sulu_media.media_link_provider'] ?? self::getSuluMedia_MediaLinkProviderService($container))]);
    }

    /**
     * Gets the private 'sulu_markup.parser' shared service.
     *
     * @return \Sulu\Bundle\MarkupBundle\Markup\HtmlMarkupParser
     */
    protected static function getSuluMarkup_ParserService($container)
    {
        $a = ($container->privates['sulu_markup.tag.registry'] ?? self::getSuluMarkup_Tag_RegistryService($container));

        if (isset($container->privates['sulu_markup.parser'])) {
            return $container->privates['sulu_markup.parser'];
        }

        return $container->privates['sulu_markup.parser'] = new \Sulu\Bundle\MarkupBundle\Markup\HtmlMarkupParser($a, ($container->privates['sulu_markup.parser.delegating_html_extractor'] ?? self::getSuluMarkup_Parser_DelegatingHtmlExtractorService($container)));
    }

    /**
     * Gets the private 'sulu_markup.parser.delegating_html_extractor' shared service.
     *
     * @return \Sulu\Bundle\MarkupBundle\Markup\DelegatingTagExtractor
     */
    protected static function getSuluMarkup_Parser_DelegatingHtmlExtractorService($container)
    {
        return $container->privates['sulu_markup.parser.delegating_html_extractor'] = new \Sulu\Bundle\MarkupBundle\Markup\DelegatingTagExtractor([($container->services['sulu_markup.parser.html_extractor'] ??= new \Sulu\Bundle\MarkupBundle\Markup\HtmlTagExtractor('sulu'))]);
    }

    /**
     * Gets the private 'sulu_markup.response_listener' shared service.
     *
     * @return \Sulu\Bundle\MarkupBundle\Listener\MarkupListener
     */
    protected static function getSuluMarkup_ResponseListenerService($container)
    {
        $a = ($container->privates['sulu_markup.parser'] ?? self::getSuluMarkup_ParserService($container));

        if (isset($container->privates['sulu_markup.response_listener'])) {
            return $container->privates['sulu_markup.response_listener'];
        }

        return $container->privates['sulu_markup.response_listener'] = new \Sulu\Bundle\MarkupBundle\Listener\MarkupListener(['html' => $a]);
    }

    /**
     * Gets the private 'sulu_markup.tag.registry' shared service.
     *
     * @return \Sulu\Bundle\MarkupBundle\Tag\TagRegistry
     */
    protected static function getSuluMarkup_Tag_RegistryService($container)
    {
        $a = ($container->privates['sulu_markup.link_tag'] ?? self::getSuluMarkup_LinkTagService($container));

        if (isset($container->privates['sulu_markup.tag.registry'])) {
            return $container->privates['sulu_markup.tag.registry'];
        }

        return $container->privates['sulu_markup.tag.registry'] = new \Sulu\Bundle\MarkupBundle\Tag\TagRegistry(['html' => ['sulu' => ['link' => $a]]]);
    }

    /**
     * Gets the private 'sulu_media.adapter.imagick' shared service.
     *
     * @return \Imagine\Imagick\Imagine
     */
    protected static function getSuluMedia_Adapter_ImagickService($container)
    {
        return $container->privates['sulu_media.adapter.imagick'] = new \Imagine\Imagick\Imagine();
    }

    /**
     * Gets the private 'sulu_media.adapter.svg' shared service.
     *
     * @return \Contao\ImagineSvg\Imagine
     */
    protected static function getSuluMedia_Adapter_SvgService($container)
    {
        return $container->privates['sulu_media.adapter.svg'] = new \Contao\ImagineSvg\Imagine();
    }

    /**
     * Gets the private 'sulu_media.file_inspector.subscriber' shared service.
     *
     * @return \Sulu\Bundle\MediaBundle\FileInspector\UploadFileSubscriber
     */
    protected static function getSuluMedia_FileInspector_SubscriberService($container)
    {
        return $container->privates['sulu_media.file_inspector.subscriber'] = new \Sulu\Bundle\MediaBundle\FileInspector\UploadFileSubscriber(new RewindableGenerator(function () use ($container) {
            yield 0 => ($container->privates['sulu_media.file_inspector.svg_inspector'] ?? $container->load('getSuluMedia_FileInspector_SvgInspectorService'));
        }, 1));
    }

    /**
     * Gets the private 'sulu_media.file_validator' shared service.
     *
     * @return \Sulu\Bundle\MediaBundle\Media\FileValidator\FileValidator
     */
    protected static function getSuluMedia_FileValidatorService($container)
    {
        $container->privates['sulu_media.file_validator'] = $instance = new \Sulu\Bundle\MediaBundle\Media\FileValidator\FileValidator();

        $instance->setMaxFileSize('256MB');
        $instance->setBlockedMimeTypes([]);

        return $instance;
    }

    /**
     * Gets the private 'sulu_media.image.converter' shared service.
     *
     * @return \Sulu\Bundle\MediaBundle\Media\ImageConverter\ImagineImageConverter
     */
    protected static function getSuluMedia_Image_ConverterService($container)
    {
        return $container->privates['sulu_media.image.converter'] = new \Sulu\Bundle\MediaBundle\Media\ImageConverter\ImagineImageConverter(($container->privates['sulu_media.adapter.imagick'] ??= new \Imagine\Imagick\Imagine()), ($container->services['sulu_media.storage'] ?? self::getSuluMedia_StorageService($container)), ($container->privates['sulu_media.image.media_extractor'] ?? self::getSuluMedia_Image_MediaExtractorService($container)), ($container->privates['sulu_media.image.transformation_pool'] ?? self::getSuluMedia_Image_TransformationPoolService($container)), ($container->privates['sulu_media.image.focus'] ??= new \Sulu\Bundle\MediaBundle\Media\ImageConverter\Focus\Focus()), ($container->privates['sulu_media.image.scaler'] ??= new \Sulu\Bundle\MediaBundle\Media\ImageConverter\Scaler\Scaler()), ($container->privates['sulu_media.image.cropper'] ??= new \Sulu\Bundle\MediaBundle\Media\ImageConverter\Cropper\Cropper()), $container->parameters['sulu_media.image.formats'], $container->parameters['sulu_media.format_manager.mime_types'], ($container->privates['sulu_media.adapter.svg'] ??= new \Contao\ImagineSvg\Imagine()));
    }

    /**
     * Gets the private 'sulu_media.image.cropper' shared service.
     *
     * @return \Sulu\Bundle\MediaBundle\Media\ImageConverter\Cropper\Cropper
     */
    protected static function getSuluMedia_Image_CropperService($container)
    {
        return $container->privates['sulu_media.image.cropper'] = new \Sulu\Bundle\MediaBundle\Media\ImageConverter\Cropper\Cropper();
    }

    /**
     * Gets the private 'sulu_media.image.focus' shared service.
     *
     * @return \Sulu\Bundle\MediaBundle\Media\ImageConverter\Focus\Focus
     */
    protected static function getSuluMedia_Image_FocusService($container)
    {
        return $container->privates['sulu_media.image.focus'] = new \Sulu\Bundle\MediaBundle\Media\ImageConverter\Focus\Focus();
    }

    /**
     * Gets the private 'sulu_media.image.media_extractor' shared service.
     *
     * @return \Sulu\Bundle\MediaBundle\Media\ImageConverter\MediaImageExtractor
     */
    protected static function getSuluMedia_Image_MediaExtractorService($container)
    {
        return $container->privates['sulu_media.image.media_extractor'] = new \Sulu\Bundle\MediaBundle\Media\ImageConverter\MediaImageExtractor(($container->privates['sulu_media.adapter.imagick'] ??= new \Imagine\Imagick\Imagine()), ($container->privates['sulu_media.video_thumbnail_generator'] ??= new \Sulu\Bundle\MediaBundle\Media\Video\VideoThumbnailService(NULL)), 'gs');
    }

    /**
     * Gets the private 'sulu_media.image.scaler' shared service.
     *
     * @return \Sulu\Bundle\MediaBundle\Media\ImageConverter\Scaler\Scaler
     */
    protected static function getSuluMedia_Image_ScalerService($container)
    {
        return $container->privates['sulu_media.image.scaler'] = new \Sulu\Bundle\MediaBundle\Media\ImageConverter\Scaler\Scaler();
    }

    /**
     * Gets the private 'sulu_media.image.transformation_pool' shared service.
     *
     * @return \Sulu\Bundle\MediaBundle\Media\ImageConverter\TransformationPool
     */
    protected static function getSuluMedia_Image_TransformationPoolService($container)
    {
        $container->privates['sulu_media.image.transformation_pool'] = $instance = new \Sulu\Bundle\MediaBundle\Media\ImageConverter\TransformationPool();

        $instance->add(($container->services['sulu_media.image.transformation.crop'] ??= new \Sulu\Bundle\MediaBundle\Media\ImageConverter\Transformation\CropTransformation()), 'crop');
        $instance->add(($container->services['sulu_media.image.transformation.paste'] ?? self::getSuluMedia_Image_Transformation_PasteService($container)), 'paste');
        $instance->add(($container->services['sulu_media.image.transformation.blur'] ??= new \Sulu\Bundle\MediaBundle\Media\ImageConverter\Transformation\BlurTransformation()), 'blur');
        $instance->add(($container->services['sulu_media.image.transformation.gamma'] ??= new \Sulu\Bundle\MediaBundle\Media\ImageConverter\Transformation\GammaTransformation()), 'gamma');
        $instance->add(($container->services['sulu_media.image.transformation.grayscale'] ??= new \Sulu\Bundle\MediaBundle\Media\ImageConverter\Transformation\GrayscaleTransformation()), 'grayscale');
        $instance->add(($container->services['sulu_media.image.transformation.negative'] ??= new \Sulu\Bundle\MediaBundle\Media\ImageConverter\Transformation\NegativeTransformation()), 'negative');
        $instance->add(($container->services['sulu_media.image.transformation.sharpen'] ??= new \Sulu\Bundle\MediaBundle\Media\ImageConverter\Transformation\SharpenTransformation()), 'sharpen');

        return $instance;
    }

    /**
     * Gets the private 'sulu_media.media_link_provider' shared service.
     *
     * @return \Sulu\Bundle\MediaBundle\Markup\Link\MediaLinkProvider
     */
    protected static function getSuluMedia_MediaLinkProviderService($container)
    {
        return $container->privates['sulu_media.media_link_provider'] = new \Sulu\Bundle\MediaBundle\Markup\Link\MediaLinkProvider(($container->services['sulu.repository.media'] ?? self::getSulu_Repository_MediaService($container)), ($container->services['sulu_media.media_manager'] ?? self::getSuluMedia_MediaManagerService($container)));
    }

    /**
     * Gets the private 'sulu_media.storage.local.file_system' shared service.
     *
     * @return \Symfony\Component\Filesystem\Filesystem
     */
    protected static function getSuluMedia_Storage_Local_FileSystemService($container)
    {
        return $container->privates['sulu_media.storage.local.file_system'] = new \Symfony\Component\Filesystem\Filesystem();
    }

    /**
     * Gets the private 'sulu_media.type_manager' shared service.
     *
     * @return \Sulu\Bundle\MediaBundle\Media\TypeManager\TypeManager
     */
    protected static function getSuluMedia_TypeManagerService($container)
    {
        $a = ($container->services['doctrine.orm.default_entity_manager'] ?? self::getDoctrine_Orm_DefaultEntityManagerService($container));

        if (isset($container->privates['sulu_media.type_manager'])) {
            return $container->privates['sulu_media.type_manager'];
        }

        return $container->privates['sulu_media.type_manager'] = new \Sulu\Bundle\MediaBundle\Media\TypeManager\TypeManager($a, $container->parameters['sulu_media.media.types'], []);
    }

    /**
     * Gets the private 'sulu_media.video_thumbnail_generator' shared service.
     *
     * @return \Sulu\Bundle\MediaBundle\Media\Video\VideoThumbnailService
     */
    protected static function getSuluMedia_VideoThumbnailGeneratorService($container)
    {
        return $container->privates['sulu_media.video_thumbnail_generator'] = new \Sulu\Bundle\MediaBundle\Media\Video\VideoThumbnailService(NULL);
    }

    /**
     * Gets the private 'sulu_page.link_tag.page_provider' shared service.
     *
     * @return \Sulu\Bundle\PageBundle\Markup\Link\PageLinkProvider
     */
    protected static function getSuluPage_LinkTag_PageProviderService($container)
    {
        $a = ($container->privates['sulu_security.access_control_manager'] ?? self::getSuluSecurity_AccessControlManagerService($container));

        if (isset($container->privates['sulu_page.link_tag.page_provider'])) {
            return $container->privates['sulu_page.link_tag.page_provider'];
        }

        return $container->privates['sulu_page.link_tag.page_provider'] = new \Sulu\Bundle\PageBundle\Markup\Link\PageLinkProvider(($container->services['sulu_page.content_repository'] ?? self::getSuluPage_ContentRepositoryService($container)), ($container->services['sulu_core.webspace.webspace_manager'] ?? self::getSuluCore_Webspace_WebspaceManagerService($container)), ($container->services['request_stack'] ??= new \Symfony\Component\HttpFoundation\RequestStack()), ($container->services['translator'] ?? self::getTranslatorService($container)), 'dev', $a, ($container->privates['security.token_storage'] ?? self::getSecurity_TokenStorageService($container)));
    }

    /**
     * Gets the private 'sulu_page.structure.loader.xml' shared service.
     *
     * @return \Sulu\Component\Content\Metadata\Loader\StructureXmlLoader
     */
    protected static function getSuluPage_Structure_Loader_XmlService($container)
    {
        return $container->privates['sulu_page.structure.loader.xml'] = new \Sulu\Component\Content\Metadata\Loader\StructureXmlLoader(($container->privates['sulu_http_cache.cache_lifetime.resolver'] ??= new \Sulu\Bundle\HttpCacheBundle\CacheLifetime\CacheLifetimeResolver()), ($container->privates['sulu_page.structure.properties_xml_parser'] ?? self::getSuluPage_Structure_PropertiesXmlParserService($container)), ($container->privates['sulu_page.structure.schema_xml_parser'] ??= new \Sulu\Component\Content\Metadata\Parser\SchemaXmlParser()), ($container->services['sulu.content.type_manager'] ?? self::getSulu_Content_TypeManagerService($container)), $container->parameters['sulu.content.structure.required_properties'], $container->parameters['sulu.content.structure.required_tags'], $container->parameters['sulu_core.translated_locales'], ($container->services['translator'] ?? self::getTranslatorService($container)));
    }

    /**
     * Gets the private 'sulu_page.structure.properties_xml_parser' shared service.
     *
     * @return \Sulu\Component\Content\Metadata\Parser\PropertiesXmlParser
     */
    protected static function getSuluPage_Structure_PropertiesXmlParserService($container)
    {
        return $container->privates['sulu_page.structure.properties_xml_parser'] = new \Sulu\Component\Content\Metadata\Parser\PropertiesXmlParser(($container->services['translator'] ?? self::getTranslatorService($container)), $container->parameters['sulu_core.translated_locales']);
    }

    /**
     * Gets the private 'sulu_page.structure.schema_xml_parser' shared service.
     *
     * @return \Sulu\Component\Content\Metadata\Parser\SchemaXmlParser
     */
    protected static function getSuluPage_Structure_SchemaXmlParserService($container)
    {
        return $container->privates['sulu_page.structure.schema_xml_parser'] = new \Sulu\Component\Content\Metadata\Parser\SchemaXmlParser();
    }

    /**
     * Gets the private 'sulu_security.access_control_manager' shared service.
     *
     * @return \Sulu\Component\Security\Authorization\AccessControl\AccessControlManager
     */
    protected static function getSuluSecurity_AccessControlManagerService($container)
    {
        $a = ($container->services['event_dispatcher'] ?? self::getEventDispatcherService($container));

        if (isset($container->privates['sulu_security.access_control_manager'])) {
            return $container->privates['sulu_security.access_control_manager'];
        }
        $b = ($container->services['sulu.repository.access_control'] ?? self::getSulu_Repository_AccessControlService($container));

        if (isset($container->privates['sulu_security.access_control_manager'])) {
            return $container->privates['sulu_security.access_control_manager'];
        }
        $c = ($container->privates['security.helper'] ?? self::getSecurity_HelperService($container));

        if (isset($container->privates['sulu_security.access_control_manager'])) {
            return $container->privates['sulu_security.access_control_manager'];
        }
        $d = ($container->services['sulu_security.mask_converter'] ?? self::getSuluSecurity_MaskConverterService($container));
        $e = ($container->services['sulu.repository.role'] ?? self::getSulu_Repository_RoleService($container));

        $container->privates['sulu_security.access_control_manager'] = $instance = new \Sulu\Component\Security\Authorization\AccessControl\AccessControlManager($d, $a, ($container->privates['sulu_security.system_store'] ?? self::getSuluSecurity_SystemStoreService($container)), new RewindableGenerator(function () use ($container) {
            yield 0 => ($container->services['sulu_page.content_repository'] ?? self::getSuluPage_ContentRepositoryService($container));
            yield 1 => ($container->services['sulu_media.collection_repository'] ?? self::getSuluMedia_CollectionRepositoryService($container));
        }, 2), $e, $b, $c, $container->parameters['sulu_security.permissions']);

        $instance->addAccessControlProvider(new \Sulu\Component\Security\Authorization\AccessControl\PhpcrAccessControlProvider(($container->services['sulu_document_manager.document_manager'] ?? self::getSuluDocumentManager_DocumentManagerService($container)), $e, $container->parameters['permissions']));
        $instance->addAccessControlProvider(new \Sulu\Component\Security\Authorization\AccessControl\DoctrineAccessControlProvider(($container->services['doctrine.orm.default_entity_manager'] ?? self::getDoctrine_Orm_DefaultEntityManagerService($container)), $e, $b, $d));

        return $instance;
    }

    /**
     * Gets the private 'sulu_security.access_control_query_enhancer' shared service.
     *
     * @return \Sulu\Bundle\SecurityBundle\AccessControl\AccessControlQueryEnhancer
     */
    protected static function getSuluSecurity_AccessControlQueryEnhancerService($container)
    {
        $a = ($container->services['doctrine.orm.default_entity_manager'] ?? self::getDoctrine_Orm_DefaultEntityManagerService($container));

        if (isset($container->privates['sulu_security.access_control_query_enhancer'])) {
            return $container->privates['sulu_security.access_control_query_enhancer'];
        }

        return $container->privates['sulu_security.access_control_query_enhancer'] = new \Sulu\Bundle\SecurityBundle\AccessControl\AccessControlQueryEnhancer(($container->privates['sulu_security.system_store'] ?? self::getSuluSecurity_SystemStoreService($container)), $a);
    }

    /**
     * Gets the private 'sulu_security.event_listener.security' shared service.
     *
     * @return \Sulu\Bundle\SecurityBundle\EventListener\SuluSecurityListener
     */
    protected static function getSuluSecurity_EventListener_SecurityService($container)
    {
        return $container->privates['sulu_security.event_listener.security'] = new \Sulu\Bundle\SecurityBundle\EventListener\SuluSecurityListener(($container->services['sulu_security.security_checker'] ?? self::getSuluSecurity_SecurityCheckerService($container)));
    }

    /**
     * Gets the private 'sulu_security.system_listener' shared service.
     *
     * @return \Sulu\Bundle\SecurityBundle\EventListener\SystemListener
     */
    protected static function getSuluSecurity_SystemListenerService($container)
    {
        return $container->privates['sulu_security.system_listener'] = new \Sulu\Bundle\SecurityBundle\EventListener\SystemListener(($container->privates['sulu_security.system_store'] ?? self::getSuluSecurity_SystemStoreService($container)), NULL, 'admin');
    }

    /**
     * Gets the private 'sulu_security.system_store' shared service.
     *
     * @return \Sulu\Bundle\SecurityBundle\System\SystemStore
     */
    protected static function getSuluSecurity_SystemStoreService($container)
    {
        $a = ($container->services['sulu.repository.role'] ?? self::getSulu_Repository_RoleService($container));

        if (isset($container->privates['sulu_security.system_store'])) {
            return $container->privates['sulu_security.system_store'];
        }

        return $container->privates['sulu_security.system_store'] = new \Sulu\Bundle\SecurityBundle\System\SystemStore($a);
    }

    /**
     * Gets the private 'sulu_security.user_locale_listener' shared service.
     *
     * @return \Sulu\Bundle\SecurityBundle\EventListener\UserLocaleListener
     */
    protected static function getSuluSecurity_UserLocaleListenerService($container)
    {
        return $container->privates['sulu_security.user_locale_listener'] = new \Sulu\Bundle\SecurityBundle\EventListener\UserLocaleListener(($container->privates['security.token_storage'] ?? self::getSecurity_TokenStorageService($container)), ($container->services['translator'] ?? self::getTranslatorService($container)));
    }

    /**
     * Gets the private 'sulu_trash.trash_item_repository' shared service.
     *
     * @return \Sulu\Bundle\TrashBundle\Infrastructure\Doctrine\Repository\TrashItemRepository
     */
    protected static function getSuluTrash_TrashItemRepositoryService($container)
    {
        $a = ($container->services['doctrine.orm.default_entity_manager'] ?? self::getDoctrine_Orm_DefaultEntityManagerService($container));

        if (isset($container->privates['sulu_trash.trash_item_repository'])) {
            return $container->privates['sulu_trash.trash_item_repository'];
        }
        $b = ($container->privates['security.helper'] ?? self::getSecurity_HelperService($container));

        if (isset($container->privates['sulu_trash.trash_item_repository'])) {
            return $container->privates['sulu_trash.trash_item_repository'];
        }

        return $container->privates['sulu_trash.trash_item_repository'] = new \Sulu\Bundle\TrashBundle\Infrastructure\Doctrine\Repository\TrashItemRepository($a, $b);
    }

    /**
     * Gets the private 'sulu_trash.trash_manager' shared service.
     *
     * @return \Sulu\Bundle\TrashBundle\Application\TrashManager\TrashManager
     */
    protected static function getSuluTrash_TrashManagerService($container)
    {
        $a = ($container->privates['sulu_trash.trash_item_repository'] ?? self::getSuluTrash_TrashItemRepositoryService($container));

        if (isset($container->privates['sulu_trash.trash_manager'])) {
            return $container->privates['sulu_trash.trash_manager'];
        }
        $b = ($container->privates['.service_locator.dQjDmHZ'] ?? self::get_ServiceLocator_DQjDmHZService($container));

        if (isset($container->privates['sulu_trash.trash_manager'])) {
            return $container->privates['sulu_trash.trash_manager'];
        }

        return $container->privates['sulu_trash.trash_manager'] = new \Sulu\Bundle\TrashBundle\Application\TrashManager\TrashManager($a, ($container->privates['sulu_activity.domain_event_collector'] ?? self::getSuluActivity_DomainEventCollectorService($container)), $b, $b, new \Symfony\Component\DependencyInjection\Argument\ServiceLocator($container->getService ??= $container->getService(...), [
            'media' => ['privates', 'sulu_media.media_trash_item_handler', 'getSuluMedia_MediaTrashItemHandlerService', true],
        ], [
            'media' => 'Sulu\\Bundle\\MediaBundle\\Trash\\MediaTrashItemHandler',
        ]));
    }

    /**
     * Gets the private 'sulu_website.event_listener.security_listener' shared service.
     *
     * @return \Sulu\Bundle\WebsiteBundle\EventListener\SecurityListener
     */
    protected static function getSuluWebsite_EventListener_SecurityListenerService($container)
    {
        return $container->privates['sulu_website.event_listener.security_listener'] = new \Sulu\Bundle\WebsiteBundle\EventListener\SecurityListener(($container->services['sulu_security.security_checker'] ?? self::getSuluSecurity_SecurityCheckerService($container)));
    }

    /**
     * Gets the private 'sulu_website.event_listener.translator' shared service.
     *
     * @return \Sulu\Bundle\WebsiteBundle\EventListener\TranslatorListener
     */
    protected static function getSuluWebsite_EventListener_TranslatorService($container)
    {
        return $container->privates['sulu_website.event_listener.translator'] = new \Sulu\Bundle\WebsiteBundle\EventListener\TranslatorListener(($container->services['translator'] ?? self::getTranslatorService($container)));
    }

    /**
     * Gets the private 'sulu_website.router_listener' shared service.
     *
     * @return \Sulu\Bundle\WebsiteBundle\EventListener\RouterListener
     */
    protected static function getSuluWebsite_RouterListenerService($container)
    {
        return $container->privates['sulu_website.router_listener'] = new \Sulu\Bundle\WebsiteBundle\EventListener\RouterListener(($container->privates['sulu_website.router_listener.inner'] ?? self::getSuluWebsite_RouterListener_InnerService($container)), ($container->services['sulu_core.webspace.request_analyzer'] ?? self::getSuluCore_Webspace_RequestAnalyzerService($container)));
    }

    /**
     * Gets the private 'sulu_website.router_listener.inner' shared service.
     *
     * @return \Symfony\Component\HttpKernel\EventListener\RouterListener
     */
    protected static function getSuluWebsite_RouterListener_InnerService($container)
    {
        return $container->privates['sulu_website.router_listener.inner'] = new \Symfony\Component\HttpKernel\EventListener\RouterListener(($container->services['router'] ?? self::getRouterService($container)), ($container->services['request_stack'] ??= new \Symfony\Component\HttpFoundation\RequestStack()), ($container->privates['router.request_context'] ?? self::getRouter_RequestContextService($container)), ($container->privates['logger'] ?? self::getLoggerService($container)), \dirname(__DIR__, 5), true);
    }

    /**
     * Gets the private 'sulu_website.routing.request_listener' shared service.
     *
     * @return \Sulu\Bundle\WebsiteBundle\Routing\RequestListener
     */
    protected static function getSuluWebsite_Routing_RequestListenerService($container)
    {
        return $container->privates['sulu_website.routing.request_listener'] = new \Sulu\Bundle\WebsiteBundle\Routing\RequestListener(($container->services['router'] ?? self::getRouterService($container)), ($container->services['sulu_core.webspace.request_analyzer'] ?? self::getSuluCore_Webspace_RequestAnalyzerService($container)));
    }

    /**
     * Gets the private 'test.session.listener' shared service.
     *
     * @return \Symfony\Component\HttpKernel\EventListener\SessionListener
     */
    protected static function getTest_Session_ListenerService($container)
    {
        return $container->privates['test.session.listener'] = new \Symfony\Component\HttpKernel\EventListener\SessionListener(new \Symfony\Component\DependencyInjection\Argument\ServiceLocator($container->getService ??= $container->getService(...), [
            'session_factory' => ['privates', 'session.factory', 'getSession_FactoryService', true],
        ], [
            'session_factory' => '?',
        ]), true, $container->parameters['session.storage.options']);
    }

    /**
     * Gets the private 'translator.formatter.default' shared service.
     *
     * @return \Symfony\Component\Translation\Formatter\MessageFormatter
     */
    protected static function getTranslator_Formatter_DefaultService($container)
    {
        return $container->privates['translator.formatter.default'] = new \Symfony\Component\Translation\Formatter\MessageFormatter(($container->privates['identity_translator'] ??= new \Symfony\Component\Translation\IdentityTranslator()));
    }

    /**
     * Gets the private 'uri_signer' shared service.
     *
     * @return \Symfony\Component\HttpFoundation\UriSigner
     */
    protected static function getUriSignerService($container, $lazyLoad = true)
    {
        if (true === $lazyLoad) {
            return $container->privates['uri_signer'] = $container->createProxy('UriSignerGhost56c5084', static fn () => \UriSignerGhost56c5084::createLazyGhost(static fn ($proxy) => self::getUriSignerService($container, $proxy)));
        }

        return ($lazyLoad->__construct('secret', '_hash', '_expiration', ($container->privates['clock'] ??= new \Symfony\Component\Clock\Clock())) && false ?: $lazyLoad);
    }

    /**
     * Gets the private 'url_helper' shared service.
     *
     * @return \Symfony\Component\HttpFoundation\UrlHelper
     */
    protected static function getUrlHelperService($container)
    {
        return $container->privates['url_helper'] = new \Symfony\Component\HttpFoundation\UrlHelper(($container->services['request_stack'] ??= new \Symfony\Component\HttpFoundation\RequestStack()), ($container->services['router'] ?? self::getRouterService($container)));
    }

    /**
     * Gets the private 'validate_request_listener' shared service.
     *
     * @return \Symfony\Component\HttpKernel\EventListener\ValidateRequestListener
     */
    protected static function getValidateRequestListenerService($container)
    {
        return $container->privates['validate_request_listener'] = new \Symfony\Component\HttpKernel\EventListener\ValidateRequestListener();
    }

    /**
     * Gets the private 'validator' shared service.
     *
     * @return \Symfony\Component\Validator\Validator\ValidatorInterface
     */
    protected static function getValidatorService($container)
    {
        $a = ($container->privates['validator.builder'] ?? self::getValidator_BuilderService($container));

        if (isset($container->privates['validator'])) {
            return $container->privates['validator'];
        }

        return $container->privates['validator'] = $a->getValidator();
    }

    /**
     * Gets the private 'validator.builder' shared service.
     *
     * @return \Symfony\Component\Validator\ValidatorBuilder
     */
    protected static function getValidator_BuilderService($container)
    {
        $container->privates['validator.builder'] = $instance = \Symfony\Component\Validator\Validation::createValidatorBuilder();

        $instance->setConstraintValidatorFactory(($container->privates['validator.validator_factory'] ?? self::getValidator_ValidatorFactoryService($container)));
        $instance->setGroupProviderLocator(($container->privates['.service_locator.GIuJv7e'] ??= new \Symfony\Component\DependencyInjection\Argument\ServiceLocator($container->getService ??= $container->getService(...), [], [])));
        if ($container->has('translator')) {
            $instance->setTranslator(($container->services['translator'] ?? self::getTranslatorService($container)));
        }
        $instance->setTranslationDomain('validators');
        $instance->addXmlMappings(['/var/www/html/vendor/symfony/form/Resources/config/validation.xml']);
        $instance->enableAttributeMapping();
        $instance->addMethodMapping('loadValidatorMetadata');
        $instance->addObjectInitializers([($container->privates['doctrine.orm.validator_initializer'] ?? self::getDoctrine_Orm_ValidatorInitializerService($container))]);
        $instance->addLoader(($container->privates['validator.property_info_loader'] ?? self::getValidator_PropertyInfoLoaderService($container)));
        $instance->addLoader(($container->privates['doctrine.orm.default_entity_manager.validator_loader'] ?? self::getDoctrine_Orm_DefaultEntityManager_ValidatorLoaderService($container)));

        return $instance;
    }

    /**
     * Gets the private 'validator.property_info_loader' shared service.
     *
     * @return \Symfony\Component\Validator\Mapping\Loader\PropertyInfoLoader
     */
    protected static function getValidator_PropertyInfoLoaderService($container)
    {
        $a = ($container->privates['property_info'] ?? self::getPropertyInfoService($container));

        return $container->privates['validator.property_info_loader'] = new \Symfony\Component\Validator\Mapping\Loader\PropertyInfoLoader($a, $a, $a, NULL);
    }

    /**
     * Gets the private 'validator.validator_factory' shared service.
     *
     * @return \Symfony\Component\Validator\ContainerConstraintValidatorFactory
     */
    protected static function getValidator_ValidatorFactoryService($container)
    {
        return $container->privates['validator.validator_factory'] = new \Symfony\Component\Validator\ContainerConstraintValidatorFactory(new \Symfony\Component\DependencyInjection\Argument\ServiceLocator($container->getService ??= $container->getService(...), [
            'validator.expression' => ['privates', 'validator.expression', 'getValidator_ExpressionService', true],
            'Symfony\\Component\\Validator\\Constraints\\ExpressionValidator' => ['privates', 'validator.expression', 'getValidator_ExpressionService', true],
            'Symfony\\Component\\Validator\\Constraints\\EmailValidator' => ['privates', 'validator.email', 'getValidator_EmailService', true],
            'Symfony\\Component\\Validator\\Constraints\\NotCompromisedPasswordValidator' => ['privates', 'validator.not_compromised_password', 'getValidator_NotCompromisedPasswordService', true],
            'Symfony\\Component\\Validator\\Constraints\\WhenValidator' => ['privates', 'validator.when', 'getValidator_WhenService', true],
            'Symfony\\Component\\Validator\\Constraints\\NoSuspiciousCharactersValidator' => ['privates', 'validator.no_suspicious_characters', 'getValidator_NoSuspiciousCharactersService', true],
            'Symfony\\Bridge\\Twig\\Validator\\Constraints\\TwigValidator' => ['privates', 'twig.validator', 'getTwig_ValidatorService', true],
            'doctrine.orm.validator.unique' => ['privates', 'doctrine.orm.validator.unique', 'getDoctrine_Orm_Validator_UniqueService', true],
            'Symfony\\Bridge\\Doctrine\\Validator\\Constraints\\UniqueEntityValidator' => ['privates', 'doctrine.orm.validator.unique', 'getDoctrine_Orm_Validator_UniqueService', true],
            'security.validator.user_password' => ['privates', 'security.validator.user_password', 'getSecurity_Validator_UserPasswordService', true],
            'Symfony\\Component\\Security\\Core\\Validator\\Constraints\\UserPasswordValidator' => ['privates', 'security.validator.user_password', 'getSecurity_Validator_UserPasswordService', true],
        ], [
            'validator.expression' => '?',
            'Symfony\\Component\\Validator\\Constraints\\ExpressionValidator' => '?',
            'Symfony\\Component\\Validator\\Constraints\\EmailValidator' => '?',
            'Symfony\\Component\\Validator\\Constraints\\NotCompromisedPasswordValidator' => '?',
            'Symfony\\Component\\Validator\\Constraints\\WhenValidator' => '?',
            'Symfony\\Component\\Validator\\Constraints\\NoSuspiciousCharactersValidator' => '?',
            'Symfony\\Bridge\\Twig\\Validator\\Constraints\\TwigValidator' => '?',
            'doctrine.orm.validator.unique' => '?',
            'Symfony\\Bridge\\Doctrine\\Validator\\Constraints\\UniqueEntityValidator' => '?',
            'security.validator.user_password' => '?',
            'Symfony\\Component\\Security\\Core\\Validator\\Constraints\\UserPasswordValidator' => '?',
        ]));
    }

    public function getParameter(string $name): array|bool|string|int|float|\UnitEnum|null
    {
        if (isset($this->buildParameters[$name])) {
            return $this->buildParameters[$name];
        }

        if (!(isset($this->parameters[$name]) || isset($this->loadedDynamicParameters[$name]) || \array_key_exists($name, $this->parameters))) {
            throw new ParameterNotFoundException($name, extraMessage: self::NONEMPTY_PARAMETERS[$name] ?? null);
        }

        if (isset($this->loadedDynamicParameters[$name])) {
            $value = $this->loadedDynamicParameters[$name] ? $this->dynamicParameters[$name] : $this->getDynamicParameter($name);
        } else {
            $value = $this->parameters[$name];
        }

        if (isset(self::NONEMPTY_PARAMETERS[$name]) && (null === $value || '' === $value || [] === $value)) {
            throw new \Symfony\Component\DependencyInjection\Exception\EmptyParameterValueException(self::NONEMPTY_PARAMETERS[$name]);
        }

        return $value;
    }

    public function hasParameter(string $name): bool
    {
        if (isset($this->buildParameters[$name])) {
            return true;
        }

        return isset($this->parameters[$name]) || isset($this->loadedDynamicParameters[$name]) || \array_key_exists($name, $this->parameters);
    }

    public function setParameter(string $name, $value): void
    {
        throw new LogicException('Impossible to call set() on a frozen ParameterBag.');
    }

    public function getParameterBag(): ParameterBagInterface
    {
        if (!isset($this->parameterBag)) {
            $parameters = $this->parameters;
            foreach ($this->loadedDynamicParameters as $name => $loaded) {
                $parameters[$name] = $loaded ? $this->dynamicParameters[$name] : $this->getDynamicParameter($name);
            }
            foreach ($this->buildParameters as $name => $value) {
                $parameters[$name] = $value;
            }
            $this->parameterBag = new FrozenParameterBag($parameters, [], self::NONEMPTY_PARAMETERS);
        }

        return $this->parameterBag;
    }

    private $loadedDynamicParameters = [
        'kernel.runtime_environment' => false,
        'kernel.runtime_mode' => false,
        'kernel.runtime_mode.web' => false,
        'kernel.runtime_mode.cli' => false,
        'kernel.runtime_mode.worker' => false,
        'kernel.build_dir' => false,
        'kernel.cache_dir' => false,
        'database.url' => false,
        'database.charset' => false,
        'database.collate' => false,
        'phpcr.backend_url' => false,
        'phpcr.username' => false,
        'phpcr.password' => false,
        'phpcr.workspace' => false,
        'kernel.trust_x_sendfile_type_header' => false,
        'kernel.trusted_hosts' => false,
        'kernel.trusted_proxies' => false,
        'kernel.trusted_headers' => false,
        'debug.file_link_format' => false,
        'debug.container.dump' => false,
        'router.cache_dir' => false,
        'serializer.mapping.cache.file' => false,
        'validator.mapping.cache.file' => false,
        'sulu.cache_dir' => false,
        'sulu_core.proxy_cache_dir' => false,
        'doctrine.orm.proxy_dir' => false,
        'massive_search.metadata.cache_dir' => false,
        'sulu_website.sitemap.dump_dir' => false,
    ];
    private $dynamicParameters = [];

    private function getDynamicParameter(string $name)
    {
        $container = $this;
        $value = match ($name) {
            'kernel.runtime_environment' => $container->getEnv('default:kernel.environment:APP_RUNTIME_ENV'),
            'kernel.runtime_mode' => $container->getEnv('query_string:default:container.runtime_mode:APP_RUNTIME_MODE'),
            'kernel.runtime_mode.web' => $container->getEnv('bool:default::key:web:default:kernel.runtime_mode:'),
            'kernel.runtime_mode.cli' => $container->getEnv('not:default:kernel.runtime_mode.web:'),
            'kernel.runtime_mode.worker' => $container->getEnv('bool:default::key:worker:default:kernel.runtime_mode:'),
            'kernel.build_dir' => $container->targetDir.'',
            'kernel.cache_dir' => $container->targetDir.'',
            'database.url' => $container->getEnv('DATABASE_URL'),
            'database.charset' => $container->getEnv('DATABASE_CHARSET'),
            'database.collate' => $container->getEnv('DATABASE_COLLATE'),
            'phpcr.backend_url' => $container->getEnv('PHPCR_BACKEND_URL'),
            'phpcr.username' => $container->getEnv('PHPCR_USERNAME'),
            'phpcr.password' => $container->getEnv('PHPCR_PASSWORD'),
            'phpcr.workspace' => $container->getEnv('PHPCR_WORKSPACE'),
            'kernel.trust_x_sendfile_type_header' => $container->getEnv('bool:default::SYMFONY_TRUST_X_SENDFILE_TYPE_HEADER'),
            'kernel.trusted_hosts' => $container->getEnv('default::SYMFONY_TRUSTED_HOSTS'),
            'kernel.trusted_proxies' => $container->getEnv('default::SYMFONY_TRUSTED_PROXIES'),
            'kernel.trusted_headers' => $container->getEnv('default::SYMFONY_TRUSTED_HEADERS'),
            'debug.file_link_format' => $container->getEnv('default::SYMFONY_IDE'),
            'debug.container.dump' => ($container->targetDir.''.'/PERSPEQTIVE_SuluSnippetTabsBundle_Tests_Application_KernelDevDebugContainer.xml'),
            'router.cache_dir' => $container->targetDir.'',
            'serializer.mapping.cache.file' => ($container->targetDir.''.'/serialization.php'),
            'validator.mapping.cache.file' => ($container->targetDir.''.'/validation.php'),
            'sulu.cache_dir' => ($container->targetDir.''.'/sulu'),
            'sulu_core.proxy_cache_dir' => ($container->targetDir.''.'/sulu/proxies'),
            'doctrine.orm.proxy_dir' => ($container->targetDir.''.'/doctrine/orm/Proxies'),
            'massive_search.metadata.cache_dir' => ($container->targetDir.''.'/massive-search'),
            'sulu_website.sitemap.dump_dir' => ($container->targetDir.''.'/sulu/sitemaps'),
            default => throw new ParameterNotFoundException($name),
        };
        $this->loadedDynamicParameters[$name] = true;

        return $this->dynamicParameters[$name] = $value;
    }

    protected function getDefaultParameters(): array
    {
        return [
            'kernel.project_dir' => \dirname(__DIR__, 5),
            'kernel.environment' => 'dev',
            'kernel.debug' => true,
            'kernel.logs_dir' => (\dirname(__DIR__, 4).'/log/admin'),
            'kernel.bundles' => [
                'FrameworkBundle' => 'Symfony\\Bundle\\FrameworkBundle\\FrameworkBundle',
                'TwigBundle' => 'Symfony\\Bundle\\TwigBundle\\TwigBundle',
                'SuluCoreBundle' => 'Sulu\\Bundle\\CoreBundle\\SuluCoreBundle',
                'DoctrineBundle' => 'Doctrine\\Bundle\\DoctrineBundle\\DoctrineBundle',
                'DoctrinePHPCRBundle' => 'Doctrine\\Bundle\\PHPCRBundle\\DoctrinePHPCRBundle',
                'StofDoctrineExtensionsBundle' => 'Stof\\DoctrineExtensionsBundle\\StofDoctrineExtensionsBundle',
                'JMSSerializerBundle' => 'JMS\\SerializerBundle\\JMSSerializerBundle',
                'FOSRestBundle' => 'FOS\\RestBundle\\FOSRestBundle',
                'RestRoutingBundle' => 'HandcraftedInTheAlps\\RestRoutingBundle\\RestRoutingBundle',
                'FOSJsRoutingBundle' => 'FOS\\JsRoutingBundle\\FOSJsRoutingBundle',
                'MassiveSearchBundle' => 'Massive\\Bundle\\SearchBundle\\MassiveSearchBundle',
                'SuluAdminBundle' => 'Sulu\\Bundle\\AdminBundle\\SuluAdminBundle',
                'SuluSearchBundle' => 'Sulu\\Bundle\\SearchBundle\\SuluSearchBundle',
                'SuluPersistenceBundle' => 'Sulu\\Bundle\\PersistenceBundle\\SuluPersistenceBundle',
                'SuluPageBundle' => 'Sulu\\Bundle\\PageBundle\\SuluPageBundle',
                'SuluContactBundle' => 'Sulu\\Bundle\\ContactBundle\\SuluContactBundle',
                'SuluSecurityBundle' => 'Sulu\\Bundle\\SecurityBundle\\SuluSecurityBundle',
                'SuluWebsiteBundle' => 'Sulu\\Bundle\\WebsiteBundle\\SuluWebsiteBundle',
                'SuluTestBundle' => 'Sulu\\Bundle\\TestBundle\\SuluTestBundle',
                'SuluTagBundle' => 'Sulu\\Bundle\\TagBundle\\SuluTagBundle',
                'SuluMediaBundle' => 'Sulu\\Bundle\\MediaBundle\\SuluMediaBundle',
                'SuluCategoryBundle' => 'Sulu\\Bundle\\CategoryBundle\\SuluCategoryBundle',
                'SuluHttpCacheBundle' => 'Sulu\\Bundle\\HttpCacheBundle\\SuluHttpCacheBundle',
                'SuluSnippetBundle' => 'Sulu\\Bundle\\SnippetBundle\\SuluSnippetBundle',
                'SuluLocationBundle' => 'Sulu\\Bundle\\LocationBundle\\SuluLocationBundle',
                'SuluDocumentManagerBundle' => 'Sulu\\Bundle\\DocumentManagerBundle\\SuluDocumentManagerBundle',
                'SuluHashBundle' => 'Sulu\\Bundle\\HashBundle\\SuluHashBundle',
                'SuluActivityBundle' => 'Sulu\\Bundle\\ActivityBundle\\SuluActivityBundle',
                'SuluCustomUrlBundle' => 'Sulu\\Bundle\\CustomUrlBundle\\SuluCustomUrlBundle',
                'SuluRouteBundle' => 'Sulu\\Bundle\\RouteBundle\\SuluRouteBundle',
                'SuluMarkupBundle' => 'Sulu\\Bundle\\MarkupBundle\\SuluMarkupBundle',
                'SuluPreviewBundle' => 'Sulu\\Bundle\\PreviewBundle\\SuluPreviewBundle',
                'SuluAudienceTargetingBundle' => 'Sulu\\Bundle\\AudienceTargetingBundle\\SuluAudienceTargetingBundle',
                'SuluTrashBundle' => 'Sulu\\Bundle\\TrashBundle\\SuluTrashBundle',
                'SuluReferenceBundle' => 'Sulu\\Bundle\\ReferenceBundle\\SuluReferenceBundle',
                'PhpcrMigrationsBundle' => 'PHPCR\\PhpcrMigrationsBundle\\PhpcrMigrationsBundle',
                'DoctrineFixturesBundle' => 'Doctrine\\Bundle\\FixturesBundle\\DoctrineFixturesBundle',
                'MassiveBuildBundle' => 'Massive\\Bundle\\BuildBundle\\MassiveBuildBundle',
                'FOSHttpCacheBundle' => 'FOS\\HttpCacheBundle\\FOSHttpCacheBundle',
                'SecurityBundle' => 'Symfony\\Bundle\\SecurityBundle\\SecurityBundle',
                'SuluSnippetTabsBundle' => 'PERSPEQTIVE\\SuluSnippetTabsBundle\\SuluSnippetTabsBundle',
            ],
            'kernel.bundles_metadata' => [
                'FrameworkBundle' => [
                    'path' => '/var/www/html/vendor/symfony/framework-bundle',
                    'namespace' => 'Symfony\\Bundle\\FrameworkBundle',
                ],
                'TwigBundle' => [
                    'path' => '/var/www/html/vendor/symfony/twig-bundle',
                    'namespace' => 'Symfony\\Bundle\\TwigBundle',
                ],
                'SuluCoreBundle' => [
                    'path' => '/var/www/html/vendor/sulu/sulu/src/Sulu/Bundle/CoreBundle',
                    'namespace' => 'Sulu\\Bundle\\CoreBundle',
                ],
                'DoctrineBundle' => [
                    'path' => '/var/www/html/vendor/doctrine/doctrine-bundle',
                    'namespace' => 'Doctrine\\Bundle\\DoctrineBundle',
                ],
                'DoctrinePHPCRBundle' => [
                    'path' => '/var/www/html/vendor/doctrine/phpcr-bundle/src',
                    'namespace' => 'Doctrine\\Bundle\\PHPCRBundle',
                ],
                'StofDoctrineExtensionsBundle' => [
                    'path' => '/var/www/html/vendor/stof/doctrine-extensions-bundle/src',
                    'namespace' => 'Stof\\DoctrineExtensionsBundle',
                ],
                'JMSSerializerBundle' => [
                    'path' => '/var/www/html/vendor/jms/serializer-bundle',
                    'namespace' => 'JMS\\SerializerBundle',
                ],
                'FOSRestBundle' => [
                    'path' => '/var/www/html/vendor/friendsofsymfony/rest-bundle',
                    'namespace' => 'FOS\\RestBundle',
                ],
                'RestRoutingBundle' => [
                    'path' => '/var/www/html/vendor/handcraftedinthealps/rest-routing-bundle',
                    'namespace' => 'HandcraftedInTheAlps\\RestRoutingBundle',
                ],
                'FOSJsRoutingBundle' => [
                    'path' => '/var/www/html/vendor/friendsofsymfony/jsrouting-bundle',
                    'namespace' => 'FOS\\JsRoutingBundle',
                ],
                'MassiveSearchBundle' => [
                    'path' => '/var/www/html/vendor/massive/search-bundle',
                    'namespace' => 'Massive\\Bundle\\SearchBundle',
                ],
                'SuluAdminBundle' => [
                    'path' => '/var/www/html/vendor/sulu/sulu/src/Sulu/Bundle/AdminBundle',
                    'namespace' => 'Sulu\\Bundle\\AdminBundle',
                ],
                'SuluSearchBundle' => [
                    'path' => '/var/www/html/vendor/sulu/sulu/src/Sulu/Bundle/SearchBundle',
                    'namespace' => 'Sulu\\Bundle\\SearchBundle',
                ],
                'SuluPersistenceBundle' => [
                    'path' => '/var/www/html/vendor/sulu/sulu/src/Sulu/Bundle/PersistenceBundle',
                    'namespace' => 'Sulu\\Bundle\\PersistenceBundle',
                ],
                'SuluPageBundle' => [
                    'path' => '/var/www/html/vendor/sulu/sulu/src/Sulu/Bundle/PageBundle',
                    'namespace' => 'Sulu\\Bundle\\PageBundle',
                ],
                'SuluContactBundle' => [
                    'path' => '/var/www/html/vendor/sulu/sulu/src/Sulu/Bundle/ContactBundle',
                    'namespace' => 'Sulu\\Bundle\\ContactBundle',
                ],
                'SuluSecurityBundle' => [
                    'path' => '/var/www/html/vendor/sulu/sulu/src/Sulu/Bundle/SecurityBundle',
                    'namespace' => 'Sulu\\Bundle\\SecurityBundle',
                ],
                'SuluWebsiteBundle' => [
                    'path' => '/var/www/html/vendor/sulu/sulu/src/Sulu/Bundle/WebsiteBundle',
                    'namespace' => 'Sulu\\Bundle\\WebsiteBundle',
                ],
                'SuluTestBundle' => [
                    'path' => '/var/www/html/vendor/sulu/sulu/src/Sulu/Bundle/TestBundle',
                    'namespace' => 'Sulu\\Bundle\\TestBundle',
                ],
                'SuluTagBundle' => [
                    'path' => '/var/www/html/vendor/sulu/sulu/src/Sulu/Bundle/TagBundle',
                    'namespace' => 'Sulu\\Bundle\\TagBundle',
                ],
                'SuluMediaBundle' => [
                    'path' => '/var/www/html/vendor/sulu/sulu/src/Sulu/Bundle/MediaBundle',
                    'namespace' => 'Sulu\\Bundle\\MediaBundle',
                ],
                'SuluCategoryBundle' => [
                    'path' => '/var/www/html/vendor/sulu/sulu/src/Sulu/Bundle/CategoryBundle',
                    'namespace' => 'Sulu\\Bundle\\CategoryBundle',
                ],
                'SuluHttpCacheBundle' => [
                    'path' => '/var/www/html/vendor/sulu/sulu/src/Sulu/Bundle/HttpCacheBundle',
                    'namespace' => 'Sulu\\Bundle\\HttpCacheBundle',
                ],
                'SuluSnippetBundle' => [
                    'path' => '/var/www/html/vendor/sulu/sulu/src/Sulu/Bundle/SnippetBundle',
                    'namespace' => 'Sulu\\Bundle\\SnippetBundle',
                ],
                'SuluLocationBundle' => [
                    'path' => '/var/www/html/vendor/sulu/sulu/src/Sulu/Bundle/LocationBundle',
                    'namespace' => 'Sulu\\Bundle\\LocationBundle',
                ],
                'SuluDocumentManagerBundle' => [
                    'path' => '/var/www/html/vendor/sulu/sulu/src/Sulu/Bundle/DocumentManagerBundle',
                    'namespace' => 'Sulu\\Bundle\\DocumentManagerBundle',
                ],
                'SuluHashBundle' => [
                    'path' => '/var/www/html/vendor/sulu/sulu/src/Sulu/Bundle/HashBundle',
                    'namespace' => 'Sulu\\Bundle\\HashBundle',
                ],
                'SuluActivityBundle' => [
                    'path' => '/var/www/html/vendor/sulu/sulu/src/Sulu/Bundle/ActivityBundle',
                    'namespace' => 'Sulu\\Bundle\\ActivityBundle',
                ],
                'SuluCustomUrlBundle' => [
                    'path' => '/var/www/html/vendor/sulu/sulu/src/Sulu/Bundle/CustomUrlBundle',
                    'namespace' => 'Sulu\\Bundle\\CustomUrlBundle',
                ],
                'SuluRouteBundle' => [
                    'path' => '/var/www/html/vendor/sulu/sulu/src/Sulu/Bundle/RouteBundle',
                    'namespace' => 'Sulu\\Bundle\\RouteBundle',
                ],
                'SuluMarkupBundle' => [
                    'path' => '/var/www/html/vendor/sulu/sulu/src/Sulu/Bundle/MarkupBundle',
                    'namespace' => 'Sulu\\Bundle\\MarkupBundle',
                ],
                'SuluPreviewBundle' => [
                    'path' => '/var/www/html/vendor/sulu/sulu/src/Sulu/Bundle/PreviewBundle',
                    'namespace' => 'Sulu\\Bundle\\PreviewBundle',
                ],
                'SuluAudienceTargetingBundle' => [
                    'path' => '/var/www/html/vendor/sulu/sulu/src/Sulu/Bundle/AudienceTargetingBundle',
                    'namespace' => 'Sulu\\Bundle\\AudienceTargetingBundle',
                ],
                'SuluTrashBundle' => [
                    'path' => '/var/www/html/vendor/sulu/sulu/src/Sulu/Bundle/TrashBundle',
                    'namespace' => 'Sulu\\Bundle\\TrashBundle',
                ],
                'SuluReferenceBundle' => [
                    'path' => '/var/www/html/vendor/sulu/sulu/src/Sulu/Bundle/ReferenceBundle',
                    'namespace' => 'Sulu\\Bundle\\ReferenceBundle',
                ],
                'PhpcrMigrationsBundle' => [
                    'path' => '/var/www/html/vendor/phpcr/phpcr-migrations-bundle/src',
                    'namespace' => 'PHPCR\\PhpcrMigrationsBundle',
                ],
                'DoctrineFixturesBundle' => [
                    'path' => '/var/www/html/vendor/doctrine/doctrine-fixtures-bundle',
                    'namespace' => 'Doctrine\\Bundle\\FixturesBundle',
                ],
                'MassiveBuildBundle' => [
                    'path' => '/var/www/html/vendor/massive/build-bundle',
                    'namespace' => 'Massive\\Bundle\\BuildBundle',
                ],
                'FOSHttpCacheBundle' => [
                    'path' => '/var/www/html/vendor/friendsofsymfony/http-cache-bundle/src',
                    'namespace' => 'FOS\\HttpCacheBundle',
                ],
                'SecurityBundle' => [
                    'path' => '/var/www/html/vendor/symfony/security-bundle',
                    'namespace' => 'Symfony\\Bundle\\SecurityBundle',
                ],
                'SuluSnippetTabsBundle' => [
                    'path' => '/var/www/html/src',
                    'namespace' => 'PERSPEQTIVE\\SuluSnippetTabsBundle',
                ],
            ],
            'kernel.charset' => 'UTF-8',
            'kernel.container_class' => 'PERSPEQTIVE_SuluSnippetTabsBundle_Tests_Application_KernelDevDebugContainer',
            'sulu.context' => 'admin',
            'sulu.common_cache_dir' => (\dirname(__DIR__, 3).'/common/dev'),
            'phpcr.transport' => 'doctrinedbal',
            'env(DATABASE_URL)' => 'mysql://root:@127.0.0.1:3306/sulu_test',
            'env(DATABASE_CHARSET)' => 'utf8mb4',
            'env(DATABASE_COLLATE)' => 'utf8mb4_unicode_ci',
            'env(PHPCR_TRANSPORT)' => 'doctrinedbal',
            'env(PHPCR_BACKEND_URL)' => 'http://localhost:8080/server/',
            'env(PHPCR_USERNAME)' => 'admin',
            'env(PHPCR_PASSWORD)' => 'admin',
            'env(PHPCR_WORKSPACE)' => 'test',
            'event_dispatcher.event_aliases' => [
                'Symfony\\Component\\Console\\Event\\ConsoleCommandEvent' => 'console.command',
                'Symfony\\Component\\Console\\Event\\ConsoleErrorEvent' => 'console.error',
                'Symfony\\Component\\Console\\Event\\ConsoleSignalEvent' => 'console.signal',
                'Symfony\\Component\\Console\\Event\\ConsoleTerminateEvent' => 'console.terminate',
                'Symfony\\Component\\Form\\Event\\PreSubmitEvent' => 'form.pre_submit',
                'Symfony\\Component\\Form\\Event\\SubmitEvent' => 'form.submit',
                'Symfony\\Component\\Form\\Event\\PostSubmitEvent' => 'form.post_submit',
                'Symfony\\Component\\Form\\Event\\PreSetDataEvent' => 'form.pre_set_data',
                'Symfony\\Component\\Form\\Event\\PostSetDataEvent' => 'form.post_set_data',
                'Symfony\\Component\\HttpKernel\\Event\\ControllerArgumentsEvent' => 'kernel.controller_arguments',
                'Symfony\\Component\\HttpKernel\\Event\\ControllerEvent' => 'kernel.controller',
                'Symfony\\Component\\HttpKernel\\Event\\ResponseEvent' => 'kernel.response',
                'Symfony\\Component\\HttpKernel\\Event\\FinishRequestEvent' => 'kernel.finish_request',
                'Symfony\\Component\\HttpKernel\\Event\\RequestEvent' => 'kernel.request',
                'Symfony\\Component\\HttpKernel\\Event\\ViewEvent' => 'kernel.view',
                'Symfony\\Component\\HttpKernel\\Event\\ExceptionEvent' => 'kernel.exception',
                'Symfony\\Component\\HttpKernel\\Event\\TerminateEvent' => 'kernel.terminate',
                'Symfony\\Component\\Security\\Core\\Event\\AuthenticationSuccessEvent' => 'security.authentication.success',
                'Symfony\\Component\\Security\\Http\\Event\\InteractiveLoginEvent' => 'security.interactive_login',
                'Symfony\\Component\\Security\\Http\\Event\\SwitchUserEvent' => 'security.switch_user',
            ],
            'fragment.renderer.hinclude.global_template' => NULL,
            'fragment.path' => '/admin/_fragments',
            'kernel.secret' => 'secret',
            'kernel.http_method_override' => false,
            'kernel.default_locale' => 'en',
            'kernel.enabled_locales' => [

            ],
            'kernel.error_controller' => 'error_controller',
            'test.client.parameters' => [

            ],
            'asset.request_context.base_path' => NULL,
            'asset.request_context.secure' => NULL,
            'translator.logging' => false,
            'translator.default_path' => (\dirname(__DIR__, 5).'/translations'),
            'debug.error_handler.throw_at' => -1,
            'router.request_context.host' => 'localhost',
            'router.request_context.scheme' => 'http',
            'router.request_context.base_url' => '',
            'router.resource' => (\dirname(__DIR__, 5).'/config/routing.yml'),
            'request_listener.http_port' => 80,
            'request_listener.https_port' => 443,
            'session.metadata.storage_key' => '_sf2_meta',
            'session.storage.options' => [
                'cache_limiter' => '0',
                'cookie_path' => '/admin',
                'cookie_secure' => 'auto',
                'cookie_httponly' => true,
                'cookie_samesite' => 'lax',
            ],
            'session.save_path' => NULL,
            'session.metadata.update_threshold' => 0,
            'form.type_extension.csrf.enabled' => true,
            'form.type_extension.csrf.field_name' => '_token',
            'form.type_extension.csrf.field_attr' => [
                'data-controller' => 'csrf-protection',
            ],
            'validator.translation_domain' => 'validators',
            'data_collector.templates' => [

            ],
            'twig.form.resources' => [
                0 => 'form_div_layout.html.twig',
            ],
            'twig.default_path' => (\dirname(__DIR__, 5).'/templates'),
            'sulu_core.locales' => [
                0 => 'de',
                1 => 'en',
            ],
            'sulu_core.translated_locales' => [
                'de' => 'Deutsch',
                'en' => 'English',
            ],
            'sulu_core.translations' => [
                0 => 'de',
                1 => 'en',
            ],
            'sulu_core.fallback_locale' => 'en',
            'sulu.content.language.namespace' => 'i18n',
            'sulu.content.language.default' => 'en',
            'sulu.content.node_names.base' => 'cmf',
            'sulu.content.node_names.content' => 'contents',
            'sulu.content.node_names.route' => 'routes',
            'sulu.content.node_names.snippet' => 'snippets',
            'sulu.content.structure.default_types' => [
                'snippet' => 'default',
            ],
            'sulu.content.structure.default_type.snippet' => 'default',
            'sulu.content.structure.required_properties' => [
                'snippet' => [
                    0 => 'title',
                ],
                'home' => [
                    0 => 'title',
                ],
                'page' => [
                    0 => 'title',
                ],
            ],
            'sulu.content.structure.required_tags' => [
                'home' => [
                    0 => 'sulu.rlp',
                ],
                'page' => [
                    0 => 'sulu.rlp',
                ],
            ],
            'sulu.content.internal_prefix' => '',
            'sulu.content.structure.type_map' => [
                'snippet' => 'Sulu\\Component\\Content\\Compat\\Structure\\SnippetBridge',
                'page' => 'Sulu\\Component\\Content\\Compat\\Structure\\PageBridge',
                'home' => 'Sulu\\Component\\Content\\Compat\\Structure\\PageBridge',
            ],
            'sulu.content.structure.paths' => [
                'snippet' => [
                    0 => [
                        'path' => (\dirname(__DIR__, 5).'/config/templates/snippets'),
                        'type' => 'snippet',
                    ],
                ],
                'page' => [
                    0 => [
                        'path' => '/var/www/html/vendor/sulu/sulu/src/Sulu/Bundle/PageBundle/DependencyInjection/../Content/templates',
                        'type' => 'page',
                    ],
                    1 => [
                        'path' => (\dirname(__DIR__, 5).'/config/templates/pages'),
                        'type' => 'page',
                    ],
                ],
                'home' => [
                    0 => [
                        'path' => (\dirname(__DIR__, 5).'/config/templates/pages'),
                        'type' => 'home',
                    ],
                ],
                'block' => [
                    0 => [
                        'path' => (\dirname(__DIR__, 5).'/config/templates/blocks'),
                        'type' => 'block',
                    ],
                ],
            ],
            'sulu.content.path_cleaner.replacer_loader.file_locator.class' => 'Symfony\\Component\\Config\\FileLocator',
            'sulu.content.path_cleaner.replacer_loader.class' => 'Sulu\\Bundle\\CoreBundle\\DataFixtures\\ReplacerXmlLoader',
            'sulu.content.path_cleaner.class' => 'Sulu\\Component\\PHPCR\\PathCleanup',
            'sulu.content.template_resolver.class' => 'Sulu\\Component\\Content\\Template\\TemplateResolver',
            'sulu.content.mapper.class' => 'Sulu\\Component\\Content\\Mapper\\ContentMapper',
            'sulu.content.structure_manager.class' => 'Sulu\\Component\\Content\\Compat\\StructureManager',
            'sulu.content.webspace_structure_provider.class' => 'Sulu\\Component\\Webspace\\StructureProvider\\WebspaceStructureProvider',
            'sulu.content.type_manager.class' => 'Sulu\\Component\\Content\\ContentTypeManager',
            'sulu.content.type.number.class' => 'Sulu\\Component\\Content\\Types\\Number',
            'sulu.content.type.text_line.class' => 'Sulu\\Component\\Content\\Types\\TextLine',
            'sulu.content.type.text_area.class' => 'Sulu\\Component\\Content\\Types\\TextArea',
            'sulu.content.type.text_editor.class' => 'Sulu\\Component\\Content\\Types\\TextEditor',
            'sulu.content.type.resource_locator.class' => 'Sulu\\Component\\Content\\Types\\ResourceLocator',
            'sulu.content.type.link.class' => 'Sulu\\Component\\Content\\Types\\Link',
            'sulu.content.type.single_icon_selection.class' => 'Sulu\\Component\\Content\\Types\\SingleIconSelection',
            'sulu.content.type.block.class' => 'Sulu\\Component\\Content\\Types\\BlockContentType',
            'sulu.content.resource_locator.mapper.phpcr.class' => 'Sulu\\Component\\Content\\Types\\ResourceLocator\\Mapper\\PhpcrMapper',
            'sulu.content.query_executor.class' => 'Sulu\\Component\\Content\\Query\\ContentQueryExecutor',
            'sulu.cache.warmer.structure.class' => 'Sulu\\Bundle\\CoreBundle\\Cache\\StructureWarmer',
            'sulu.util.node_helper.class' => 'Sulu\\Component\\Util\\SuluNodeHelper',
            'sulu_core.webspace.config_dir' => (\dirname(__DIR__, 5).'/config/webspaces'),
            'sulu_core.webspace.cache_class' => 'adminWebspaceCollectionCache',
            'sulu_core.webspace.base_class' => 'WebspaceCollection',
            'sulu_core.cache.memoize.default_lifetime' => 1,
            'sulu.fields_defaults.translations' => [
                'id' => 'public.id',
                'title' => 'public.title',
                'name' => 'public.name',
                'created' => 'public.created',
                'changed' => 'public.changed',
            ],
            'sulu.fields_defaults.widths' => [
                'id' => '50px',
            ],
            'sulu.phpcr.session.class' => 'Sulu\\Component\\PHPCR\\SessionManager\\SessionManager',
            'sulu_core.build.builder.database.class' => 'Sulu\\Bundle\\CoreBundle\\Build\\DatabaseBuilder',
            'sulu_core.build.builder.phpcr.class' => 'Sulu\\Bundle\\CoreBundle\\Build\\PhpcrBuilder',
            'sulu_core.build.builder.phpcr_migrations.class' => 'Sulu\\Bundle\\CoreBundle\\Build\\PhpcrMigrationsBuilder',
            'sulu_core.build.builder.fixtures.class' => 'Sulu\\Bundle\\CoreBundle\\Build\\FixturesBuilder',
            'sulu.core.localization_manager.class' => 'Sulu\\Component\\Localization\\Manager\\LocalizationManager',
            'sulu.core.localization_manager.core_provider.class' => 'Sulu\\Component\\Localization\\Provider\\LocalizationProvider',
            'doctrine.dbal.configuration.class' => 'Doctrine\\DBAL\\Configuration',
            'doctrine.data_collector.class' => 'Doctrine\\Bundle\\DoctrineBundle\\DataCollector\\DoctrineDataCollector',
            'doctrine.dbal.connection.event_manager.class' => 'Symfony\\Bridge\\Doctrine\\ContainerAwareEventManager',
            'doctrine.dbal.connection_factory.class' => 'Doctrine\\Bundle\\DoctrineBundle\\ConnectionFactory',
            'doctrine.dbal.events.mysql_session_init.class' => 'Doctrine\\DBAL\\Event\\Listeners\\MysqlSessionInit',
            'doctrine.dbal.events.oracle_session_init.class' => 'Doctrine\\DBAL\\Event\\Listeners\\OracleSessionInit',
            'doctrine.class' => 'Doctrine\\Bundle\\DoctrineBundle\\Registry',
            'doctrine.entity_managers' => [
                'default' => 'doctrine.orm.default_entity_manager',
            ],
            'doctrine.default_entity_manager' => 'default',
            'doctrine.dbal.connection_factory.types' => [
                'date_point' => [
                    'class' => 'Symfony\\Bridge\\Doctrine\\Types\\DatePointType',
                ],
            ],
            'doctrine.connections' => [
                'default' => 'doctrine.dbal.default_connection',
            ],
            'doctrine.default_connection' => 'default',
            'doctrine.orm.configuration.class' => 'Doctrine\\ORM\\Configuration',
            'doctrine.orm.entity_manager.class' => 'Doctrine\\ORM\\EntityManager',
            'doctrine.orm.manager_configurator.class' => 'Doctrine\\Bundle\\DoctrineBundle\\ManagerConfigurator',
            'doctrine.orm.cache.array.class' => 'Doctrine\\Common\\Cache\\ArrayCache',
            'doctrine.orm.cache.apc.class' => 'Doctrine\\Common\\Cache\\ApcCache',
            'doctrine.orm.cache.memcache.class' => 'Doctrine\\Common\\Cache\\MemcacheCache',
            'doctrine.orm.cache.memcache_host' => 'localhost',
            'doctrine.orm.cache.memcache_port' => 11211,
            'doctrine.orm.cache.memcache_instance.class' => 'Memcache',
            'doctrine.orm.cache.memcached.class' => 'Doctrine\\Common\\Cache\\MemcachedCache',
            'doctrine.orm.cache.memcached_host' => 'localhost',
            'doctrine.orm.cache.memcached_port' => 11211,
            'doctrine.orm.cache.memcached_instance.class' => 'Memcached',
            'doctrine.orm.cache.redis.class' => 'Doctrine\\Common\\Cache\\RedisCache',
            'doctrine.orm.cache.redis_host' => 'localhost',
            'doctrine.orm.cache.redis_port' => 6379,
            'doctrine.orm.cache.redis_instance.class' => 'Redis',
            'doctrine.orm.cache.xcache.class' => 'Doctrine\\Common\\Cache\\XcacheCache',
            'doctrine.orm.cache.wincache.class' => 'Doctrine\\Common\\Cache\\WinCacheCache',
            'doctrine.orm.cache.zenddata.class' => 'Doctrine\\Common\\Cache\\ZendDataCache',
            'doctrine.orm.metadata.driver_chain.class' => 'Doctrine\\Persistence\\Mapping\\Driver\\MappingDriverChain',
            'doctrine.orm.metadata.annotation.class' => 'Doctrine\\ORM\\Mapping\\Driver\\AnnotationDriver',
            'doctrine.orm.metadata.xml.class' => 'Doctrine\\ORM\\Mapping\\Driver\\SimplifiedXmlDriver',
            'doctrine.orm.metadata.yml.class' => 'Doctrine\\ORM\\Mapping\\Driver\\SimplifiedYamlDriver',
            'doctrine.orm.metadata.php.class' => 'Doctrine\\ORM\\Mapping\\Driver\\PHPDriver',
            'doctrine.orm.metadata.staticphp.class' => 'Doctrine\\ORM\\Mapping\\Driver\\StaticPHPDriver',
            'doctrine.orm.metadata.attribute.class' => 'Doctrine\\ORM\\Mapping\\Driver\\AttributeDriver',
            'doctrine.orm.proxy_cache_warmer.class' => 'Symfony\\Bridge\\Doctrine\\CacheWarmer\\ProxyCacheWarmer',
            'form.type_guesser.doctrine.class' => 'Symfony\\Bridge\\Doctrine\\Form\\DoctrineOrmTypeGuesser',
            'doctrine.orm.validator.unique.class' => 'Symfony\\Bridge\\Doctrine\\Validator\\Constraints\\UniqueEntityValidator',
            'doctrine.orm.validator_initializer.class' => 'Symfony\\Bridge\\Doctrine\\Validator\\DoctrineInitializer',
            'doctrine.orm.security.user.provider.class' => 'Symfony\\Bridge\\Doctrine\\Security\\User\\EntityUserProvider',
            'doctrine.orm.listeners.resolve_target_entity.class' => 'Doctrine\\ORM\\Tools\\ResolveTargetEntityListener',
            'doctrine.orm.listeners.attach_entity_listeners.class' => 'Doctrine\\ORM\\Tools\\AttachEntityListenersListener',
            'doctrine.orm.naming_strategy.default.class' => 'Doctrine\\ORM\\Mapping\\DefaultNamingStrategy',
            'doctrine.orm.naming_strategy.underscore.class' => 'Doctrine\\ORM\\Mapping\\UnderscoreNamingStrategy',
            'doctrine.orm.quote_strategy.default.class' => 'Doctrine\\ORM\\Mapping\\DefaultQuoteStrategy',
            'doctrine.orm.quote_strategy.ansi.class' => 'Doctrine\\ORM\\Mapping\\AnsiQuoteStrategy',
            'doctrine.orm.typed_field_mapper.default.class' => 'Doctrine\\ORM\\Mapping\\DefaultTypedFieldMapper',
            'doctrine.orm.entity_listener_resolver.class' => 'Doctrine\\Bundle\\DoctrineBundle\\Mapping\\ContainerEntityListenerResolver',
            'doctrine.orm.second_level_cache.default_cache_factory.class' => 'Doctrine\\ORM\\Cache\\DefaultCacheFactory',
            'doctrine.orm.second_level_cache.default_region.class' => 'Doctrine\\ORM\\Cache\\Region\\DefaultRegion',
            'doctrine.orm.second_level_cache.filelock_region.class' => 'Doctrine\\ORM\\Cache\\Region\\FileLockRegion',
            'doctrine.orm.second_level_cache.logger_chain.class' => 'Doctrine\\ORM\\Cache\\Logging\\CacheLoggerChain',
            'doctrine.orm.second_level_cache.logger_statistics.class' => 'Doctrine\\ORM\\Cache\\Logging\\StatisticsCacheLogger',
            'doctrine.orm.second_level_cache.cache_configuration.class' => 'Doctrine\\ORM\\Cache\\CacheConfiguration',
            'doctrine.orm.second_level_cache.regions_configuration.class' => 'Doctrine\\ORM\\Cache\\RegionsConfiguration',
            'doctrine.orm.auto_generate_proxy_classes' => true,
            'doctrine.orm.enable_lazy_ghost_objects' => false,
            'doctrine.orm.proxy_namespace' => 'Proxies',
            'doctrine_phpcr.odm.document_managers' => [

            ],
            'doctrine_phpcr.odm.default_document_manager' => '',
            'doctrine_phpcr.workspace_dir' => NULL,
            'doctrine_phpcr.jackrabbit_jar' => NULL,
            'doctrine_phpcr.dump_max_line_length' => 120,
            'doctrine_phpcr.sessions' => [
                'default' => 'doctrine_phpcr.default_session',
                'live' => 'doctrine_phpcr.live_session',
            ],
            'doctrine_phpcr.default_session' => 'default',
            'doctrine_phpcr.form.type_guess' => [

            ],
            'stof_doctrine_extensions.listener.tree.class' => 'Gedmo\\Tree\\TreeListener',
            'stof_doctrine_extensions.default_locale' => 'en',
            'stof_doctrine_extensions.translation_fallback' => false,
            'stof_doctrine_extensions.persist_default_translation' => false,
            'stof_doctrine_extensions.skip_translation_on_load' => false,
            'stof_doctrine_extensions.listener.translatable.class' => 'Gedmo\\Translatable\\TranslatableListener',
            'stof_doctrine_extensions.listener.timestampable.class' => 'Gedmo\\Timestampable\\TimestampableListener',
            'stof_doctrine_extensions.listener.blameable.class' => 'Gedmo\\Blameable\\BlameableListener',
            'stof_doctrine_extensions.listener.sluggable.class' => 'Gedmo\\Sluggable\\SluggableListener',
            'stof_doctrine_extensions.listener.loggable.class' => 'Gedmo\\Loggable\\LoggableListener',
            'stof_doctrine_extensions.listener.sortable.class' => 'Gedmo\\Sortable\\SortableListener',
            'stof_doctrine_extensions.listener.softdeleteable.class' => 'Gedmo\\SoftDeleteable\\SoftDeleteableListener',
            'stof_doctrine_extensions.listener.uploadable.class' => 'Gedmo\\Uploadable\\UploadableListener',
            'stof_doctrine_extensions.listener.reference_integrity.class' => 'Gedmo\\ReferenceIntegrity\\ReferenceIntegrityListener',
            'jms_serializer.twig_enabled' => 'default',
            'fos_js_routing.extractor.class' => 'FOS\\JsRoutingBundle\\Extractor\\ExposedRoutesExtractor',
            'fos_js_routing.routes_response.class' => 'FOS\\JsRoutingBundle\\Response\\RoutesResponse',
            'fos_js_routing.controller.class' => 'FOS\\JsRoutingBundle\\Controller\\Controller',
            'fos_js_routing.normalizer.route_collection.class' => 'FOS\\JsRoutingBundle\\Serializer\\Normalizer\\RouteCollectionNormalizer',
            'fos_js_routing.normalizer.routes_response.class' => 'FOS\\JsRoutingBundle\\Serializer\\Normalizer\\RoutesResponseNormalizer',
            'fos_js_routing.denormalizer.route_collection.class' => 'FOS\\JsRoutingBundle\\Serializer\\Denormalizer\\RouteCollectionDenormalizer',
            'fos_js_routing.request_context_base_url' => NULL,
            'fos_js_routing.cache_control' => [
                'enabled' => false,
            ],
            'massive_search.search_manager.class' => 'Massive\\Bundle\\SearchBundle\\Search\\SearchManager',
            'massive_search.object_to_document_converter.class' => 'Massive\\Bundle\\SearchBundle\\Search\\ObjectToDocumentConverter',
            'massive_search.expression_language.class' => 'Massive\\Bundle\\SearchBundle\\Search\\ExpressionLanguage\\MassiveSearchExpressionLanguage',
            'massive_search.search.adapter.zend_lucene.class' => 'Massive\\Bundle\\SearchBundle\\Search\\Adapter\\ZendLuceneAdapter',
            'massive_search.search.adapter.test.class' => 'Massive\\Bundle\\SearchBundle\\Search\\Adapter\\TestAdapter',
            'massive_search.factory_default.class' => 'Massive\\Bundle\\SearchBundle\\Search\\Factory',
            'massive_search.controller.rest.class' => 'Massive\\Bundle\\SearchBundle\\Controller\\SearchController',
            'massive_search.events.index' => 'massive_search.index',
            'massive_search.events.deindex' => 'massive_search.deindex',
            'massive_search.adapter.zend_lucene.basepath' => (\dirname(__DIR__, 4).'/indexes'),
            'massive_search.adapter.zend_lucene.hide_index_exception' => false,
            'massive_search.adapter.zend_lucene.encoding' => 'UTF-8',
            'massive_search.metadata.prefix' => 'massive',
            'massive_search.metadata.debug' => true,
            'massive_search.metadata.driver.xml.class' => 'Massive\\Bundle\\SearchBundle\\Search\\Metadata\\Driver\\XmlDriver',
            'massive_search.metadata.driver.annotation.class' => 'Symfony\\Cmf\\Bundle\\TreeUiBundle\\Tree\\Metadata\\Driver\\AnnotationDriver',
            'massive_search.metadata.driver.chain.class' => 'Metadata\\Driver\\DriverChain',
            'massive_search.metadata.file_locator.class' => 'Metadata\\Driver\\FileLocator',
            'massive_search.metadata.factory.class' => 'Metadata\\MetadataFactory',
            'massive_search.metadata.field_evaluator.class' => 'Massive\\Bundle\\SearchBundle\\Search\\Metadata\\FieldEvaluator',
            'massive_search.metadata.cache.file_cache.class' => 'Metadata\\Cache\\FileCache',
            'massive_search.metadata.provider.default.class' => 'Massive\\Bundle\\SearchBundle\\Search\\Metadata\\Provider\\DefaultProvider',
            'massive_search.metadata.provider.chain.class' => 'Massive\\Bundle\\SearchBundle\\Search\\Metadata\\Provider\\ChainProvider',
            'sulu_admin.name' => 'SULU 2.0',
            'sulu_admin.email' => 'installation.email@sulu.test',
            'sulu_admin.user_data_service' => 'sulu_security.user_manager',
            'sulu_admin.resources' => [
                'references' => [
                    'routes' => [
                        'list' => 'sulu_reference.get_references',
                    ],
                ],
                'trash_items' => [
                    'routes' => [
                        'list' => 'sulu_trash.get_trash-items',
                        'detail' => 'sulu_trash.get_trash-item',
                    ],
                ],
                'target_groups' => [
                    'routes' => [
                        'list' => 'sulu_audience_targeting.get_target-groups',
                        'detail' => 'sulu_audience_targeting.get_target-group',
                    ],
                ],
                'preview_links' => [
                    'routes' => [
                        'detail' => 'sulu_preview.get_preview-link',
                    ],
                ],
                'routes' => [
                    'routes' => [
                        'list' => 'sulu_routes.get_routes',
                    ],
                ],
                'custom_urls' => [
                    'routes' => [
                        'list' => 'sulu_custom_url.cget_webspace_custom-urls',
                        'detail' => 'sulu_custom_url.get_webspace_custom-urls',
                    ],
                ],
                'custom_url_routes' => [
                    'routes' => [
                        'list' => 'sulu_custom_url.get_webspace_custom-urls_routes',
                    ],
                ],
                'activities' => [
                    'routes' => [
                        'list' => 'sulu_activity.get_activities',
                    ],
                ],
                'geolocator_locations' => [
                    'routes' => [
                        'list' => 'sulu_location.geolocator_query',
                    ],
                ],
                'snippets' => [
                    'routes' => [
                        'list' => 'sulu_snippet.get_snippets',
                        'detail' => 'sulu_snippet.get_snippet',
                    ],
                    'views' => [
                        'list' => 'sulu_snippet.list',
                        'detail' => 'sulu_snippet.edit_form',
                    ],
                ],
                'snippet_areas' => [
                    'routes' => [
                        'list' => 'sulu_snippet.get_snippet-areas',
                        'detail' => 'sulu_snippet.put_snippet-area',
                    ],
                ],
                'categories' => [
                    'routes' => [
                        'list' => 'sulu_category.get_categories',
                        'detail' => 'sulu_category.get_category',
                    ],
                ],
                'category_keywords' => [
                    'routes' => [
                        'list' => 'sulu_category.get_category_keywords',
                        'detail' => 'sulu_category.get_category_keyword',
                    ],
                ],
                'media' => [
                    'routes' => [
                        'list' => 'sulu_media.cget_media',
                        'detail' => 'sulu_media.get_media',
                    ],
                    'security_context' => 'sulu.media.collections',
                    'security_class' => 'Sulu\\Bundle\\MediaBundle\\Entity\\Collection',
                ],
                'media_preview' => [
                    'routes' => [
                        'detail' => 'sulu_media.post_media_preview',
                    ],
                ],
                'media_formats' => [
                    'routes' => [
                        'list' => 'sulu_media.get_media_formats',
                        'detail' => 'sulu_media.put_media_format',
                    ],
                ],
                'media_versions' => [
                    'routes' => [
                        'detail' => 'sulu_media.delete_media_version',
                    ],
                ],
                'collections' => [
                    'routes' => [
                        'list' => 'sulu_media.get_collections',
                        'detail' => 'sulu_media.get_collection',
                    ],
                ],
                'formats' => [
                    'routes' => [
                        'list' => 'sulu_media.get_formats',
                        'detail' => 'sulu_media.get_format',
                    ],
                ],
                'tags' => [
                    'routes' => [
                        'list' => 'sulu_tag.get_tags',
                        'detail' => 'sulu_tag.get_tag',
                    ],
                ],
                'analytics' => [
                    'routes' => [
                        'list' => 'sulu_website.cget_webspace_analytics',
                        'detail' => 'sulu_website.get_webspace_analytics',
                    ],
                ],
                'permissions' => [
                    'routes' => [
                        'detail' => 'sulu_security.get_permissions',
                    ],
                ],
                'roles' => [
                    'routes' => [
                        'list' => 'sulu_security.get_roles',
                        'detail' => 'sulu_security.get_role',
                    ],
                ],
                'users' => [
                    'routes' => [
                        'list' => 'sulu_security.get_users',
                        'detail' => 'sulu_security.get_user',
                    ],
                ],
                'profile' => [
                    'routes' => [
                        'detail' => 'sulu_security.get_profile',
                    ],
                ],
                'contacts' => [
                    'routes' => [
                        'list' => 'sulu_contact.get_contacts',
                        'detail' => 'sulu_contact.get_contact',
                    ],
                ],
                'contact_titles' => [
                    'routes' => [
                        'list' => 'sulu_contact.get_contact-titles',
                    ],
                ],
                'contact_positions' => [
                    'routes' => [
                        'list' => 'sulu_contact.get_contact-positions',
                    ],
                ],
                'contact_media' => [
                    'routes' => [
                        'list' => 'sulu_contact.cget_contact_medias',
                        'detail' => 'sulu_contact.delete_contact_medias',
                    ],
                ],
                'accounts' => [
                    'routes' => [
                        'list' => 'sulu_contact.get_accounts',
                        'detail' => 'sulu_contact.get_account',
                    ],
                ],
                'account_media' => [
                    'routes' => [
                        'list' => 'sulu_contact.cget_account_medias',
                        'detail' => 'sulu_contact.delete_account_medias',
                    ],
                ],
                'account_contacts' => [
                    'routes' => [
                        'list' => 'sulu_contact.get_account_contacts',
                        'detail' => 'sulu_contact.delete_account_contacts',
                    ],
                ],
                'page_resourcelocators' => [
                    'routes' => [
                        'list' => 'sulu_page.get_page_resourcelocators',
                    ],
                ],
                'pages' => [
                    'routes' => [
                        'list' => 'sulu_page.get_pages',
                        'detail' => 'sulu_page.get_page',
                    ],
                    'views' => [
                        'list' => 'sulu_page.pages_list',
                        'detail' => 'sulu_page.page_edit_form',
                    ],
                    'security_context' => 'sulu.webspaces.#webspace#',
                    'security_class' => 'Sulu\\Component\\Content\\Document\\Behavior\\SecurityBehavior',
                ],
                'page_versions' => [
                    'routes' => [
                        'list' => 'sulu_page.get_page_versions',
                        'detail' => 'sulu_page.post_page_version_trigger',
                    ],
                ],
                'webspaces' => [
                    'routes' => [
                        'list' => 'sulu_page.get_webspaces',
                        'detail' => 'sulu_page.get_webspace',
                    ],
                ],
                'icons' => [
                    'routes' => [
                        'list' => 'sulu_page.get_icons',
                    ],
                ],
                'search' => [
                    'routes' => [
                        'list' => 'sulu_search_search',
                    ],
                ],
                'search_indexes' => [
                    'routes' => [
                        'list' => 'sulu_search_indexes',
                    ],
                ],
                'collaborations' => [
                    'routes' => [
                        'detail' => 'sulu_admin.put_collaborations',
                    ],
                ],
                'localizations' => [
                    'routes' => [
                        'list' => 'sulu_core.get_localizations',
                    ],
                ],
                'teasers' => [
                    'routes' => [
                        'list' => 'sulu_page.get_teasers',
                    ],
                ],
            ],
            'sulu_admin.collaboration_enabled' => false,
            'sulu_admin.collaboration_interval' => 20,
            'sulu_admin.collaboration_threshold' => 60,
            'sulu_admin.forms.directories' => [
                0 => '/var/www/html/vendor/sulu/sulu/src/Sulu/Bundle/AudienceTargetingBundle/DependencyInjection/../Resources/config/forms',
                1 => '/var/www/html/vendor/sulu/sulu/src/Sulu/Bundle/CustomUrlBundle/DependencyInjection/../Resources/config/forms',
                2 => '/var/www/html/vendor/sulu/sulu/src/Sulu/Bundle/SnippetBundle/DependencyInjection/../Resources/config/forms',
                3 => '/var/www/html/vendor/sulu/sulu/src/Sulu/Bundle/CategoryBundle/DependencyInjection/../Resources/config/forms',
                4 => '/var/www/html/vendor/sulu/sulu/src/Sulu/Bundle/MediaBundle/DependencyInjection/../Resources/config/forms',
                5 => '/var/www/html/vendor/sulu/sulu/src/Sulu/Bundle/TagBundle/DependencyInjection/../Resources/config/forms',
                6 => '/var/www/html/vendor/sulu/sulu/src/Sulu/Bundle/WebsiteBundle/DependencyInjection/../Resources/config/forms',
                7 => '/var/www/html/vendor/sulu/sulu/src/Sulu/Bundle/SecurityBundle/DependencyInjection/../Resources/config/forms',
                8 => '/var/www/html/vendor/sulu/sulu/src/Sulu/Bundle/ContactBundle/DependencyInjection/../Resources/config/forms',
                9 => '/var/www/html/vendor/sulu/sulu/src/Sulu/Bundle/PageBundle/DependencyInjection/../Resources/config/forms',
                10 => '/var/www/html/vendor/sulu/sulu/src/Sulu/Bundle/AdminBundle/DependencyInjection/../Resources/config/forms',
            ],
            'sulu_admin.lists.directories' => [
                0 => '/var/www/html/vendor/sulu/sulu/src/Sulu/Bundle/ReferenceBundle/Infrastructure/Symfony/DependencyInjection/../../../Resources/config/lists',
                1 => '/var/www/html/vendor/sulu/sulu/src/Sulu/Bundle/TrashBundle/Infrastructure/Symfony/DependencyInjection/../../../Resources/config/lists',
                2 => '/var/www/html/vendor/sulu/sulu/src/Sulu/Bundle/AudienceTargetingBundle/DependencyInjection/../Resources/config/lists',
                3 => '/var/www/html/vendor/sulu/sulu/src/Sulu/Bundle/CustomUrlBundle/DependencyInjection/../Resources/config/lists',
                4 => '/var/www/html/vendor/sulu/sulu/src/Sulu/Bundle/ActivityBundle/Infrastructure/Symfony/DependencyInjection/../../../Resources/config/lists',
                5 => '/var/www/html/vendor/sulu/sulu/src/Sulu/Bundle/SnippetBundle/DependencyInjection/../Resources/config/lists',
                6 => '/var/www/html/vendor/sulu/sulu/src/Sulu/Bundle/CategoryBundle/DependencyInjection/../Resources/config/lists',
                7 => '/var/www/html/vendor/sulu/sulu/src/Sulu/Bundle/MediaBundle/DependencyInjection/../Resources/config/lists',
                8 => '/var/www/html/vendor/sulu/sulu/src/Sulu/Bundle/TagBundle/DependencyInjection/../Resources/config/lists',
                9 => '/var/www/html/vendor/sulu/sulu/src/Sulu/Bundle/WebsiteBundle/DependencyInjection/../Resources/config/lists',
                10 => '/var/www/html/vendor/sulu/sulu/src/Sulu/Bundle/SecurityBundle/DependencyInjection/../Resources/config/lists',
                11 => '/var/www/html/vendor/sulu/sulu/src/Sulu/Bundle/ContactBundle/DependencyInjection/../Resources/config/lists',
                12 => '/var/www/html/vendor/sulu/sulu/src/Sulu/Bundle/PageBundle/DependencyInjection/../Resources/config/lists',
            ],
            'sulu_admin.icon_sets' => [
                'sulu' => 'icomoon:///var/www/html/vendor/sulu/sulu/src/Sulu/Bundle/AdminBundle/DependencyInjection/../Resources/js/components/Icon/selection.json',
            ],
            'sulu_admin.admin_controller.class' => 'Sulu\\Bundle\\AdminBundle\\Controller\\AdminController',
            'sulu_admin.admin_pool.class' => 'Sulu\\Bundle\\AdminBundle\\Admin\\AdminPool',
            'sulu_search.indexes' => [
                'snippet' => [
                    'name' => 'sulu_snippet.snippets',
                    'icon' => 'su-snippet',
                    'view' => [
                        'name' => 'sulu_snippet.edit_form',
                        'result_to_view' => [
                            'id' => 'id',
                            'locale' => 'locale',
                        ],
                    ],
                    'security_context' => 'sulu.global.snippets',
                    'contexts' => [

                    ],
                ],
                'category' => [
                    'name' => 'sulu_category.categories',
                    'icon' => 'su-tag',
                    'view' => [
                        'name' => 'sulu_category.edit_form',
                        'result_to_view' => [
                            'id' => 'id',
                            'locale' => 'locale',
                        ],
                    ],
                    'security_context' => 'sulu.settings.categories',
                    'contexts' => [

                    ],
                ],
                'media' => [
                    'name' => 'sulu_media.media',
                    'icon' => 'su-image',
                    'view' => [
                        'name' => 'sulu_media.form',
                        'result_to_view' => [
                            'id' => 'id',
                            'locale' => 'locale',
                        ],
                    ],
                    'security_context' => 'sulu.media.collections',
                    'contexts' => [

                    ],
                ],
                'contact' => [
                    'name' => 'sulu_contact.people',
                    'icon' => 'su-user',
                    'view' => [
                        'name' => 'sulu_contact.contact_edit_form',
                        'result_to_view' => [
                            'id' => 'id',
                            'locale' => 'locale',
                        ],
                    ],
                    'security_context' => 'sulu.contact.people',
                    'contexts' => [

                    ],
                ],
                'account' => [
                    'name' => 'sulu_contact.organizations',
                    'icon' => 'su-house',
                    'view' => [
                        'name' => 'sulu_contact.account_edit_form',
                        'result_to_view' => [
                            'id' => 'id',
                            'locale' => 'locale',
                        ],
                    ],
                    'security_context' => 'sulu.contact.organizations',
                    'contexts' => [

                    ],
                ],
                'page_test' => [
                    'name' => 'Test',
                    'icon' => 'su-document',
                    'view' => [
                        'name' => 'sulu_page.page_edit_form',
                        'result_to_view' => [
                            'id' => 'id',
                            'locale' => 'locale',
                            'properties/webspace_key' => 'webspace',
                        ],
                    ],
                    'security_context' => 'sulu.webspaces.test',
                ],
                'page_test_published' => [
                    'name' => 'Test',
                    'icon' => 'su-document',
                    'view' => [
                        'name' => 'sulu_page.page_edit_form',
                        'result_to_view' => [
                            'id' => 'id',
                            'locale' => 'locale',
                            'properties/webspace_key' => 'webspace',
                        ],
                    ],
                    'security_context' => 'sulu.webspaces.test',
                    'contexts' => [
                        0 => 'website',
                    ],
                ],
            ],
            'sulu_search.website.indexes' => [
                0 => 'page_#webspace#_published',
            ],
            'sulu_search.controller.search.class' => 'Sulu\\Bundle\\SearchBundle\\Controller\\SearchController',
            'sulu_search.search.factory.class' => 'Sulu\\Bundle\\SearchBundle\\Search\\Factory',
            'sulu_search.build.index.class' => 'Sulu\\Bundle\\SearchBundle\\Build\\IndexBuilder',
            'sulu_search.build.init.class' => 'Sulu\\Bundle\\SearchBundle\\Build\\InitBuilder',
            'sulu.persistence.event_subscriber.orm.timestampable.class' => 'Sulu\\Component\\Persistence\\EventSubscriber\\ORM\\TimestampableSubscriber',
            'sulu.persistence.event_subscriber.orm.user_blame.class' => 'Sulu\\Component\\Persistence\\EventSubscriber\\ORM\\UserBlameSubscriber',
            'sulu.persistence.event_subscriber.orm.metadata.class' => 'Sulu\\Component\\Persistence\\EventSubscriber\\ORM\\MetadataSubscriber',
            'sulu_page.search.mapping' => [
                'Sulu\\Bundle\\SnippetBundle\\Document\\SnippetDocument' => [
                    'index' => 'snippet',
                    'decorate_index' => false,
                ],
                'Sulu\\Bundle\\PageBundle\\Document\\PageDocument' => [
                    'index' => 'page',
                    'decorate_index' => true,
                ],
                'Sulu\\Bundle\\PageBundle\\Document\\HomeDocument' => [
                    'index' => 'page',
                    'decorate_index' => true,
                ],
            ],
            'sulu_page.search.metadata.provider.structure.class' => 'Sulu\\Bundle\\PageBundle\\Search\\Metadata\\StructureProvider',
            'sulu_page.search.event_subscriber.blame_timestamp.class' => 'Sulu\\Bundle\\PageBundle\\Search\\EventSubscriber\\BlameTimestampSubscriber',
            'sulu_page.search.event_subscriber.structure.class' => 'Sulu\\Bundle\\PageBundle\\Search\\EventSubscriber\\StructureSubscriber',
            'sulu_search.event_listener.hit.class' => 'Sulu\\Bundle\\PageBundle\\Search\\EventListener\\HitListener',
            'sulu_page.admin.class' => 'Sulu\\Bundle\\PageBundle\\Admin\\PageAdmin',
            'sulu_page.node_repository.class' => 'Sulu\\Bundle\\PageBundle\\Repository\\NodeRepository',
            'sulu_page.rl_repository.class' => 'Sulu\\Bundle\\PageBundle\\Repository\\ResourceLocatorRepository',
            'sulu_page.extension.seo.class' => 'Sulu\\Bundle\\PageBundle\\Content\\Structure\\SeoStructureExtension',
            'sulu_page.extension.excerpt.class' => 'Sulu\\Bundle\\PageBundle\\Content\\Structure\\ExcerptStructureExtension',
            'sulu_page.smart_content.data_provider_pool.class' => 'Sulu\\Component\\SmartContent\\DataProviderPool',
            'sulu_page.smart_content.data_provider.content.query_builder.class' => 'Sulu\\Component\\Content\\SmartContent\\QueryBuilder',
            'sulu_page.smart_content.data_provider.page.class' => 'Sulu\\Component\\Content\\SmartContent\\PageDataProvider',
            'sulu_page.smart_content.data_provider.content.proxy_factory.class' => 'ProxyManager\\Factory\\LazyLoadingValueHolderFactory',
            'sulu_page.smart_content.content_type.class' => 'Sulu\\Component\\SmartContent\\ContentType',
            'sulu_page.extension.manager.class' => 'Sulu\\Component\\Content\\Extension\\ExtensionManager',
            'sulu_page.export.webspace.formats' => [
                '1.2.xliff' => '@SuluPage/Export/Webspace/1.2.xliff.twig',
            ],
            'sulu_page.default_author' => true,
            'sulu_page.seo' => [
                'max_title_length' => 70,
                'max_description_length' => 160,
                'max_keywords' => 5,
                'keywords_separator' => ',',
                'url_prefix' => 'www.yoursite.com/{locale}',
            ],
            'sulu_contact.contact_title.entity' => 'Sulu\\Bundle\\ContactBundle\\Entity\\ContactTitle',
            'sulu_contact.position.entity' => 'Sulu\\Bundle\\ContactBundle\\Entity\\Position',
            'sulu_contact.defaults' => [
                'phoneType' => '1',
                'phoneTypeMobile' => '3',
                'phoneTypeIsdn' => '1',
                'emailType' => '1',
                'addressType' => '1',
                'urlType' => '1',
                'faxType' => '1',
                'socialMediaProfileType' => '1',
                'country' => 'AT',
            ],
            'sulu_contact.form_of_address' => [
                'male' => [
                    'id' => 0,
                    'name' => 'male',
                    'translation' => 'contact.contacts.formOfAddress.male',
                ],
                'female' => [
                    'id' => 1,
                    'name' => 'female',
                    'translation' => 'contact.contacts.formOfAddress.female',
                ],
            ],
            'sulu_contact.contact_form.category_root' => NULL,
            'sulu_contact.account_form.category_root' => NULL,
            'sulu.model.contact.class' => 'Sulu\\Bundle\\ContactBundle\\Entity\\Contact',
            'sulu.repository.contact.class' => 'Sulu\\Bundle\\ContactBundle\\Entity\\ContactRepository',
            'sulu.model.account.class' => 'Sulu\\Bundle\\ContactBundle\\Entity\\Account',
            'sulu.repository.account.class' => 'Sulu\\Bundle\\ContactBundle\\Entity\\AccountRepository',
            'sulu.persistence.objects' => [
                'sulu' => [
                    'reference' => [
                        'model' => 'Sulu\\Bundle\\ReferenceBundle\\Domain\\Model\\Reference',
                    ],
                    'trash_item' => [
                        'model' => 'Sulu\\Bundle\\TrashBundle\\Domain\\Model\\TrashItem',
                    ],
                    'target_group' => [
                        'model' => 'Sulu\\Bundle\\AudienceTargetingBundle\\Entity\\TargetGroup',
                        'repository' => 'Sulu\\Bundle\\AudienceTargetingBundle\\Entity\\TargetGroupRepository',
                    ],
                    'target_group_condition' => [
                        'model' => 'Sulu\\Bundle\\AudienceTargetingBundle\\Entity\\TargetGroupCondition',
                        'repository' => 'Sulu\\Bundle\\AudienceTargetingBundle\\Entity\\TargetGroupConditionRepository',
                    ],
                    'target_group_rule' => [
                        'model' => 'Sulu\\Bundle\\AudienceTargetingBundle\\Entity\\TargetGroupRule',
                        'repository' => 'Sulu\\Bundle\\AudienceTargetingBundle\\Entity\\TargetGroupRuleRepository',
                    ],
                    'target_group_webspace' => [
                        'model' => 'Sulu\\Bundle\\AudienceTargetingBundle\\Entity\\TargetGroupWebspace',
                        'repository' => 'Sulu\\Bundle\\AudienceTargetingBundle\\Entity\\TargetGroupWebspaceRepository',
                    ],
                    'preview_link' => [
                        'model' => 'Sulu\\Bundle\\PreviewBundle\\Domain\\Model\\PreviewLink',
                    ],
                    'route' => [
                        'model' => 'Sulu\\Bundle\\RouteBundle\\Entity\\Route',
                        'repository' => 'Sulu\\Bundle\\RouteBundle\\Entity\\RouteRepository',
                    ],
                    'activity' => [
                        'model' => 'Sulu\\Bundle\\ActivityBundle\\Domain\\Model\\Activity',
                    ],
                    'category' => [
                        'model' => 'Sulu\\Bundle\\CategoryBundle\\Entity\\Category',
                        'repository' => 'Sulu\\Bundle\\CategoryBundle\\Entity\\CategoryRepository',
                    ],
                    'category_meta' => [
                        'model' => 'Sulu\\Bundle\\CategoryBundle\\Entity\\CategoryMeta',
                        'repository' => 'Sulu\\Bundle\\CategoryBundle\\Entity\\CategoryMetaRepository',
                    ],
                    'category_translation' => [
                        'model' => 'Sulu\\Bundle\\CategoryBundle\\Entity\\CategoryTranslation',
                        'repository' => 'Sulu\\Bundle\\CategoryBundle\\Entity\\CategoryTranslationRepository',
                    ],
                    'keyword' => [
                        'model' => 'Sulu\\Bundle\\CategoryBundle\\Entity\\Keyword',
                        'repository' => 'Sulu\\Bundle\\CategoryBundle\\Entity\\KeywordRepository',
                    ],
                    'media' => [
                        'model' => 'Sulu\\Bundle\\MediaBundle\\Entity\\Media',
                        'repository' => 'Sulu\\Bundle\\MediaBundle\\Entity\\MediaRepository',
                    ],
                    'tag' => [
                        'model' => 'Sulu\\Bundle\\TagBundle\\Entity\\Tag',
                        'repository' => 'Sulu\\Bundle\\TagBundle\\Entity\\TagRepository',
                    ],
                    'analytics' => [
                        'model' => 'Sulu\\Bundle\\WebsiteBundle\\Entity\\Analytics',
                        'repository' => 'Sulu\\Bundle\\WebsiteBundle\\Entity\\AnalyticsRepository',
                    ],
                    'user' => [
                        'model' => 'Sulu\\Bundle\\SecurityBundle\\Entity\\User',
                        'repository' => 'Sulu\\Bundle\\SecurityBundle\\Entity\\UserRepository',
                    ],
                    'role' => [
                        'model' => 'Sulu\\Bundle\\SecurityBundle\\Entity\\Role',
                        'repository' => 'Sulu\\Bundle\\SecurityBundle\\Entity\\RoleRepository',
                    ],
                    'role_setting' => [
                        'model' => 'Sulu\\Bundle\\SecurityBundle\\Entity\\RoleSetting',
                        'repository' => 'Sulu\\Bundle\\SecurityBundle\\Entity\\RoleSettingRepository',
                    ],
                    'access_control' => [
                        'model' => 'Sulu\\Bundle\\SecurityBundle\\Entity\\AccessControl',
                        'repository' => 'Sulu\\Bundle\\SecurityBundle\\Entity\\AccessControlRepository',
                    ],
                    'contact' => [
                        'model' => 'Sulu\\Bundle\\ContactBundle\\Entity\\Contact',
                        'repository' => 'Sulu\\Bundle\\ContactBundle\\Entity\\ContactRepository',
                    ],
                    'account' => [
                        'model' => 'Sulu\\Bundle\\ContactBundle\\Entity\\Account',
                        'repository' => 'Sulu\\Bundle\\ContactBundle\\Entity\\AccountRepository',
                    ],
                ],
            ],
            'sulu_security.system' => 'Sulu',
            'sulu_security.security_types.fixture' => '/var/www/html/vendor/sulu/sulu/src/Sulu/Bundle/SecurityBundle/DependencyInjection/../DataFixtures/security-types.xml',
            'sulu_security.password_policy_pattern' => NULL,
            'sulu_security.password_policy_info_translation_key' => NULL,
            'sulu_security.two_factor_email_template' => '@SuluSecurity/mail_templates/two_factor',
            'sulu_security.two_factor_force_pattern' => NULL,
            'sulu_security.reset_password.mail.token_send_limit' => 3,
            'sulu_security.reset_password.mail.sender' => '',
            'sulu_security.reset_password.mail.subject' => 'sulu_security.reset_mail_subject',
            'sulu_security.reset_password.mail.template' => '@SuluSecurity/mail_templates/reset_password.html.twig',
            'sulu_security.reset_password.mail.translation_domain' => 'admin',
            'sulu_security.permissions' => [
                'view' => 64,
                'add' => 32,
                'edit' => 16,
                'delete' => 8,
                'archive' => 4,
                'live' => 2,
                'security' => 1,
            ],
            'permissions' => [
                'view' => 64,
                'add' => 32,
                'edit' => 16,
                'delete' => 8,
                'archive' => 4,
                'live' => 2,
                'security' => 1,
            ],
            'sulu_security.admin.class' => 'Sulu\\Bundle\\SecurityBundle\\Admin\\SecurityAdmin',
            'sulu_security.authentication_entry_point.class' => 'Sulu\\Bundle\\SecurityBundle\\Security\\AuthenticationEntryPoint',
            'sulu_security.authentication_handler.class' => 'Sulu\\Bundle\\SecurityBundle\\Security\\AuthenticationHandler',
            'sulu_security.mask_converter.class' => 'Sulu\\Component\\Security\\Authorization\\MaskConverter',
            'sulu_security.salt_generator.class' => 'Sulu\\Component\\Security\\Authentication\\SaltGenerator',
            'sulu_security.token_generator.class' => 'Sulu\\Bundle\\SecurityBundle\\Util\\TokenGenerator',
            'sulu_security.security_context_voter.class' => 'Sulu\\Component\\Security\\Authorization\\SecurityContextVoter',
            'sulu_security.access_control_manager.class' => 'Sulu\\Component\\Security\\Authorization\\AccessControl\\AccessControlManager',
            'sulu_security.phpcr_access_control_provider.class' => 'Sulu\\Component\\Security\\Authorization\\AccessControl\\PhpcrAccessControlProvider',
            'sulu_security.doctrine_access_control_provider.class' => 'Sulu\\Component\\Security\\Authorization\\AccessControl\\DoctrineAccessControlProvider',
            'sulu_security.permission_controller.class' => 'Sulu\\Bundle\\SecurityBundle\\Controller\\PermissionController',
            'sulu_security.group_repository.class' => 'Sulu\\Bundle\\SecurityBundle\\Entity\\GroupRepository',
            'sulu_security.user_repository.class' => 'Sulu\\Bundle\\SecurityBundle\\Entity\\UserRepository',
            'sulu_security.user_setting_repository.class' => 'Sulu\\Bundle\\SecurityBundle\\Entity\\UserSettingRepository',
            'sulu_security.user_repository_factory.class' => 'Sulu\\Component\\Security\\Authentication\\UserRepositoryFactory',
            'sulu_security.build.user.class' => 'Sulu\\Bundle\\SecurityBundle\\Build\\UserBuilder',
            'sulu_security.entity.role' => 'Sulu\\Bundle\\SecurityBundle\\Entity\\Role',
            'sulu_security.entity.group' => 'Sulu\\Bundle\\SecurityBundle\\Entity\\Group',
            'sulu_security.entity.user_setting' => 'Sulu\\Bundle\\SecurityBundle\\Entity\\UserSetting',
            'sulu_security.profile_controller.class' => 'Sulu\\Bundle\\SecurityBundle\\Controller\\ProfileController',
            'sulu.model.user.class' => 'Sulu\\Bundle\\SecurityBundle\\Entity\\User',
            'sulu.repository.user.class' => 'Sulu\\Bundle\\SecurityBundle\\Entity\\UserRepository',
            'sulu.model.role.class' => 'Sulu\\Bundle\\SecurityBundle\\Entity\\Role',
            'sulu.repository.role.class' => 'Sulu\\Bundle\\SecurityBundle\\Entity\\RoleRepository',
            'sulu.model.role_setting.class' => 'Sulu\\Bundle\\SecurityBundle\\Entity\\RoleSetting',
            'sulu.repository.role_setting.class' => 'Sulu\\Bundle\\SecurityBundle\\Entity\\RoleSettingRepository',
            'sulu.model.access_control.class' => 'Sulu\\Bundle\\SecurityBundle\\Entity\\AccessControl',
            'sulu.repository.access_control.class' => 'Sulu\\Bundle\\SecurityBundle\\Entity\\AccessControlRepository',
            'sulu_security.has_single_sign_on_providers' => false,
            'sulu_website.navigation.cache.lifetime' => 1,
            'sulu_website.content.cache.lifetime' => 1,
            'sulu_website.sitemap.cache.lifetime' => 3600,
            'sulu_website.enabled_twig_attributes' => [
                'urls' => false,
                'path' => false,
            ],
            'sulu_website.segment_switch_url' => '/_sulu_segment_switch',
            'sulu_website.segment_cookie_name' => '_ss',
            'sulu_website.segment_header' => 'X-Sulu-Segment',
            'sulu_website.admin.class' => 'Sulu\\Bundle\\WebsiteBundle\\Admin\\WebsiteAdmin',
            'sulu_website.navigation_mapper.class' => 'Sulu\\Bundle\\WebsiteBundle\\Navigation\\NavigationMapper',
            'sulu_website.sitemap.class' => 'Sulu\\Bundle\\WebsiteBundle\\Sitemap\\SitemapGenerator',
            'sulu_website.twig.content_path.class' => 'Sulu\\Bundle\\WebsiteBundle\\Twig\\Content\\ContentPathTwigExtension',
            'sulu_website.twig.navigation.class' => 'Sulu\\Bundle\\WebsiteBundle\\Twig\\Navigation\\NavigationTwigExtension',
            'sulu_website.twig.navigation.memoized.class' => 'Sulu\\Bundle\\WebsiteBundle\\Twig\\Navigation\\MemoizedNavigationTwigExtension',
            'sulu_website.twig.sitemap.class' => 'Sulu\\Bundle\\WebsiteBundle\\Twig\\Sitemap\\SitemapTwigExtension',
            'sulu_website.twig.sitemap.memoized.class' => 'Sulu\\Bundle\\WebsiteBundle\\Twig\\Sitemap\\MemoizedSitemapTwigExtension',
            'sulu_website.twig.content.class' => 'Sulu\\Bundle\\WebsiteBundle\\Twig\\Content\\ContentTwigExtension',
            'sulu_website.twig.content.memoized.class' => 'Sulu\\Bundle\\WebsiteBundle\\Twig\\Content\\MemoizedContentTwigExtension',
            'sulu_website.twig.meta.class' => 'Sulu\\Bundle\\WebsiteBundle\\Twig\\Meta\\MetaTwigExtension',
            'sulu_website.twig.seo.class' => 'Sulu\\Bundle\\WebsiteBundle\\Twig\\Seo\\SeoTwigExtension',
            'sulu_website.twig.util.class' => 'Sulu\\Bundle\\WebsiteBundle\\Twig\\Core\\UtilTwigExtension',
            'sulu_website.routing.portal_loader.class' => 'Sulu\\Bundle\\WebsiteBundle\\Routing\\PortalLoader',
            'sulu_website.resolver.request_analyzer.class' => 'Sulu\\Bundle\\WebsiteBundle\\Resolver\\RequestAnalyzerResolver',
            'sulu_website.resolver.structure.class' => 'Sulu\\Bundle\\WebsiteBundle\\Resolver\\StructureResolver',
            'sulu_website.resolver.parameter.class' => 'Sulu\\Bundle\\WebsiteBundle\\Resolver\\ParameterResolver',
            'sulu_website.navigation_mapper.query_builder.class' => 'Sulu\\Bundle\\WebsiteBundle\\Navigation\\NavigationQueryBuilder',
            'sulu_website.sitemap.query_builder.class' => 'Sulu\\Bundle\\WebsiteBundle\\Sitemap\\SitemapContentQueryBuilder',
            'sulu.model.analytics.class' => 'Sulu\\Bundle\\WebsiteBundle\\Entity\\Analytics',
            'sulu.repository.analytics.class' => 'Sulu\\Bundle\\WebsiteBundle\\Entity\\AnalyticsRepository',
            'sulu.test_user_provider.class' => 'Sulu\\Bundle\\TestBundle\\Testing\\TestUserProvider',
            'sulu.test_voter.class' => 'Sulu\\Bundle\\TestBundle\\Testing\\TestVoter',
            'sulu_test.test_user_repository.class' => 'Sulu\\Bundle\\TestBundle\\Entity\\TestUserRepository',
            'sulu.model.tag.class' => 'Sulu\\Bundle\\TagBundle\\Entity\\Tag',
            'sulu.repository.tag.class' => 'Sulu\\Bundle\\TagBundle\\Entity\\TagRepository',
            'sulu.model.collection.class' => 'Sulu\\Bundle\\MediaBundle\\Entity\\Collection',
            'sulu_media.image_format_files' => [
                0 => '/var/www/html/vendor/sulu/sulu/src/Sulu/Bundle/MediaBundle/DependencyInjection/../Resources/config/image-formats.xml',
                1 => (\dirname(__DIR__, 5).'/config/image-formats.xml'),
            ],
            'sulu_media.system_collections' => [
                'sulu_media' => [
                    'meta_title' => [
                        'en' => 'Sulu media',
                        'de' => 'Sulu Medien',
                    ],
                    'collections' => [
                        'preview_image' => [
                            'meta_title' => [
                                'en' => 'Preview images',
                                'de' => 'Vorschaubilder',
                            ],
                        ],
                    ],
                ],
                'sulu_contact' => [
                    'meta_title' => [
                        'en' => 'Sulu contacts',
                        'de' => 'Sulu Kontakte',
                    ],
                    'collections' => [
                        'contact' => [
                            'meta_title' => [
                                'en' => 'People',
                                'de' => 'Personen',
                            ],
                        ],
                        'account' => [
                            'meta_title' => [
                                'en' => 'Organizations',
                                'de' => 'Organisationen',
                            ],
                        ],
                    ],
                ],
            ],
            'sulu_media.format_cache.media_proxy_path' => '/uploads/media/{slug}',
            'sulu_media.media_manager.media_download_path' => '/media/{id}/download/{slug}',
            'sulu_media.media_manager.media_download_path_admin' => '/admin/media/{id}/download/{slug}',
            'sulu_media.format_manager.response_headers' => [
                'Expires' => '+1 month',
                'Pragma' => 'public',
                'Cache-Control' => 'public, immutable, max-age=31536000',
            ],
            'sulu_media.format_manager.default_imagine_options' => [
                'jpeg_quality' => 100,
                'webp_quality' => 100,
                'avif_quality' => 100,
            ],
            'sulu_media.format_cache.path' => (\dirname(__DIR__, 5).'/public/uploads/media'),
            'sulu_media.format_cache.save_image' => true,
            'sulu_media.format_cache.segments' => 10,
            'sulu_media.ghost_script.path' => 'gs',
            'sulu_media.media.blocked_file_types' => [

            ],
            'sulu_media.collection.type.default' => [
                'id' => 1,
            ],
            'sulu_media.collection.previews.format' => 'sulu-50x50',
            'sulu_media.media.types' => [
                0 => [
                    'type' => 'document',
                    'mimeTypes' => [
                        0 => '*',
                    ],
                ],
                1 => [
                    'type' => 'image',
                    'mimeTypes' => [
                        0 => 'image/*',
                    ],
                ],
                2 => [
                    'type' => 'video',
                    'mimeTypes' => [
                        0 => 'video/*',
                    ],
                ],
                3 => [
                    'type' => 'audio',
                    'mimeTypes' => [
                        0 => 'audio/*',
                    ],
                ],
            ],
            'sulu_media.search.default_image_format' => 'sulu-100x100',
            'sulu_media.disposition_type.default' => 'attachment',
            'sulu_media.disposition_type.mime_types_inline' => [

            ],
            'sulu_media.disposition_type.mime_types_attachment' => [

            ],
            'sulu_media.upload.max_filesize' => 256,
            'sulu_media.media.max_file_size' => '256MB',
            'sulu_media.adobe_creative_key' => NULL,
            'sulu_media.admin.class' => 'Sulu\\Bundle\\MediaBundle\\Admin\\MediaAdmin',
            'sulu_media.media_manager.class' => 'Sulu\\Bundle\\MediaBundle\\Media\\Manager\\MediaManager',
            'sulu_media.collection_repository.class' => 'Sulu\\Bundle\\MediaBundle\\Entity\\CollectionRepository',
            'sulu_media.file_validator.class' => 'Sulu\\Bundle\\MediaBundle\\Media\\FileValidator\\FileValidator',
            'sulu_media.format_manager.class' => 'Sulu\\Bundle\\MediaBundle\\Media\\FormatManager\\FormatManager',
            'sulu_media.format_cache_clearer.class' => 'Sulu\\Bundle\\MediaBundle\\Media\\FormatCache\\FormatCacheClearer',
            'sulu_media.format_cache.class' => 'Sulu\\Bundle\\MediaBundle\\Media\\FormatCache\\LocalFormatCache',
            'sulu_media.image.converter.class' => 'Sulu\\Bundle\\MediaBundle\\Media\\ImageConverter\\ImagineImageConverter',
            'sulu_media.image.scaler.class' => 'Sulu\\Bundle\\MediaBundle\\Media\\ImageConverter\\Scaler\\Scaler',
            'sulu_media.image.cropper.class' => 'Sulu\\Bundle\\MediaBundle\\Media\\ImageConverter\\Cropper\\Cropper',
            'sulu_media.image.transformation_pool.class' => 'Sulu\\Bundle\\MediaBundle\\Media\\ImageConverter\\TransformationPool',
            'sulu_media.image.transformation.crop.class' => 'Sulu\\Bundle\\MediaBundle\\Media\\ImageConverter\\Transformation\\CropTransformation',
            'sulu_media.media_selection.class' => 'Sulu\\Bundle\\MediaBundle\\Content\\Types\\MediaSelectionContentType',
            'sulu_media.collection_manager.class' => 'Sulu\\Bundle\\MediaBundle\\Collection\\Manager\\CollectionManager',
            'sulu_media.type_manager.class' => 'Sulu\\Bundle\\MediaBundle\\Media\\TypeManager\\TypeManager',
            'sulu_media.format_options_manager.class' => 'Sulu\\Bundle\\MediaBundle\\Media\\FormatOptions\\FormatOptionsManager',
            'sulu_media.collection_entity' => 'Sulu\\Bundle\\MediaBundle\\Entity\\Collection',
            'sulu_media.format_options_entity' => 'Sulu\\Bundle\\MediaBundle\\Entity\\FormatOptions',
            'sulu_media.entity.file_version_meta' => 'Sulu\\Bundle\\MediaBundle\\Entity\\FileVersionMeta',
            'sulu_media.twig_extension.disposition_type.class' => 'Sulu\\Bundle\\MediaBundle\\Twig\\DispositionTypeTwigExtension',
            'sulu_media.twig_extension.media.class' => 'Sulu\\Bundle\\MediaBundle\\Twig\\MediaTwigExtension',
            'tmp' => 'Sulu\\Bundle\\MediaBundle\\Twig\\MediaTwigExtension',
            'sulu_media.video_thumbnail_generator.class' => 'Sulu\\Bundle\\MediaBundle\\Media\\Video\\VideoThumbnailService',
            'sulu_media.search.subscriber.structure_media.class' => 'Sulu\\Bundle\\MediaBundle\\Search\\Subscriber\\StructureMediaSearchSubscriber',
            'sulu_media.search.subscriber.media.class' => 'Sulu\\Bundle\\MediaBundle\\Search\\Subscriber\\MediaSearchSubscriber',
            'sulu_media.format_manager.mime_types' => [
                0 => 'image/*',
                1 => 'application/pdf',
            ],
            'sulu.model.media.class' => 'Sulu\\Bundle\\MediaBundle\\Entity\\Media',
            'sulu.repository.media.class' => 'Sulu\\Bundle\\MediaBundle\\Entity\\MediaRepository',
            'sulu_media.media.storage' => 'local',
            'sulu_media.media.storage.local.path' => (\dirname(__DIR__, 4).'/uploads/media'),
            'sulu_media.media.storage.local.segments' => 10,
            'sulu.model.category.class' => 'Sulu\\Bundle\\CategoryBundle\\Entity\\Category',
            'sulu.repository.category.class' => 'Sulu\\Bundle\\CategoryBundle\\Entity\\CategoryRepository',
            'sulu.model.category_meta.class' => 'Sulu\\Bundle\\CategoryBundle\\Entity\\CategoryMeta',
            'sulu.repository.category_meta.class' => 'Sulu\\Bundle\\CategoryBundle\\Entity\\CategoryMetaRepository',
            'sulu.model.category_translation.class' => 'Sulu\\Bundle\\CategoryBundle\\Entity\\CategoryTranslation',
            'sulu.repository.category_translation.class' => 'Sulu\\Bundle\\CategoryBundle\\Entity\\CategoryTranslationRepository',
            'sulu.model.keyword.class' => 'Sulu\\Bundle\\CategoryBundle\\Entity\\Keyword',
            'sulu.repository.keyword.class' => 'Sulu\\Bundle\\CategoryBundle\\Entity\\KeywordRepository',
            'sulu_http_cache.cache.max_age' => 240,
            'sulu_http_cache.cache.shared_max_age' => 240,
            'sulu_http_cache.tags.enabled' => true,
            'sulu_snippet.content-type.default_enabled' => true,
            'sulu_snippet.twig.snippet.cache_lifetime' => 1,
            'sulu_snippet.repository.class' => 'Sulu\\Bundle\\SnippetBundle\\Snippet\\SnippetRepository',
            'sulu_snippet.controller.snippet.class' => 'Sulu\\Bundle\\SnippetBundle\\Controller\\SnippetController',
            'sulu_snippet.twig.snippet.class' => 'Sulu\\Bundle\\SnippetBundle\\Twig\\SnippetTwigExtension',
            'sulu_snippet.twig.snippet.memoized.class' => 'Sulu\\Bundle\\SnippetBundle\\Twig\\MemoizedSnippetTwigExtension',
            'sulu_snippet.form.snippet.class' => 'Sulu\\Bundle\\SnippetBundle\\Form\\SnippetType',
            'sulu_snippet.document.snippet_initializer.class' => 'Sulu\\Bundle\\SnippetBundle\\Document\\SnippetInitializer',
            'sulu_snippet.export.snippet.formats' => [
                '1.2.xliff' => '@SuluPage/Export/Snippet/1.2.xliff.twig',
            ],
            'sulu_location.content.type.location.class' => 'Sulu\\Bundle\\LocationBundle\\Content\\Types\\LocationContentType',
            'sulu_location.geolocator.nominatim.class' => 'Sulu\\Bundle\\LocationBundle\\Geolocator\\Service\\NominatimGeolocator',
            'sulu_location.geolocator.google.class' => 'Sulu\\Bundle\\LocationBundle\\Geolocator\\Service\\GoogleGeolocator',
            'sulu_location.geolocator.mapquest.class' => 'Sulu\\Bundle\\LocationBundle\\Geolocator\\Service\\MapquestGeolocator',
            'sulu_location.geolocator.name' => 'nominatim',
            'sulu_location.geolocator.service.nominatim.api_key' => '',
            'sulu_location.geolocator.service.nominatim.endpoint' => 'https://nominatim.openstreetmap.org/search',
            'sulu_location.geolocator.service.google.api_key' => '',
            'sulu_location.geolocator.service.mapquest.api_key' => '',
            'sulu_location.geolocator.service.mapquest.endpoint' => 'https://www.mapquestapi.com/geocoding/v1/address',
            'sulu_document_manager.mapping' => [
                0 => [
                    'alias' => 'custom_url',
                    'class' => 'Sulu\\Component\\CustomUrl\\Document\\CustomUrlDocument',
                    'phpcr_type' => 'sulu:custom_url',
                    'mapping' => [
                        'published' => [
                            'property' => 'published',
                            'encoding' => 'content',
                            'mapped' => true,
                            'multiple' => false,
                            'default' => NULL,
                        ],
                        'baseDomain' => [
                            'property' => 'baseDomain',
                            'encoding' => 'content',
                            'mapped' => true,
                            'multiple' => false,
                            'default' => NULL,
                        ],
                        'domainParts' => [
                            'property' => 'domainParts',
                            'type' => 'json_array',
                            'encoding' => 'content',
                            'mapped' => true,
                            'multiple' => false,
                            'default' => NULL,
                        ],
                        'canonical' => [
                            'property' => 'canonical',
                            'encoding' => 'content',
                            'mapped' => true,
                            'multiple' => false,
                            'default' => NULL,
                        ],
                        'redirect' => [
                            'property' => 'redirect',
                            'encoding' => 'content',
                            'mapped' => true,
                            'multiple' => false,
                            'default' => NULL,
                        ],
                        'targetLocale' => [
                            'property' => 'targetLocale',
                            'encoding' => 'content',
                            'mapped' => true,
                            'multiple' => false,
                            'default' => NULL,
                        ],
                    ],
                ],
                1 => [
                    'alias' => 'custom_url_route',
                    'class' => 'Sulu\\Component\\CustomUrl\\Document\\RouteDocument',
                    'phpcr_type' => 'sulu:custom_url_route',
                    'mapping' => [
                        'locale' => [
                            'property' => 'locale',
                            'encoding' => 'content',
                            'mapped' => true,
                            'multiple' => false,
                            'default' => NULL,
                        ],
                    ],
                ],
                2 => [
                    'alias' => 'snippet',
                    'class' => 'Sulu\\Bundle\\SnippetBundle\\Document\\SnippetDocument',
                    'phpcr_type' => 'sulu:snippet',
                    'form_type' => 'Sulu\\Bundle\\SnippetBundle\\Form\\SnippetType',
                    'mapping' => [

                    ],
                ],
                3 => [
                    'alias' => 'page',
                    'class' => 'Sulu\\Bundle\\PageBundle\\Document\\PageDocument',
                    'phpcr_type' => 'sulu:page',
                    'form_type' => 'Sulu\\Bundle\\PageBundle\\Form\\Type\\PageDocumentType',
                    'set_default_author' => true,
                    'mapping' => [

                    ],
                ],
                4 => [
                    'alias' => 'home',
                    'class' => 'Sulu\\Bundle\\PageBundle\\Document\\HomeDocument',
                    'phpcr_type' => 'sulu:home',
                    'form_type' => 'Sulu\\Bundle\\PageBundle\\Form\\Type\\HomeDocumentType',
                    'set_default_author' => true,
                    'mapping' => [

                    ],
                ],
                5 => [
                    'alias' => 'route',
                    'class' => 'Sulu\\Bundle\\PageBundle\\Document\\RouteDocument',
                    'phpcr_type' => 'sulu:path',
                    'mapping' => [

                    ],
                ],
            ],
            'sulu_document_manager.namespace_mapping' => [
                'extension_localized' => 'i18n',
                'system' => 'sulu',
                'system_localized' => 'i18n',
                'content' => NULL,
                'content_localized' => 'i18n',
            ],
            'sulu_document_manager.versioning.enabled' => false,
            'sulu_document_manager.show_drafts' => true,
            'sulu_document_manager.slugifier' => 'Sulu\\Bundle\\DocumentManagerBundle\\Slugifier\\Urlizer::urlize',
            'sulu_document_manager.segments' => [
                'custom_urls' => 'custom-urls',
                'custom_urls_items' => 'items',
                'custom_urls_routes' => 'routes',
                'base' => 'cmf',
                'content' => 'contents',
                'route' => 'routes',
                'snippet' => 'snippets',
            ],
            'sulu.model.activity.class' => 'Sulu\\Bundle\\ActivityBundle\\Domain\\Model\\Activity',
            'sulu_activity.storage.adapter' => 'doctrine',
            'sulu_activity.storage.persist_payload' => false,
            'sulu_custom_urls.uri_filter_regexp' => '',
            'sulu_route.mappings' => [

            ],
            'sulu_route.resource_key_mappings' => [

            ],
            'sulu_route.routing.uri_filter_regexp' => '',
            'sulu.model.route.class' => 'Sulu\\Bundle\\RouteBundle\\Entity\\Route',
            'sulu.repository.route.class' => 'Sulu\\Bundle\\RouteBundle\\Entity\\RouteRepository',
            'sulu_markup.link_tag.provider_attribute' => NULL,
            'sulu_preview.mode' => 'auto',
            'sulu_preview.delay' => 500,
            'sulu_preview.events.pre-render' => 'sulu.preview.pre-render',
            'sulu.model.preview_link.class' => 'Sulu\\Bundle\\PreviewBundle\\Domain\\Model\\PreviewLink',
            'sulu_audience_targeting.enabled' => true,
            'sulu_audience_targeting.number_of_priorities' => 5,
            'sulu_audience_targeting.headers.target_group' => 'X-Sulu-Target-Group',
            'sulu_audience_targeting.headers.url' => 'X-Forwarded-URL',
            'sulu_audience_targeting.url' => '/_sulu_target_group',
            'sulu_audience_targeting.hit.url' => '/_sulu_target_group_hit',
            'sulu_audience_targeting.hit.headers.referrer' => 'X-Forwarded-Referrer',
            'sulu_audience_targeting.hit.headers.uuid' => 'X-Forwarded-UUID',
            'sulu_audience_targeting.cookies.target_group' => '_svtg',
            'sulu_audience_targeting.cookies.session' => '_svs',
            'sulu.model.target_group.class' => 'Sulu\\Bundle\\AudienceTargetingBundle\\Entity\\TargetGroup',
            'sulu.repository.target_group.class' => 'Sulu\\Bundle\\AudienceTargetingBundle\\Entity\\TargetGroupRepository',
            'sulu.model.target_group_condition.class' => 'Sulu\\Bundle\\AudienceTargetingBundle\\Entity\\TargetGroupCondition',
            'sulu.repository.target_group_condition.class' => 'Sulu\\Bundle\\AudienceTargetingBundle\\Entity\\TargetGroupConditionRepository',
            'sulu.model.target_group_rule.class' => 'Sulu\\Bundle\\AudienceTargetingBundle\\Entity\\TargetGroupRule',
            'sulu.repository.target_group_rule.class' => 'Sulu\\Bundle\\AudienceTargetingBundle\\Entity\\TargetGroupRuleRepository',
            'sulu.model.target_group_webspace.class' => 'Sulu\\Bundle\\AudienceTargetingBundle\\Entity\\TargetGroupWebspace',
            'sulu.repository.target_group_webspace.class' => 'Sulu\\Bundle\\AudienceTargetingBundle\\Entity\\TargetGroupWebspaceRepository',
            'sulu.model.trash_item.class' => 'Sulu\\Bundle\\TrashBundle\\Domain\\Model\\TrashItem',
            'sulu.model.reference.class' => 'Sulu\\Bundle\\ReferenceBundle\\Domain\\Model\\Reference',
            'phpcr_migrations.version_node_name' => 'jcr:versions',
            'phpcr_migrations.paths' => [
                0 => '/var/www/html/vendor/sulu/sulu/src/Sulu/Bundle/PageBundle/Resources/phpcr-migrations',
                1 => '/var/www/html/vendor/sulu/sulu/src/Sulu/Bundle/CustomUrlBundle/Resources/phpcr-migrations',
            ],
            'massive_build.command.build.class' => 'Sulu\\Bundle\\CoreBundle\\CommandOptional\\SuluBuildCommand',
            'massive_build.build.registry.class' => 'Massive\\Bundle\\BuildBundle\\Build\\BuildRegistry',
            'fos_http_cache.debug_header' => 'X-Cache-Debug',
            'fos_http_cache.ttl_header' => 'X-Reverse-Proxy-TTL',
            'fos_http_cache.cacheable.response.additional_status' => [

            ],
            'security.role_hierarchy.roles' => [

            ],
            'security.access.denied_url' => NULL,
            'security.authentication.manager.erase_credentials' => true,
            'security.authentication.session_strategy.strategy' => 'migrate',
            'security.authentication.hide_user_not_found' => true,
            'security.firewalls' => [
                0 => 'test',
            ],
            'security.logout_uris' => [

            ],
            'sulu_snippet_tabs.configuration' => [
                'services' => [
                    'snippet_type' => 'services',
                    'tabs' => [
                        'tools' => [
                            'title' => 'tools',
                            'form_key' => 'services_tools',
                            'order' => 20,
                        ],
                        'regions' => [
                            'title' => 'regions',
                            'form_key' => 'services_regions',
                            'order' => 30,
                        ],
                    ],
                ],
                'events' => [
                    'snippet_type' => 'events',
                    'tabs' => [
                        'locations' => [
                            'title' => 'locations',
                            'form_key' => 'events_locations',
                            'order' => 10,
                        ],
                        'catering' => [
                            'title' => 'catering',
                            'form_key' => 'events_catering',
                            'order' => 20,
                        ],
                    ],
                ],
            ],
            'doctrine_phpcr.migrate.migrators' => [

            ],
            'sulu_security.two_factor_methods' => [

            ],
            'sulu.version' => '_._._',
            'app.version' => NULL,
            'sulu_media.image.formats' => [
                'sulu-400x400' => [
                    'key' => 'sulu-400x400',
                    'internal' => true,
                    'meta' => [
                        'title' => [
                            'en' => 'Contact avatar (Sulu)',
                            'de' => 'Kontaktavatar (Sulu)',
                            'fr' => 'Avatar du contact (Sulu)',
                            'nl' => 'Contact avatar (Sulu)',
                        ],
                    ],
                    'scale' => [
                        'x' => 400,
                        'y' => 400,
                        'mode' => 2,
                        'retina' => false,
                        'forceRatio' => true,
                    ],
                    'transformations' => [

                    ],
                    'options' => [
                        'jpeg_quality' => 100,
                        'webp_quality' => 100,
                        'avif_quality' => 100,
                    ],
                ],
                'sulu-260x' => [
                    'key' => 'sulu-260x',
                    'internal' => true,
                    'meta' => [
                        'title' => [
                            'en' => 'Masonry preview (Sulu)',
                            'de' => 'Masonry Vorschau (Sulu)',
                            'fr' => 'Prévisualisation maçonnerie (Sulu)',
                            'nl' => 'Masonry voorbeeld (Sulu)',
                        ],
                    ],
                    'scale' => [
                        'x' => 260,
                        'y' => NULL,
                        'mode' => 2,
                        'retina' => false,
                        'forceRatio' => true,
                    ],
                    'transformations' => [

                    ],
                    'options' => [
                        'jpeg_quality' => 100,
                        'webp_quality' => 100,
                        'avif_quality' => 100,
                    ],
                ],
                'sulu-170x170' => [
                    'key' => 'sulu-170x170',
                    'internal' => true,
                    'meta' => [
                        'title' => [
                            'en' => 'Search (Sulu)',
                            'de' => 'Suche (Sulu)',
                            'fr' => 'Recherche (Sulu)',
                            'nl' => 'Zoeken (Sulu)',
                        ],
                    ],
                    'scale' => [
                        'x' => 170,
                        'y' => 170,
                        'mode' => 2,
                        'retina' => false,
                        'forceRatio' => true,
                    ],
                    'transformations' => [

                    ],
                    'options' => [
                        'jpeg_quality' => 100,
                        'webp_quality' => 100,
                        'avif_quality' => 100,
                    ],
                ],
                'sulu-100x100-inset' => [
                    'key' => 'sulu-100x100-inset',
                    'internal' => true,
                    'meta' => [
                        'title' => [
                            'en' => 'Organization card (Sulu)',
                            'de' => 'Organisationskarte (Sulu)',
                            'fr' => 'Carte d\'organisation (Sulu)',
                            'nl' => 'Organisatie kaart (Sulu)',
                        ],
                    ],
                    'scale' => [
                        'x' => 100,
                        'y' => 100,
                        'mode' => 1,
                        'retina' => false,
                        'forceRatio' => true,
                    ],
                    'transformations' => [

                    ],
                    'options' => [
                        'jpeg_quality' => 100,
                        'webp_quality' => 100,
                        'avif_quality' => 100,
                    ],
                ],
                'sulu-50x50' => [
                    'key' => 'sulu-50x50',
                    'internal' => true,
                    'meta' => [
                        'title' => [
                            'en' => 'Small thumbnail (Sulu)',
                            'de' => 'Kleines Thumbnail (Sulu)',
                            'fr' => 'Image miniature (Sulu)',
                            'nl' => 'Kleine thumbnail (Sulu)',
                        ],
                    ],
                    'scale' => [
                        'x' => 50,
                        'y' => 50,
                        'mode' => 2,
                        'retina' => false,
                        'forceRatio' => true,
                    ],
                    'transformations' => [

                    ],
                    'options' => [
                        'jpeg_quality' => 100,
                        'webp_quality' => 100,
                        'avif_quality' => 100,
                    ],
                ],
                'sulu-25x25' => [
                    'key' => 'sulu-25x25',
                    'internal' => true,
                    'meta' => [
                        'title' => [
                            'en' => 'Micro thumbnail',
                            'de' => 'Mikro Thumbnail',
                            'fr' => 'Image micro',
                            'nl' => 'Micro thumbnail',
                        ],
                    ],
                    'scale' => [
                        'x' => 25,
                        'y' => 25,
                        'mode' => 2,
                        'retina' => false,
                        'forceRatio' => true,
                    ],
                    'transformations' => [

                    ],
                    'options' => [
                        'jpeg_quality' => 100,
                        'webp_quality' => 100,
                        'avif_quality' => 100,
                    ],
                ],
                'sulu-40x40' => [
                    'key' => 'sulu-40x40',
                    'internal' => true,
                    'meta' => [
                        'title' => [
                            'en' => 'Small thumbnail (Sulu)',
                            'de' => 'Kleines Thumbnail (Sulu)',
                            'fr' => 'Image miniature (Sulu)',
                            'nl' => 'Kleine thumbnail (Sulu)',
                        ],
                    ],
                    'scale' => [
                        'x' => 40,
                        'y' => 40,
                        'mode' => 2,
                        'retina' => false,
                        'forceRatio' => true,
                    ],
                    'transformations' => [

                    ],
                    'options' => [
                        'jpeg_quality' => 100,
                        'webp_quality' => 100,
                        'avif_quality' => 100,
                    ],
                ],
                'sulu-240x' => [
                    'key' => 'sulu-240x',
                    'internal' => true,
                    'meta' => [
                        'title' => [
                            'en' => 'Masonry preview (Sulu)',
                            'de' => 'Masonry Vorschau (Sulu)',
                            'fr' => 'Prévisualisation maçonnerie (Sulu)',
                            'nl' => 'Masonry voorbeeld (Sulu)',
                        ],
                    ],
                    'scale' => [
                        'x' => 240,
                        'y' => NULL,
                        'mode' => 2,
                        'retina' => false,
                        'forceRatio' => true,
                    ],
                    'transformations' => [

                    ],
                    'options' => [
                        'jpeg_quality' => 100,
                        'webp_quality' => 100,
                        'avif_quality' => 100,
                    ],
                ],
                'sulu-400x400-inset' => [
                    'key' => 'sulu-400x400-inset',
                    'internal' => true,
                    'meta' => [
                        'title' => [
                            'en' => 'Organization logo (Sulu)',
                            'de' => 'Organisationslogo (Sulu)',
                            'fr' => 'Logo d\'organisation (Sulu)',
                            'nl' => 'Organisatie logo (Sulu)',
                        ],
                    ],
                    'scale' => [
                        'x' => 400,
                        'y' => 400,
                        'mode' => 1,
                        'retina' => false,
                        'forceRatio' => true,
                    ],
                    'transformations' => [

                    ],
                    'options' => [
                        'jpeg_quality' => 100,
                        'webp_quality' => 100,
                        'avif_quality' => 100,
                    ],
                ],
                'sulu-100x100' => [
                    'key' => 'sulu-100x100',
                    'internal' => true,
                    'meta' => [
                        'title' => [
                            'en' => 'Contact card (Sulu)',
                            'de' => 'Personenkarte (Sulu)',
                            'fr' => 'Carte personnelle (Sulu)',
                            'nl' => 'Contact kaart (Sulu)',
                        ],
                    ],
                    'scale' => [
                        'x' => 100,
                        'y' => 100,
                        'mode' => 2,
                        'retina' => false,
                        'forceRatio' => true,
                    ],
                    'transformations' => [

                    ],
                    'options' => [
                        'jpeg_quality' => 100,
                        'webp_quality' => 100,
                        'avif_quality' => 100,
                    ],
                ],
            ],
            'sulu_category.entity.category' => 'Sulu\\Bundle\\CategoryBundle\\Entity\\Category',
            'sulu_category.entity.keyword' => 'Sulu\\Bundle\\CategoryBundle\\Entity\\Keyword',
            'sulu_snippet.areas' => [

            ],
            'console.command.ids' => [
                0 => 'console.command.public_alias.Doctrine\\Bundle\\PHPCRBundle\\Command\\WorkspaceQueryCommand',
                1 => 'console.command.public_alias.Doctrine\\Bundle\\PHPCRBundle\\Command\\MigratorMigrateCommand',
                2 => 'console.command.public_alias.Doctrine\\Bundle\\PHPCRBundle\\Command\\NodeDumpCommand',
                3 => 'console.command.public_alias.Doctrine\\Bundle\\PHPCRBundle\\Command\\NodeMoveCommand',
                4 => 'console.command.public_alias.Doctrine\\Bundle\\PHPCRBundle\\Command\\NodeRemoveCommand',
                5 => 'console.command.public_alias.Doctrine\\Bundle\\PHPCRBundle\\Command\\NodesUpdateCommand',
                6 => 'console.command.public_alias.Doctrine\\Bundle\\PHPCRBundle\\Command\\NodeTouchCommand',
                7 => 'console.command.public_alias.Doctrine\\Bundle\\PHPCRBundle\\Command\\NodeTypeListCommand',
                8 => 'console.command.public_alias.Doctrine\\Bundle\\PHPCRBundle\\Command\\NodeTypeRegisterCommand',
                9 => 'console.command.public_alias.Doctrine\\Bundle\\PHPCRBundle\\Command\\PhpcrShellCommand',
                10 => 'console.command.public_alias.Doctrine\\Bundle\\PHPCRBundle\\Command\\RepositoryInitCommand',
                11 => 'console.command.public_alias.Doctrine\\Bundle\\PHPCRBundle\\Command\\WorkspaceCreateCommand',
                12 => 'console.command.public_alias.Doctrine\\Bundle\\PHPCRBundle\\Command\\WorkspaceDeleteCommand',
                13 => 'console.command.public_alias.Doctrine\\Bundle\\PHPCRBundle\\Command\\WorkspaceExportCommand',
                14 => 'console.command.public_alias.Doctrine\\Bundle\\PHPCRBundle\\Command\\WorkspaceImportCommand',
                15 => 'console.command.public_alias.Doctrine\\Bundle\\PHPCRBundle\\Command\\WorkspaceListCommand',
                16 => 'console.command.public_alias.Doctrine\\Bundle\\PHPCRBundle\\Command\\WorkspacePurgeCommand',
                17 => 'console.command.public_alias.Doctrine\\Bundle\\PHPCRBundle\\OptionalCommand\\InitDoctrineDbalCommand',
                18 => 'console.command.public_alias.handcraftedinthealps_rest_routing.command',
                19 => 'console.command.public_alias.massive_search.command.init',
                20 => 'console.command.public_alias.massive_search.command.status',
                21 => 'console.command.public_alias.massive_search.command.optimize',
                22 => 'console.command.public_alias.massive_search.command.query',
                23 => 'console.command.public_alias.massive_search.command.reindex',
                24 => 'console.command.public_alias.massive_search.command.index_rebuild_deprecated',
                25 => 'console.command.public_alias.massive_search.command.purge',
                26 => 'console.command.public_alias.sulu_page.command.workspace_import',
                27 => 'phpcr_migrations.command.status',
                28 => 'phpcr_migrations.command.migrate',
                29 => 'phpcr_migrations.command.initialize',
            ],
        ];
    }
}
